<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32L562E-DK_NS\Exe\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32L562E-DK_NS\Exe\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Mon Sep 14 16:18:16 2020
<BR><P>
<H3>Maximum Stack Usage =        976 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; FW_APP_Run &rArr; tfm_app_menu &rArr; tfm_eat_test_circuit_sig &rArr; dump_eat_token &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SecureFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[30]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">ADC1_2_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[66]">AES_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32l5xx_it.o(.text.BusFault_Handler) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[53]">COMP_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[55]">CRS_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[31]">DAC_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[6f]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[70]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[71]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[72]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[28]">DMA1_Channel1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[29]">DMA1_Channel2_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel3_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel4_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel5_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel6_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel7_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel8_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[59]">DMA2_Channel1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[5a]">DMA2_Channel2_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[5b]">DMA2_Channel3_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[5c]">DMA2_Channel4_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel5_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[5e]">DMA2_Channel6_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[5f]">DMA2_Channel7_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[60]">DMA2_Channel8_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[26]">DMAMUX1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[27]">DMAMUX1_S_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32l5xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[16]">EXTI0_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[20]">EXTI10_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[21]">EXTI11_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[22]">EXTI12_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[23]">EXTI13_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[24]">EXTI14_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[25]">EXTI15_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[17]">EXTI1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[18]">EXTI2_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[19]">EXTI3_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[1a]">EXTI4_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[1b]">EXTI5_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[1c]">EXTI6_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[1d]">EXTI7_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[1e]">EXTI8_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[1f]">EXTI9_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[32]">FDCAN1_IT0_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[33]">FDCAN1_IT1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from stm32l5xx_it.o(.text.FLASH_IRQHandler) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[12]">FLASH_S_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[56]">FMC_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[68]">FPU_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[13]">GTZC_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[69]">HASH_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l5xx_it.o(.text.HardFault_Handler) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[43]">I2C1_ER_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[42]">I2C1_EV_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[45]">I2C2_ER_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[44]">I2C2_EV_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[62]">I2C3_ER_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[61]">I2C3_EV_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[6d]">I2C4_ER_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[6e]">I2C4_EV_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[74]">ICACHE_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[4e]">LPTIM1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[4f]">LPTIM2_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[6b]">LPTIM3_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[4d]">LPUART1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32l5xx_it.o(.text.MemManage_Handler) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l5xx_it.o(.text.NMI_Handler) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[57]">OCTOSPI1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[75]">OTFDEC1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[6a]">PKA_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[c]">PVD_PVM_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[15]">RCC_S_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[67]">RNG_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[e]">RTC_S_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[63]">SAI1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[64]">SAI2_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[58]">SDMMC1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[46]">SPI1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[47]">SPI2_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[6c]">SPI3_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32l5xx_it.o(.text.SysTick_Handler) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[76]">SystemInit</a> from system_stm32l5xx.o(.text.SystemInit) referenced from startup_stm32l562xx_ns.o(.text)
 <LI><a href="#[f]">TAMP_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[10]">TAMP_S_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[50]">TIM15_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[51]">TIM16_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[52]">TIM17_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[34]">TIM1_BRK_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[37]">TIM1_CC_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[36]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[35]">TIM1_UP_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[38]">TIM2_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[39]">TIM3_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[3a]">TIM4_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[3c]">TIM6_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[3d]">TIM7_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[65]">TSC_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[4b]">UART4_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[4c]">UART5_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[73]">UCPD1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[48]">USART1_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[49]">USART2_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[4a]">USART3_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[54]">USB_FS_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32l5xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32l562xx_ns.o(.text) referenced from startup_stm32l562xx_ns.o(RESET)
 <LI><a href="#[7b]">__2printf</a> from noretval__2printf.o(.text) referenced from test_protections.o(.text.TEST_PROTECTIONS_Run)
 <LI><a href="#[7b]">__2printf</a> from noretval__2printf.o(.text) referenced from main.o(.text.main)
 <LI><a href="#[7b]">__2printf</a> from noretval__2printf.o(.text) referenced from tfm_app.o(.text.tfm_app_menu)
 <LI><a href="#[77]">__main</a> from __main.o(!!!main) referenced from startup_stm32l562xx_ns.o(.text)
 <LI><a href="#[79]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[78]">fputc</a> from main.o(.text.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[7a]">puts</a> from puts.o(.text) referenced from main.o(.text.FW_APP_PrintMainMenu)
 <LI><a href="#[7a]">puts</a> from puts.o(.text) referenced from test_protections.o(.text.TEST_PROTECTIONS_PrintTestingMenu)
 <LI><a href="#[7a]">puts</a> from puts.o(.text) referenced from tfm_app.o(.text.tfm_app_print_menu)
 <LI><a href="#[7c]">tfm_psa_call_veneer</a> from veneer.o(ABSOLUTE) referenced from tfm_psa_ns_api.o(.text.psa_call)
 <LI><a href="#[7d]">tfm_psa_close_veneer</a> from veneer.o(ABSOLUTE) referenced from tfm_psa_ns_api.o(.text.psa_close)
 <LI><a href="#[7e]">tfm_psa_connect_veneer</a> from veneer.o(ABSOLUTE) referenced from tfm_psa_ns_api.o(.text.psa_connect)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7c]"></a>tfm_psa_call_veneer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, veneer.o(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> tfm_psa_ns_api.o(.text.psa_call)
</UL>
<P><STRONG><a name="[7d]"></a>tfm_psa_close_veneer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, veneer.o(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> tfm_psa_ns_api.o(.text.psa_close)
</UL>
<P><STRONG><a name="[7e]"></a>tfm_psa_connect_veneer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, veneer.o(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> tfm_psa_ns_api.o(.text.psa_connect)
</UL>
<P><STRONG><a name="[77]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[81]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[106]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[107]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[82]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[108]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[83]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9d]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[85]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[87]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[89]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[109]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[8e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[10a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[110]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[111]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[112]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[113]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[114]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[115]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[116]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[117]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[118]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[119]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[93]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[11e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[11f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[120]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[121]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[122]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[123]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[124]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[80]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[125]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[126]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[8d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[127]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[8f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; FW_APP_Run &rArr; tfm_app_menu &rArr; tfm_eat_test_circuit_sig &rArr; dump_eat_token &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[128]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[92]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[129]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[94]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMAMUX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMAMUX1_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GTZC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>HASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>OTFDEC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USB_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>__user_initial_stackheap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_stm32l562xx_ns.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[12b]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run_SecUserMem
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_APP_Run
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_eat_token
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_eat_test_circuit_sig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_set_color
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(.text.main)
<LI> test_protections.o(.text.TEST_PROTECTIONS_Run)
<LI> tfm_app.o(.text.tfm_app_menu)
</UL>
<P><STRONG><a name="[98]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[99]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[97]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[84]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[86]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[12c]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[7a]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = puts &rArr; fputc &rArr; COM_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_eat_token
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_eat_test_circuit_sig
</UL>
<BR>[Address Reference Count : 3]<UL><LI> tfm_app.o(.text.tfm_app_print_menu)
<LI> main.o(.text.FW_APP_PrintMainMenu)
<LI> test_protections.o(.text.TEST_PROTECTIONS_PrintTestingMenu)
</UL>
<P><STRONG><a name="[a5]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Init
</UL>

<P><STRONG><a name="[e9]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_test
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_read_uid
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_read_uid
</UL>

<P><STRONG><a name="[d4]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run_SecUserMem
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsefulBuf_CopyOffset
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_read_uid
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_read_uid
</UL>

<P><STRONG><a name="[9e]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[12d]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_test
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_eat_test_circuit_sig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_set_key_policy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_verify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_update
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_setup
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_information
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_destroy_key
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_set_iv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_finish
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_encrypt_setup
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_decrypt_setup
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_abort
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_allocate_key
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_encrypt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_decrypt
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a0]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[88]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[8a]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[96]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[a2]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[91]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[95]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[137]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[139]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>COM_Flush</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, com.o(.text.COM_Flush))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_APP_Run
</UL>

<P><STRONG><a name="[a4]"></a>COM_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, com.o(.text.COM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = COM_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>COM_Receive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, com.o(.text.COM_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = COM_Receive &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_APP_Run
</UL>

<P><STRONG><a name="[a9]"></a>COM_Transmit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, com.o(.text.COM_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = COM_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.FLASH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_IRQHandler &rArr; HAL_FLASH_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>FLASH_PageErase</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l5xx_hal_flash_ex.o(.text.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[ac]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l5xx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[af]"></a>FW_APP_PrintMainMenu</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, main.o(.text.FW_APP_PrintMainMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_APP_PrintMainMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_APP_Run
</UL>

<P><STRONG><a name="[ae]"></a>FW_APP_Run</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, main.o(.text.FW_APP_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = FW_APP_Run &rArr; tfm_app_menu &rArr; tfm_eat_test_circuit_sig &rArr; dump_eat_token &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_APP_PrintMainMenu
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Receive
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Flush
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l5xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run_SecUserMem
</UL>

<P><STRONG><a name="[b4]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32l5xx_hal_flash_ex.o(.text.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run_SecUserMem
</UL>

<P><STRONG><a name="[b8]"></a>HAL_FLASH_EndOfOperationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_EndOfOperationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>HAL_FLASH_GetError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run_SecUserMem
</UL>

<P><STRONG><a name="[ab]"></a>HAL_FLASH_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_FLASH_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OperationErrorCallback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_EndOfOperationCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run_SecUserMem
</UL>

<P><STRONG><a name="[b7]"></a>HAL_FLASH_OperationErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_OperationErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>HAL_FLASH_Program</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run_SecUserMem
</UL>

<P><STRONG><a name="[d1]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run_SecUserMem
</UL>

<P><STRONG><a name="[cb]"></a>HAL_GPIO_Init</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, stm32l5xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[ad]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l5xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[cd]"></a>HAL_IncTick</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l5xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[bb]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l5xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>HAL_InitTick</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32l5xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l5xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[bc]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l5xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c3]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[c5]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c6]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c4]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[c0]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l5xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a6]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Init
</UL>

<P><STRONG><a name="[c7]"></a>HAL_UART_MspInit</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, com.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_UART_Receive</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Receive
</UL>

<P><STRONG><a name="[aa]"></a>HAL_UART_Transmit</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Transmit
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, system_stm32l5xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[76]"></a>SystemInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, system_stm32l5xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>TEST_PROTECTIONS_Run</STRONG> (Thumb, 364 bytes, Stack size 64 bytes, test_protections.o(.text.TEST_PROTECTIONS_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = TEST_PROTECTIONS_Run &rArr; TEST_PROTECTIONS_Run_SecUserMem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_armv8m_region_enable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run_SecUserMem
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Receive
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Flush
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_PrintTestingMenu
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_APP_Run
</UL>

<P><STRONG><a name="[cf]"></a>TEST_PROTECTIONS_Run_SecUserMem</STRONG> (Thumb, 588 bytes, Stack size 72 bytes, test_protections.o(.text.TEST_PROTECTIONS_Run_SecUserMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = TEST_PROTECTIONS_Run_SecUserMem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetError
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run
</UL>

<P><STRONG><a name="[c9]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ca]"></a>UART_CheckIdleState</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l5xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[c8]"></a>UART_SetConfig</STRONG> (Thumb, 548 bytes, Stack size 16 bytes, stm32l5xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[cc]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32l5xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_ns.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>UsefulBuf_CopyOffset</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, usefulbuf.o(.text.UsefulBuf_CopyOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UsefulBuf_CopyOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_eat_test_circuit_sig
</UL>

<P><STRONG><a name="[105]"></a>UsefulBuf_IsValue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usefulbuf.o(.text.UsefulBuf_IsValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsefulBuf_IsValue
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_eat_test_circuit_sig
</UL>

<P><STRONG><a name="[d8]"></a>dump_eat_token</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, tfm_app.o(.text.dump_eat_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dump_eat_token &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_eat_test_circuit_sig
</UL>

<P><STRONG><a name="[78]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fputc &rArr; COM_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>main</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = main &rArr; FW_APP_Run &rArr; tfm_app_menu &rArr; tfm_eat_test_circuit_sig &rArr; dump_eat_token &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run_SecUserMem
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_APP_Run
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d0]"></a>mpu_armv8m_region_enable</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mpu_armv8m_drv.o(.text.mpu_armv8m_region_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpu_armv8m_region_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run
</UL>

<P><STRONG><a name="[da]"></a>printf_set_color</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, test_framework_helpers.o(.text.printf_set_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = printf_set_color &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error
</UL>

<P><STRONG><a name="[db]"></a>psa_aead_decrypt</STRONG> (Thumb, 180 bytes, Stack size 120 bytes, tfm_crypto_ipc_api.o(.text.psa_aead_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = psa_aead_decrypt &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_test
</UL>

<P><STRONG><a name="[e0]"></a>psa_aead_encrypt</STRONG> (Thumb, 180 bytes, Stack size 120 bytes, tfm_crypto_ipc_api.o(.text.psa_aead_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = psa_aead_encrypt &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_test
</UL>

<P><STRONG><a name="[e1]"></a>psa_aead_test</STRONG> (Thumb, 696 bytes, Stack size 224 bytes, crypto_tests_common.o(.text.psa_aead_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = psa_aead_test &rArr; psa_aead_encrypt &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_set_key_policy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_policy_set_usage
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_information
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_destroy_key
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_allocate_key
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_encrypt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_decrypt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
</UL>

<P><STRONG><a name="[e2]"></a>psa_allocate_key</STRONG> (Thumb, 82 bytes, Stack size 96 bytes, tfm_crypto_ipc_api.o(.text.psa_allocate_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = psa_allocate_key &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_test
</UL>

<P><STRONG><a name="[de]"></a>psa_call</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, tfm_psa_ns_api.o(.text.psa_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_ns_interface_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_ps_set
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_ps_remove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_ps_get
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_its_set
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_its_remove
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_its_get
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_initial_attest_get_token
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_set_key_policy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_verify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_update
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_setup
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_information
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_destroy_key
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_set_iv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_finish
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_encrypt_setup
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_decrypt_setup
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_abort
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_allocate_key
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_encrypt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_decrypt
</UL>

<P><STRONG><a name="[eb]"></a>psa_cipher_abort</STRONG> (Thumb, 90 bytes, Stack size 96 bytes, tfm_crypto_ipc_api.o(.text.psa_cipher_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = psa_cipher_abort &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
</UL>

<P><STRONG><a name="[ec]"></a>psa_cipher_decrypt_setup</STRONG> (Thumb, 106 bytes, Stack size 96 bytes, tfm_crypto_ipc_api.o(.text.psa_cipher_decrypt_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = psa_cipher_decrypt_setup &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
</UL>

<P><STRONG><a name="[ed]"></a>psa_cipher_encrypt_setup</STRONG> (Thumb, 106 bytes, Stack size 96 bytes, tfm_crypto_ipc_api.o(.text.psa_cipher_encrypt_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = psa_cipher_encrypt_setup &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
</UL>

<P><STRONG><a name="[ee]"></a>psa_cipher_finish</STRONG> (Thumb, 110 bytes, Stack size 112 bytes, tfm_crypto_ipc_api.o(.text.psa_cipher_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = psa_cipher_finish &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
</UL>

<P><STRONG><a name="[ef]"></a>psa_cipher_set_iv</STRONG> (Thumb, 98 bytes, Stack size 104 bytes, tfm_crypto_ipc_api.o(.text.psa_cipher_set_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = psa_cipher_set_iv &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
</UL>

<P><STRONG><a name="[f0]"></a>psa_cipher_test</STRONG> (Thumb, 1012 bytes, Stack size 192 bytes, crypto_tests_common.o(.text.psa_cipher_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = psa_cipher_test &rArr; psa_cipher_update &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_set_key_policy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_policy_set_usage
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_information
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_destroy_key
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_set_iv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_finish
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_encrypt_setup
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_decrypt_setup
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_abort
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_allocate_key
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
</UL>

<P><STRONG><a name="[f1]"></a>psa_cipher_update</STRONG> (Thumb, 120 bytes, Stack size 120 bytes, tfm_crypto_ipc_api.o(.text.psa_cipher_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = psa_cipher_update &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
</UL>

<P><STRONG><a name="[df]"></a>psa_close</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tfm_psa_ns_api.o(.text.psa_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = psa_close &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_ns_interface_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_ps_set
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_ps_remove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_ps_get
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_its_set
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_its_remove
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_its_get
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_initial_attest_get_token
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_set_key_policy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_verify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_update
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_setup
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_information
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_destroy_key
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_set_iv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_finish
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_encrypt_setup
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_decrypt_setup
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_abort
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_allocate_key
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_encrypt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_decrypt
</UL>

<P><STRONG><a name="[dd]"></a>psa_connect</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tfm_psa_ns_api.o(.text.psa_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = psa_connect &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_ns_interface_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_ps_set
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_ps_remove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_ps_get
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_its_set
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_its_remove
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_its_get
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_initial_attest_get_token
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_set_key_policy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_verify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_update
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_setup
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_information
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_destroy_key
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_set_iv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_finish
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_encrypt_setup
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_decrypt_setup
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_abort
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_allocate_key
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_encrypt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_decrypt
</UL>

<P><STRONG><a name="[e8]"></a>psa_destroy_key</STRONG> (Thumb, 82 bytes, Stack size 88 bytes, tfm_crypto_ipc_api.o(.text.psa_destroy_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = psa_destroy_key &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_test
</UL>

<P><STRONG><a name="[e6]"></a>psa_get_key_information</STRONG> (Thumb, 104 bytes, Stack size 112 bytes, tfm_crypto_ipc_api.o(.text.psa_get_key_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = psa_get_key_information &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_test
</UL>

<P><STRONG><a name="[f2]"></a>psa_hash_setup</STRONG> (Thumb, 94 bytes, Stack size 96 bytes, tfm_crypto_ipc_api.o(.text.psa_hash_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = psa_hash_setup &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_test
</UL>

<P><STRONG><a name="[f3]"></a>psa_hash_test</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, crypto_tests_common.o(.text.psa_hash_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = psa_hash_test &rArr; psa_hash_verify &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_verify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_update
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_setup
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
</UL>

<P><STRONG><a name="[f4]"></a>psa_hash_update</STRONG> (Thumb, 98 bytes, Stack size 104 bytes, tfm_crypto_ipc_api.o(.text.psa_hash_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = psa_hash_update &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_test
</UL>

<P><STRONG><a name="[f5]"></a>psa_hash_verify</STRONG> (Thumb, 98 bytes, Stack size 104 bytes, tfm_crypto_ipc_api.o(.text.psa_hash_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = psa_hash_verify &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_test
</UL>

<P><STRONG><a name="[e5]"></a>psa_import_key</STRONG> (Thumb, 102 bytes, Stack size 104 bytes, tfm_crypto_ipc_api.o(.text.psa_import_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = psa_import_key &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_test
</UL>

<P><STRONG><a name="[f6]"></a>psa_initial_attest_get_token</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, tfm_initial_attestation_ipc_api.o(.text.psa_initial_attest_get_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = psa_initial_attest_get_token &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_eat_test_circuit_sig
</UL>

<P><STRONG><a name="[f7]"></a>psa_its_get</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, tfm_its_ipc_api.o(.text.psa_its_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = psa_its_get &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_read_uid
</UL>

<P><STRONG><a name="[f8]"></a>psa_its_remove</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, tfm_its_ipc_api.o(.text.psa_its_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = psa_its_remove &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_remove_uid
</UL>

<P><STRONG><a name="[f9]"></a>psa_its_set</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, tfm_its_ipc_api.o(.text.psa_its_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = psa_its_set &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_set_uid
</UL>

<P><STRONG><a name="[e3]"></a>psa_key_policy_set_usage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tfm_crypto_ipc_api.o(.text.psa_key_policy_set_usage))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_test
</UL>

<P><STRONG><a name="[fa]"></a>psa_ps_get</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tfm_sst_ipc_api.o(.text.psa_ps_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = psa_ps_get &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_read_uid
</UL>

<P><STRONG><a name="[fb]"></a>psa_ps_remove</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, tfm_sst_ipc_api.o(.text.psa_ps_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = psa_ps_remove &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_remove_uid
</UL>

<P><STRONG><a name="[fc]"></a>psa_ps_set</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, tfm_sst_ipc_api.o(.text.psa_ps_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = psa_ps_set &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_set_uid
</UL>

<P><STRONG><a name="[e4]"></a>psa_set_key_policy</STRONG> (Thumb, 90 bytes, Stack size 96 bytes, tfm_crypto_ipc_api.o(.text.psa_set_key_policy))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = psa_set_key_policy &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_test
</UL>

<P><STRONG><a name="[e7]"></a>set_test_failed</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, test_framework.o(.text.set_test_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = set_test_failed &rArr; print_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_test
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_test
</UL>

<P><STRONG><a name="[b2]"></a>tfm_app_menu</STRONG> (Thumb, 1160 bytes, Stack size 96 bytes, tfm_app.o(.text.tfm_app_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = tfm_app_menu &rArr; tfm_eat_test_circuit_sig &rArr; dump_eat_token &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Receive
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Flush
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_test
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_test
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_test
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_set_uid
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_remove_uid
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_read_uid
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_set_uid
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_remove_uid
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_read_uid
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_eat_test_circuit_sig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_print_menu
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_APP_Run
</UL>

<P><STRONG><a name="[ea]"></a>tfm_ns_interface_dispatch</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tfm_ns_lock.o(.text.tfm_ns_interface_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tfm_ns_interface_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
</UL>

<P><STRONG><a name="[9c]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[8c]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[13a]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[13b]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ce]"></a>TEST_PROTECTIONS_PrintTestingMenu</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, test_protections.o(.text.TEST_PROTECTIONS_PrintTestingMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEST_PROTECTIONS_PrintTestingMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PROTECTIONS_Run
</UL>

<P><STRONG><a name="[fd]"></a>tfm_app_print_menu</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, tfm_app.o(.text.tfm_app_print_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tfm_app_print_menu
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
</UL>

<P><STRONG><a name="[101]"></a>tfm_eat_test_circuit_sig</STRONG> (Thumb, 204 bytes, Stack size 688 bytes, tfm_app.o(.text.tfm_eat_test_circuit_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = tfm_eat_test_circuit_sig &rArr; dump_eat_token &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_initial_attest_get_token
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_eat_token
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsefulBuf_IsValue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsefulBuf_CopyOffset
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
</UL>

<P><STRONG><a name="[103]"></a>tfm_its_read_uid</STRONG> (Thumb, 68 bytes, Stack size 80 bytes, tfm_app.o(.text.tfm_its_read_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tfm_its_read_uid &rArr; psa_its_get &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_its_get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
</UL>

<P><STRONG><a name="[104]"></a>tfm_its_remove_uid</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tfm_app.o(.text.tfm_its_remove_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tfm_its_remove_uid &rArr; psa_its_remove &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_its_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
</UL>

<P><STRONG><a name="[102]"></a>tfm_its_set_uid</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, tfm_app.o(.text.tfm_its_set_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tfm_its_set_uid &rArr; psa_its_set &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_its_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
</UL>

<P><STRONG><a name="[ff]"></a>tfm_sst_read_uid</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, tfm_app.o(.text.tfm_sst_read_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tfm_sst_read_uid &rArr; psa_ps_get &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_ps_get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
</UL>

<P><STRONG><a name="[100]"></a>tfm_sst_remove_uid</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tfm_app.o(.text.tfm_sst_remove_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tfm_sst_remove_uid &rArr; psa_ps_remove &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_ps_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
</UL>

<P><STRONG><a name="[fe]"></a>tfm_sst_set_uid</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, tfm_app.o(.text.tfm_sst_set_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tfm_sst_set_uid &rArr; psa_ps_set &rArr; psa_call &rArr; tfm_ns_interface_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_ps_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_app_menu
</UL>

<P><STRONG><a name="[c2]"></a>__NVIC_SetPriority</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l5xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ba]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l5xx_hal_flash.o(.text.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[b5]"></a>FLASH_MassErase</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32l5xx_hal_flash_ex.o(.text.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[d9]"></a>print_error</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, test_framework.o(.text.print_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = print_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_failed
</UL>

<P><STRONG><a name="[79]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
