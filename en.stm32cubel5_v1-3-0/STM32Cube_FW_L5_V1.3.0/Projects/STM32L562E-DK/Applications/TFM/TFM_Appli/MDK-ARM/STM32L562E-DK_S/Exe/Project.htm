<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32L562E-DK_S\Exe\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32L562E-DK_S\Exe\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Fri Sep 18 10:33:24 2020
<BR><P>
<H3>Maximum Stack Usage =       2456 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
tfm_crypto_copy_key &rArr; mbedcrypto__psa_copy_key &rArr; mbedcrypto__psa_import_key &rArr; psa_import_key_into_slot &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[17b]">TZ_AllocModuleContext_S</a>
 <LI><a href="#[17c]">TZ_FreeModuleContext_S</a>
 <LI><a href="#[17d]">TZ_InitContextSystem_S</a>
 <LI><a href="#[17e]">TZ_LoadContext_S</a>
 <LI><a href="#[17f]">TZ_StoreContext_S</a>
 <LI><a href="#[180]">tfm_psa_call_veneer</a>
 <LI><a href="#[181]">tfm_psa_close_veneer</a>
 <LI><a href="#[182]">tfm_psa_connect_veneer</a>
 <LI><a href="#[183]">tfm_psa_framework_version_veneer</a>
 <LI><a href="#[184]">tfm_psa_version_veneer</a>
 <LI><a href="#[185]">tfm_initial_attest_get_token_size_veneer</a>
 <LI><a href="#[186]">tfm_initial_attest_get_token_veneer</a>
 <LI><a href="#[187]">tfm_tfm_crypto_aead_decrypt_veneer</a>
 <LI><a href="#[188]">tfm_tfm_crypto_aead_encrypt_veneer</a>
 <LI><a href="#[189]">tfm_tfm_crypto_allocate_key_veneer</a>
 <LI><a href="#[18a]">tfm_tfm_crypto_asymmetric_decrypt_veneer</a>
 <LI><a href="#[18b]">tfm_tfm_crypto_asymmetric_encrypt_veneer</a>
 <LI><a href="#[18c]">tfm_tfm_crypto_asymmetric_sign_veneer</a>
 <LI><a href="#[18d]">tfm_tfm_crypto_asymmetric_verify_veneer</a>
 <LI><a href="#[18e]">tfm_tfm_crypto_cipher_abort_veneer</a>
 <LI><a href="#[18f]">tfm_tfm_crypto_cipher_decrypt_setup_veneer</a>
 <LI><a href="#[190]">tfm_tfm_crypto_cipher_encrypt_setup_veneer</a>
 <LI><a href="#[191]">tfm_tfm_crypto_cipher_finish_veneer</a>
 <LI><a href="#[192]">tfm_tfm_crypto_cipher_generate_iv_veneer</a>
 <LI><a href="#[193]">tfm_tfm_crypto_cipher_set_iv_veneer</a>
 <LI><a href="#[194]">tfm_tfm_crypto_cipher_update_veneer</a>
 <LI><a href="#[195]">tfm_tfm_crypto_copy_key_veneer</a>
 <LI><a href="#[196]">tfm_tfm_crypto_destroy_key_veneer</a>
 <LI><a href="#[197]">tfm_tfm_crypto_export_key_veneer</a>
 <LI><a href="#[198]">tfm_tfm_crypto_export_public_key_veneer</a>
 <LI><a href="#[199]">tfm_tfm_crypto_generate_key_veneer</a>
 <LI><a href="#[19a]">tfm_tfm_crypto_generate_random_veneer</a>
 <LI><a href="#[19b]">tfm_tfm_crypto_generator_abort_veneer</a>
 <LI><a href="#[19c]">tfm_tfm_crypto_generator_import_key_veneer</a>
 <LI><a href="#[19d]">tfm_tfm_crypto_generator_read_veneer</a>
 <LI><a href="#[19e]">tfm_tfm_crypto_get_generator_capacity_veneer</a>
 <LI><a href="#[19f]">tfm_tfm_crypto_get_key_information_veneer</a>
 <LI><a href="#[1a0]">tfm_tfm_crypto_get_key_lifetime_veneer</a>
 <LI><a href="#[1a1]">tfm_tfm_crypto_get_key_policy_veneer</a>
 <LI><a href="#[1a2]">tfm_tfm_crypto_hash_abort_veneer</a>
 <LI><a href="#[1a3]">tfm_tfm_crypto_hash_clone_veneer</a>
 <LI><a href="#[1a4]">tfm_tfm_crypto_hash_finish_veneer</a>
 <LI><a href="#[1a5]">tfm_tfm_crypto_hash_setup_veneer</a>
 <LI><a href="#[1a6]">tfm_tfm_crypto_hash_update_veneer</a>
 <LI><a href="#[1a7]">tfm_tfm_crypto_hash_verify_veneer</a>
 <LI><a href="#[1a8]">tfm_tfm_crypto_import_key_veneer</a>
 <LI><a href="#[1a9]">tfm_tfm_crypto_key_agreement_veneer</a>
 <LI><a href="#[1aa]">tfm_tfm_crypto_key_derivation_veneer</a>
 <LI><a href="#[1ab]">tfm_tfm_crypto_mac_abort_veneer</a>
 <LI><a href="#[1ac]">tfm_tfm_crypto_mac_sign_finish_veneer</a>
 <LI><a href="#[1ad]">tfm_tfm_crypto_mac_sign_setup_veneer</a>
 <LI><a href="#[1ae]">tfm_tfm_crypto_mac_update_veneer</a>
 <LI><a href="#[1af]">tfm_tfm_crypto_mac_verify_finish_veneer</a>
 <LI><a href="#[1b0]">tfm_tfm_crypto_mac_verify_setup_veneer</a>
 <LI><a href="#[1b1]">tfm_tfm_crypto_set_key_policy_veneer</a>
 <LI><a href="#[1b2]">tfm_tfm_its_get_info_req_veneer</a>
 <LI><a href="#[1b3]">tfm_tfm_its_get_req_veneer</a>
 <LI><a href="#[1b4]">tfm_tfm_its_remove_req_veneer</a>
 <LI><a href="#[1b5]">tfm_tfm_its_set_req_veneer</a>
 <LI><a href="#[1b6]">tfm_tfm_sst_get_info_req_veneer</a>
 <LI><a href="#[1b7]">tfm_tfm_sst_get_req_veneer</a>
 <LI><a href="#[1b8]">tfm_tfm_sst_get_support_req_veneer</a>
 <LI><a href="#[1b9]">tfm_tfm_sst_remove_req_veneer</a>
 <LI><a href="#[1ba]">tfm_tfm_sst_set_req_veneer</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[30]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[226]">tfm_panic</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[226]">tfm_panic</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">ADC1_2_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[66]">AES_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[b9]">ARM_Flash_EraseChip</a> from low_level_flash.o(.text.ARM_Flash_EraseChip) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[b8]">ARM_Flash_EraseSector</a> from low_level_flash.o(.text.ARM_Flash_EraseSector) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[b2]">ARM_Flash_GetCapabilities</a> from low_level_flash.o(.text.ARM_Flash_GetCapabilities) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[bb]">ARM_Flash_GetInfo</a> from low_level_flash.o(.text.ARM_Flash_GetInfo) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[ba]">ARM_Flash_GetStatus</a> from low_level_flash.o(.text.ARM_Flash_GetStatus) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[b1]">ARM_Flash_GetVersion</a> from low_level_flash.o(.text.ARM_Flash_GetVersion) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[b3]">ARM_Flash_Initialize</a> from low_level_flash.o(.text.ARM_Flash_Initialize) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[b5]">ARM_Flash_PowerControl</a> from low_level_flash.o(.text.ARM_Flash_PowerControl) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[b7]">ARM_Flash_ProgramData</a> from low_level_flash.o(.text.ARM_Flash_ProgramData) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[b6]">ARM_Flash_ReadData</a> from low_level_flash.o(.text.ARM_Flash_ReadData) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[b4]">ARM_Flash_Uninitialize</a> from low_level_flash.o(.text.ARM_Flash_Uninitialize) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[ad]">ARM_USART0_Control</a> from low_level_com.o(.text.ARM_USART0_Control) referenced from low_level_com.o(.rodata.Driver_USART0)
 <LI><a href="#[b0]">ARM_USART0_GetModemStatus</a> from low_level_com.o(.text.ARM_USART0_GetModemStatus) referenced from low_level_com.o(.rodata.Driver_USART0)
 <LI><a href="#[ac]">ARM_USART0_GetRxCount</a> from low_level_com.o(.text.ARM_USART0_GetRxCount) referenced from low_level_com.o(.rodata.Driver_USART0)
 <LI><a href="#[ae]">ARM_USART0_GetStatus</a> from low_level_com.o(.text.ARM_USART0_GetStatus) referenced from low_level_com.o(.rodata.Driver_USART0)
 <LI><a href="#[ab]">ARM_USART0_GetTxCount</a> from low_level_com.o(.text.ARM_USART0_GetTxCount) referenced from low_level_com.o(.rodata.Driver_USART0)
 <LI><a href="#[a5]">ARM_USART0_Initialize</a> from low_level_com.o(.text.ARM_USART0_Initialize) referenced from low_level_com.o(.rodata.Driver_USART0)
 <LI><a href="#[a7]">ARM_USART0_PowerControl</a> from low_level_com.o(.text.ARM_USART0_PowerControl) referenced from low_level_com.o(.rodata.Driver_USART0)
 <LI><a href="#[a9]">ARM_USART0_Receive</a> from low_level_com.o(.text.ARM_USART0_Receive) referenced from low_level_com.o(.rodata.Driver_USART0)
 <LI><a href="#[a8]">ARM_USART0_Send</a> from low_level_com.o(.text.ARM_USART0_Send) referenced from low_level_com.o(.rodata.Driver_USART0)
 <LI><a href="#[af]">ARM_USART0_SetModemControl</a> from low_level_com.o(.text.ARM_USART0_SetModemControl) referenced from low_level_com.o(.rodata.Driver_USART0)
 <LI><a href="#[aa]">ARM_USART0_Transfer</a> from low_level_com.o(.text.ARM_USART0_Transfer) referenced from low_level_com.o(.rodata.Driver_USART0)
 <LI><a href="#[a6]">ARM_USART0_Uninitialize</a> from low_level_com.o(.text.ARM_USART0_Uninitialize) referenced from low_level_com.o(.rodata.Driver_USART0)
 <LI><a href="#[a4]">ARM_USART_GetCapabilities</a> from low_level_com.o(.text.ARM_USART_GetCapabilities) referenced from low_level_com.o(.rodata.Driver_USART0)
 <LI><a href="#[a3]">ARM_USART_GetVersion</a> from low_level_com.o(.text.ARM_USART_GetVersion) referenced from low_level_com.o(.rodata.Driver_USART0)
 <LI><a href="#[4]">BusFault_Handler</a> from tfm_arch_v8m_main.o(.text.BusFault_Handler) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[53]">COMP_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[55]">CRS_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[31]">DAC_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[6f]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[70]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[71]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[72]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[28]">DMA1_Channel1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[29]">DMA1_Channel2_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel3_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel4_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel5_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel6_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel7_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel8_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[59]">DMA2_Channel1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[5a]">DMA2_Channel2_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[5b]">DMA2_Channel3_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[5c]">DMA2_Channel4_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel5_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[5e]">DMA2_Channel6_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[5f]">DMA2_Channel7_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[60]">DMA2_Channel8_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[26]">DMAMUX1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[27]">DMAMUX1_S_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[16]">EXTI0_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[20]">EXTI10_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[21]">EXTI11_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[22]">EXTI12_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[23]">EXTI13_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[24]">EXTI14_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[25]">EXTI15_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[17]">EXTI1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[18]">EXTI2_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[19]">EXTI3_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[1a]">EXTI4_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[1b]">EXTI5_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[1c]">EXTI6_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[1d]">EXTI7_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[1e]">EXTI8_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[1f]">EXTI9_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[32]">FDCAN1_IT0_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[33]">FDCAN1_IT1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[12]">FLASH_S_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[56]">FMC_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[68]">FPU_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[13]">GTZC_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[69]">HASH_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[43]">I2C1_ER_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[42]">I2C1_EV_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[45]">I2C2_ER_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[44]">I2C2_EV_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[62]">I2C3_ER_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[61]">I2C3_EV_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[6d]">I2C4_ER_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[6e]">I2C4_EV_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[74]">ICACHE_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[4e]">LPTIM1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[4f]">LPTIM2_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[6b]">LPTIM3_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[4d]">LPUART1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from tfm_arch_v8m_main.o(.text.MemManage_Handler) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[57]">OCTOSPI1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[75]">OTFDEC1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[6a]">PKA_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[78]">PKA_Memcpy_u8_to_u32</a> from stm32l5xx_hal_pka.o(.text.PKA_Memcpy_u8_to_u32) referenced from stm32l5xx_hal_pka.o(.text.PKA_ECDSAVerif_Set)
 <LI><a href="#[78]">PKA_Memcpy_u8_to_u32</a> from stm32l5xx_hal_pka.o(.text.PKA_Memcpy_u8_to_u32) referenced from stm32l5xx_hal_pka.o(.text.PKA_ModExp_Set)
 <LI><a href="#[78]">PKA_Memcpy_u8_to_u32</a> from stm32l5xx_hal_pka.o(.text.PKA_Memcpy_u8_to_u32) referenced from stm32l5xx_hal_pka.o(.text.PKA_RSACRTExp_Set)
 <LI><a href="#[c]">PVD_PVM_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from tfm_arch_v8m_main.o(.text.PendSV_Handler) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[15]">RCC_S_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[67]">RNG_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[e]">RTC_S_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[63]">SAI1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[64]">SAI2_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[58]">SDMMC1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[46]">SPI1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[47]">SPI2_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[6c]">SPI3_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from tfm_arch_v8m_main.o(.text.SVC_Handler) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from tfm_arch_v8m_main.o(.text.SecureFault_Handler) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[76]">SystemInit</a> from system_stm32l5xx.o(.text.SystemInit) referenced from startup_stm32l562xx_s.o(.text)
 <LI><a href="#[f]">TAMP_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[10]">TAMP_S_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[50]">TIM15_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[51]">TIM16_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[52]">TIM17_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[34]">TIM1_BRK_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[37]">TIM1_CC_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[36]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[35]">TIM1_UP_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[38]">TIM2_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[39]">TIM3_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[3a]">TIM4_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[3c]">TIM6_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[3d]">TIM7_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[65]">TSC_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[4b]">UART4_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[4c]">UART5_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[7a]">UART_RxISR_16BIT</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced from stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[7a]">UART_RxISR_16BIT</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced from stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[7b]">UART_RxISR_16BIT_FIFOEN</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN) referenced from stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[7d]">UART_RxISR_8BIT</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced from stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[7c]">UART_RxISR_8BIT_FIFOEN</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN) referenced from stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[73]">UCPD1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[48]">USART1_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[49]">USART2_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[4a]">USART3_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[54]">USB_FS_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from tfm_arch_v8m_main.o(.text.UsageFault_Handler) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32l562xx_s.o(.text) referenced from startup_stm32l562xx_s.o(RESET)
 <LI><a href="#[77]">__main</a> from __main.o(!!!main) referenced from startup_stm32l562xx_s.o(.text)
 <LI><a href="#[12f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[8a]">add_one_and_zeros_padding</a> from cipher.o(.text.add_one_and_zeros_padding) referenced from cipher.o(.text.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[8c]">add_pkcs_padding</a> from cipher.o(.text.add_pkcs_padding) referenced from cipher.o(.text.mbedtls_cipher_setup)
 <LI><a href="#[88]">add_zeros_and_len_padding</a> from cipher.o(.text.add_zeros_and_len_padding) referenced from cipher.o(.text.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[86]">add_zeros_padding</a> from cipher.o(.text.add_zeros_padding) referenced from cipher.o(.text.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[bd]">aes_crypt_cbc_wrap</a> from cipher_wrap.o(.text.aes_crypt_cbc_wrap) referenced from cipher_wrap.o(.rodata.aes_info)
 <LI><a href="#[be]">aes_crypt_cfb128_wrap</a> from cipher_wrap.o(.text.aes_crypt_cfb128_wrap) referenced from cipher_wrap.o(.rodata.aes_info)
 <LI><a href="#[c0]">aes_crypt_ctr_wrap</a> from cipher_wrap.o(.text.aes_crypt_ctr_wrap) referenced from cipher_wrap.o(.rodata.aes_info)
 <LI><a href="#[bc]">aes_crypt_ecb_wrap</a> from cipher_wrap.o(.text.aes_crypt_ecb_wrap) referenced from cipher_wrap.o(.rodata.aes_info)
 <LI><a href="#[bf]">aes_crypt_ofb_wrap</a> from cipher_wrap.o(.text.aes_crypt_ofb_wrap) referenced from cipher_wrap.o(.rodata.aes_info)
 <LI><a href="#[c3]">aes_ctx_alloc</a> from cipher_wrap.o(.text.aes_ctx_alloc) referenced from cipher_wrap.o(.rodata.aes_info)
 <LI><a href="#[c4]">aes_ctx_free</a> from cipher_wrap.o(.text.aes_ctx_free) referenced from cipher_wrap.o(.rodata.aes_info)
 <LI><a href="#[c2]">aes_setkey_dec_wrap</a> from cipher_wrap.o(.text.aes_setkey_dec_wrap) referenced from cipher_wrap.o(.rodata.aes_info)
 <LI><a href="#[c1]">aes_setkey_enc_wrap</a> from cipher_wrap.o(.text.aes_setkey_enc_wrap) referenced from cipher_wrap.o(.rodata.aes_info)
 <LI><a href="#[12e]">attest_partition_init</a> from tfm_attestation_req_mngr.o(.text.attest_partition_init) referenced from spm_api.o(.rodata.static_data_list)
 <LI><a href="#[95]">buffer_alloc_calloc</a> from memory_buffer_alloc.o(.text.buffer_alloc_calloc) referenced from memory_buffer_alloc.o(.text.mbedtls_memory_buffer_alloc_init)
 <LI><a href="#[96]">buffer_alloc_free</a> from memory_buffer_alloc.o(.text.buffer_alloc_free) referenced from memory_buffer_alloc.o(.text.mbedtls_memory_buffer_alloc_init)
 <LI><a href="#[138]">calloc</a> from calloc.o(.text) referenced from platform.o(.data..L_MergedGlobals)
 <LI><a href="#[c5]">ccm_aes_setkey_wrap</a> from cipher_wrap.o(.text.ccm_aes_setkey_wrap) referenced 2 times from cipher_wrap.o(.rodata.ccm_aes_info)
 <LI><a href="#[c6]">ccm_ctx_alloc</a> from cipher_wrap.o(.text.ccm_ctx_alloc) referenced from cipher_wrap.o(.rodata.ccm_aes_info)
 <LI><a href="#[c7]">ccm_ctx_free</a> from cipher_wrap.o(.text.ccm_ctx_free) referenced from cipher_wrap.o(.rodata.ccm_aes_info)
 <LI><a href="#[d0]">ecdsa_alloc_wrap</a> from pk_wrap.o(.text.ecdsa_alloc_wrap) referenced from pk_wrap.o(.rodata.mbedtls_ecdsa_info)
 <LI><a href="#[cc]">ecdsa_can_do</a> from pk_wrap.o(.text.ecdsa_can_do) referenced from pk_wrap.o(.rodata.mbedtls_ecdsa_info)
 <LI><a href="#[d1]">ecdsa_free_wrap</a> from pk_wrap.o(.text.ecdsa_free_wrap) referenced from pk_wrap.o(.rodata.mbedtls_ecdsa_info)
 <LI><a href="#[ce]">ecdsa_sign_wrap</a> from pk_wrap.o(.text.ecdsa_sign_wrap) referenced from pk_wrap.o(.rodata.mbedtls_ecdsa_info)
 <LI><a href="#[cd]">ecdsa_verify_wrap</a> from pk_wrap.o(.text.ecdsa_verify_wrap) referenced from pk_wrap.o(.rodata.mbedtls_ecdsa_info)
 <LI><a href="#[d6]">eckey_alloc_wrap</a> from pk_wrap.o(.text.eckey_alloc_wrap) referenced from pk_wrap.o(.rodata.mbedtls_eckey_info)
 <LI><a href="#[d6]">eckey_alloc_wrap</a> from pk_wrap.o(.text.eckey_alloc_wrap) referenced from pk_wrap.o(.rodata.mbedtls_eckeydh_info)
 <LI><a href="#[d3]">eckey_can_do</a> from pk_wrap.o(.text.eckey_can_do) referenced from pk_wrap.o(.rodata.mbedtls_eckey_info)
 <LI><a href="#[cf]">eckey_check_pair</a> from pk_wrap.o(.text.eckey_check_pair) referenced from pk_wrap.o(.rodata.mbedtls_ecdsa_info)
 <LI><a href="#[cf]">eckey_check_pair</a> from pk_wrap.o(.text.eckey_check_pair) referenced from pk_wrap.o(.rodata.mbedtls_eckey_info)
 <LI><a href="#[cf]">eckey_check_pair</a> from pk_wrap.o(.text.eckey_check_pair) referenced from pk_wrap.o(.rodata.mbedtls_eckeydh_info)
 <LI><a href="#[d2]">eckey_debug</a> from pk_wrap.o(.text.eckey_debug) referenced from pk_wrap.o(.rodata.mbedtls_ecdsa_info)
 <LI><a href="#[d2]">eckey_debug</a> from pk_wrap.o(.text.eckey_debug) referenced from pk_wrap.o(.rodata.mbedtls_eckey_info)
 <LI><a href="#[d2]">eckey_debug</a> from pk_wrap.o(.text.eckey_debug) referenced from pk_wrap.o(.rodata.mbedtls_eckeydh_info)
 <LI><a href="#[d7]">eckey_free_wrap</a> from pk_wrap.o(.text.eckey_free_wrap) referenced from pk_wrap.o(.rodata.mbedtls_eckey_info)
 <LI><a href="#[d7]">eckey_free_wrap</a> from pk_wrap.o(.text.eckey_free_wrap) referenced from pk_wrap.o(.rodata.mbedtls_eckeydh_info)
 <LI><a href="#[cb]">eckey_get_bitlen</a> from pk_wrap.o(.text.eckey_get_bitlen) referenced from pk_wrap.o(.rodata.mbedtls_ecdsa_info)
 <LI><a href="#[cb]">eckey_get_bitlen</a> from pk_wrap.o(.text.eckey_get_bitlen) referenced from pk_wrap.o(.rodata.mbedtls_eckey_info)
 <LI><a href="#[cb]">eckey_get_bitlen</a> from pk_wrap.o(.text.eckey_get_bitlen) referenced from pk_wrap.o(.rodata.mbedtls_eckeydh_info)
 <LI><a href="#[d5]">eckey_sign_wrap</a> from pk_wrap.o(.text.eckey_sign_wrap) referenced from pk_wrap.o(.rodata.mbedtls_eckey_info)
 <LI><a href="#[d4]">eckey_verify_wrap</a> from pk_wrap.o(.text.eckey_verify_wrap) referenced from pk_wrap.o(.rodata.mbedtls_eckey_info)
 <LI><a href="#[d8]">eckeydh_can_do</a> from pk_wrap.o(.text.eckeydh_can_do) referenced from pk_wrap.o(.rodata.mbedtls_eckeydh_info)
 <LI><a href="#[93]">ecp_mod_p192k1</a> from ecp_curves_alt.o(.text.ecp_mod_p192k1) referenced from ecp_curves_alt.o(.text.mbedtls_ecp_group_load)
 <LI><a href="#[92]">ecp_mod_p224k1</a> from ecp_curves_alt.o(.text.ecp_mod_p224k1) referenced from ecp_curves_alt.o(.text.mbedtls_ecp_group_load)
 <LI><a href="#[90]">ecp_mod_p255</a> from ecp_curves_alt.o(.text.ecp_mod_p255) referenced from ecp_curves_alt.o(.text.mbedtls_ecp_group_load)
 <LI><a href="#[91]">ecp_mod_p256k1</a> from ecp_curves_alt.o(.text.ecp_mod_p256k1) referenced from ecp_curves_alt.o(.text.mbedtls_ecp_group_load)
 <LI><a href="#[8f]">ecp_mod_p448</a> from ecp_curves_alt.o(.text.ecp_mod_p448) referenced from ecp_curves_alt.o(.text.mbedtls_ecp_group_load)
 <LI><a href="#[a2]">exit_zone</a> from tfm_thread.o(SFN) referenced from tfm_thread.o(.text.tfm_thrd_start)
 <LI><a href="#[130]">fputc</a> from uart_stdout.o(.text.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[139]">free</a> from h1_free.o(.text) referenced from platform.o(.data..L_MergedGlobals)
 <LI><a href="#[c8]">gcm_aes_setkey_wrap</a> from cipher_wrap.o(.text.gcm_aes_setkey_wrap) referenced 2 times from cipher_wrap.o(.rodata.gcm_aes_info)
 <LI><a href="#[c9]">gcm_ctx_alloc</a> from cipher_wrap.o(.text.gcm_ctx_alloc) referenced from cipher_wrap.o(.rodata.gcm_aes_info)
 <LI><a href="#[ca]">gcm_ctx_free</a> from cipher_wrap.o(.text.gcm_ctx_free) referenced from cipher_wrap.o(.rodata.gcm_aes_info)
 <LI><a href="#[84]">get_no_padding</a> from cipher.o(.text.get_no_padding) referenced from cipher.o(.text.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[89]">get_one_and_zeros_padding</a> from cipher.o(.text.get_one_and_zeros_padding) referenced from cipher.o(.text.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[8b]">get_pkcs_padding</a> from cipher.o(.text.get_pkcs_padding) referenced from cipher.o(.text.mbedtls_cipher_setup)
 <LI><a href="#[87]">get_zeros_and_len_padding</a> from cipher.o(.text.get_zeros_and_len_padding) referenced from cipher.o(.text.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[85]">get_zeros_padding</a> from cipher.o(.text.get_zeros_padding) referenced from cipher.o(.text.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[80]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(.text.mbedtls_ctr_drbg_random) referenced from psa_crypto.o(.text.mbedcrypto__psa_asymmetric_sign)
 <LI><a href="#[80]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(.text.mbedtls_ctr_drbg_random) referenced from psa_crypto.o(.text.mbedcrypto__psa_asymmetric_verify)
 <LI><a href="#[80]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(.text.mbedtls_ctr_drbg_random) referenced from psa_crypto.o(.text.mbedcrypto__psa_generate_key)
 <LI><a href="#[80]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(.text.mbedtls_ctr_drbg_random) referenced from psa_crypto.o(.text.mbedcrypto__psa_key_agreement)
 <LI><a href="#[80]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(.text.mbedtls_ctr_drbg_random) referenced from psa_crypto.o(.text.psa_import_key_into_slot)
 <LI><a href="#[82]">mbedtls_entropy_free</a> from entropy.o(.text.mbedtls_entropy_free) referenced from psa_crypto.o(.text.mbedcrypto__psa_crypto_init)
 <LI><a href="#[83]">mbedtls_entropy_func</a> from entropy.o(.text.mbedtls_entropy_func) referenced from psa_crypto.o(.text.mbedcrypto__psa_crypto_init)
 <LI><a href="#[81]">mbedtls_entropy_init</a> from entropy.o(.text.mbedtls_entropy_init) referenced from psa_crypto.o(.text.mbedcrypto__psa_crypto_init)
 <LI><a href="#[94]">mbedtls_hardware_poll</a> from low_level_rng.o(.text.mbedtls_hardware_poll) referenced from entropy.o(.text.mbedtls_entropy_init)
 <LI><a href="#[7f]">mbedtls_hmac_drbg_random</a> from hmac_drbg.o(.text.mbedtls_hmac_drbg_random) referenced from ecdsa.o(.text.ecdsa_sign_det_restartable)
 <LI><a href="#[97]">mbedtls_mpi_cmp_int</a> from bignum.o(.text.mbedtls_mpi_cmp_int) referenced from rsa_alt.o(.text.mbedtls_rsa_complete)
 <LI><a href="#[8d]">mbedtls_mpi_free</a> from bignum.o(.text.mbedtls_mpi_free) referenced from ecp_alt.o(.text.mbedtls_ecp_group_free)
 <LI><a href="#[8d]">mbedtls_mpi_free</a> from bignum.o(.text.mbedtls_mpi_free) referenced from ecp_alt.o(.text.mbedtls_ecp_point_free)
 <LI><a href="#[8d]">mbedtls_mpi_free</a> from bignum.o(.text.mbedtls_mpi_free) referenced from bignum.o(.text.mbedtls_mpi_div_mpi)
 <LI><a href="#[8d]">mbedtls_mpi_free</a> from bignum.o(.text.mbedtls_mpi_free) referenced from bignum.o(.text.mbedtls_mpi_exp_mod)
 <LI><a href="#[8d]">mbedtls_mpi_free</a> from bignum.o(.text.mbedtls_mpi_free) referenced from bignum.o(.text.mbedtls_mpi_gcd)
 <LI><a href="#[8d]">mbedtls_mpi_free</a> from bignum.o(.text.mbedtls_mpi_free) referenced from bignum.o(.text.mbedtls_mpi_inv_mod)
 <LI><a href="#[8d]">mbedtls_mpi_free</a> from bignum.o(.text.mbedtls_mpi_free) referenced from rsa_alt.o(.text.mbedtls_rsa_gen_key)
 <LI><a href="#[8d]">mbedtls_mpi_free</a> from bignum.o(.text.mbedtls_mpi_free) referenced from rsa_alt.o(.text.mbedtls_rsa_private)
 <LI><a href="#[8d]">mbedtls_mpi_free</a> from bignum.o(.text.mbedtls_mpi_free) referenced from bignum.o(.text.mpi_miller_rabin)
 <LI><a href="#[8e]">mbedtls_mpi_init</a> from bignum.o(.text.mbedtls_mpi_init) referenced from ecp_alt.o(.text.mbedtls_ecp_group_init)
 <LI><a href="#[8e]">mbedtls_mpi_init</a> from bignum.o(.text.mbedtls_mpi_init) referenced from ecp_alt.o(.text.mbedtls_ecp_point_init)
 <LI><a href="#[8e]">mbedtls_mpi_init</a> from bignum.o(.text.mbedtls_mpi_init) referenced from rsa_alt.o(.text.mbedtls_rsa_gen_key)
 <LI><a href="#[8e]">mbedtls_mpi_init</a> from bignum.o(.text.mbedtls_mpi_init) referenced from rsa_alt.o(.text.mbedtls_rsa_private)
 <LI><a href="#[7e]">mbedtls_platform_zeroize</a> from platform_util.o(.text.mbedtls_platform_zeroize) referenced from ctr_drbg.o(.text.block_cipher_df)
 <LI><a href="#[7e]">mbedtls_platform_zeroize</a> from platform_util.o(.text.mbedtls_platform_zeroize) referenced from cmac.o(.text.mbedtls_cipher_cmac_finish)
 <LI><a href="#[7e]">mbedtls_platform_zeroize</a> from platform_util.o(.text.mbedtls_platform_zeroize) referenced from pkcs12.o(.text.mbedtls_pkcs12_derivation)
 <LI><a href="#[e6]">mbedtls_sha1_ret</a> from sha1.o(.text.mbedtls_sha1_ret) referenced from md_wrap.o(.rodata.mbedtls_sha1_info)
 <LI><a href="#[ff]">memset</a> from memset.o(.text) referenced from platform_util.o(.rodata.memset_func)
 <LI><a href="#[136]">psa_attest_get_token</a> from tfm_attestation_req_mngr.o(.text.psa_attest_get_token) referenced from tfm_attestation_req_mngr.o(.text.attest_partition_init)
 <LI><a href="#[137]">psa_attest_get_token_size</a> from tfm_attestation_req_mngr.o(.text.psa_attest_get_token_size) referenced from tfm_attestation_req_mngr.o(.text.attest_partition_init)
 <LI><a href="#[e0]">rsa_alloc_wrap</a> from pk_wrap.o(.text.rsa_alloc_wrap) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[da]">rsa_can_do</a> from pk_wrap.o(.text.rsa_can_do) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[df]">rsa_check_pair_wrap</a> from pk_wrap.o(.text.rsa_check_pair_wrap) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[e2]">rsa_debug</a> from pk_wrap.o(.text.rsa_debug) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[dd]">rsa_decrypt_wrap</a> from pk_wrap.o(.text.rsa_decrypt_wrap) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[de]">rsa_encrypt_wrap</a> from pk_wrap.o(.text.rsa_encrypt_wrap) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[e1]">rsa_free_wrap</a> from pk_wrap.o(.text.rsa_free_wrap) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[d9]">rsa_get_bitlen</a> from pk_wrap.o(.text.rsa_get_bitlen) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[dc]">rsa_sign_wrap</a> from pk_wrap.o(.text.rsa_sign_wrap) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[db]">rsa_verify_wrap</a> from pk_wrap.o(.text.rsa_verify_wrap) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[e9]">sha1_clone_wrap</a> from md_wrap.o(.text.sha1_clone_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha1_info)
 <LI><a href="#[e7]">sha1_ctx_alloc</a> from md_wrap.o(.text.sha1_ctx_alloc) referenced from md_wrap.o(.rodata.mbedtls_sha1_info)
 <LI><a href="#[e8]">sha1_ctx_free</a> from md_wrap.o(.text.sha1_ctx_free) referenced from md_wrap.o(.rodata.mbedtls_sha1_info)
 <LI><a href="#[e5]">sha1_finish_wrap</a> from md_wrap.o(.text.sha1_finish_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha1_info)
 <LI><a href="#[ea]">sha1_process_wrap</a> from md_wrap.o(.text.sha1_process_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha1_info)
 <LI><a href="#[e3]">sha1_starts_wrap</a> from md_wrap.o(.text.sha1_starts_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha1_info)
 <LI><a href="#[e4]">sha1_update_wrap</a> from md_wrap.o(.text.sha1_update_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha1_info)
 <LI><a href="#[f1]">sha224_clone_wrap</a> from md_wrap.o(.text.sha224_clone_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[f1]">sha224_clone_wrap</a> from md_wrap.o(.text.sha224_clone_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[ef]">sha224_ctx_alloc</a> from md_wrap.o(.text.sha224_ctx_alloc) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[ef]">sha224_ctx_alloc</a> from md_wrap.o(.text.sha224_ctx_alloc) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[f0]">sha224_ctx_free</a> from md_wrap.o(.text.sha224_ctx_free) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[f0]">sha224_ctx_free</a> from md_wrap.o(.text.sha224_ctx_free) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[ed]">sha224_finish_wrap</a> from md_wrap.o(.text.sha224_finish_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[ed]">sha224_finish_wrap</a> from md_wrap.o(.text.sha224_finish_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[f2]">sha224_process_wrap</a> from md_wrap.o(.text.sha224_process_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[f2]">sha224_process_wrap</a> from md_wrap.o(.text.sha224_process_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[eb]">sha224_starts_wrap</a> from md_wrap.o(.text.sha224_starts_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[ec]">sha224_update_wrap</a> from md_wrap.o(.text.sha224_update_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[ec]">sha224_update_wrap</a> from md_wrap.o(.text.sha224_update_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[ee]">sha224_wrap</a> from md_wrap.o(.text.sha224_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[f3]">sha256_starts_wrap</a> from md_wrap.o(.text.sha256_starts_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[f4]">sha256_wrap</a> from md_wrap.o(.text.sha256_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[fb]">sha384_clone_wrap</a> from md_wrap.o(.text.sha384_clone_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha384_info)
 <LI><a href="#[fb]">sha384_clone_wrap</a> from md_wrap.o(.text.sha384_clone_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha512_info)
 <LI><a href="#[f9]">sha384_ctx_alloc</a> from md_wrap.o(.text.sha384_ctx_alloc) referenced from md_wrap.o(.rodata.mbedtls_sha384_info)
 <LI><a href="#[f9]">sha384_ctx_alloc</a> from md_wrap.o(.text.sha384_ctx_alloc) referenced from md_wrap.o(.rodata.mbedtls_sha512_info)
 <LI><a href="#[fa]">sha384_ctx_free</a> from md_wrap.o(.text.sha384_ctx_free) referenced from md_wrap.o(.rodata.mbedtls_sha384_info)
 <LI><a href="#[fa]">sha384_ctx_free</a> from md_wrap.o(.text.sha384_ctx_free) referenced from md_wrap.o(.rodata.mbedtls_sha512_info)
 <LI><a href="#[f7]">sha384_finish_wrap</a> from md_wrap.o(.text.sha384_finish_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha384_info)
 <LI><a href="#[f7]">sha384_finish_wrap</a> from md_wrap.o(.text.sha384_finish_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha512_info)
 <LI><a href="#[fc]">sha384_process_wrap</a> from md_wrap.o(.text.sha384_process_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha384_info)
 <LI><a href="#[fc]">sha384_process_wrap</a> from md_wrap.o(.text.sha384_process_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha512_info)
 <LI><a href="#[f5]">sha384_starts_wrap</a> from md_wrap.o(.text.sha384_starts_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha384_info)
 <LI><a href="#[f6]">sha384_update_wrap</a> from md_wrap.o(.text.sha384_update_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha384_info)
 <LI><a href="#[f6]">sha384_update_wrap</a> from md_wrap.o(.text.sha384_update_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha512_info)
 <LI><a href="#[f8]">sha384_wrap</a> from md_wrap.o(.text.sha384_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha384_info)
 <LI><a href="#[fd]">sha512_starts_wrap</a> from md_wrap.o(.text.sha512_starts_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha512_info)
 <LI><a href="#[fe]">sha512_wrap</a> from md_wrap.o(.text.sha512_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha512_info)
 <LI><a href="#[79]">tfm_core_log_puts</a> from tfm_core_log.o(.text.tfm_core_log_puts) referenced from tfm_svcalls.o(.text.SVC_Handler_IPC)
 <LI><a href="#[79]">tfm_core_log_puts</a> from tfm_core_log.o(.text.tfm_core_log_puts) referenced from tfm_arch_v8m_main.o(.text.SecureFault_Handler)
 <LI><a href="#[79]">tfm_core_log_puts</a> from tfm_core_log.o(.text.tfm_core_log_puts) referenced from tfm_core.o(.text.tfm_core_init)
 <LI><a href="#[79]">tfm_core_log_puts</a> from tfm_core_log.o(.text.tfm_core_log_puts) referenced from tfm_core_svcalls_ipc.o(.text.tfm_core_svc_handler)
 <LI><a href="#[79]">tfm_core_log_puts</a> from tfm_core_log.o(.text.tfm_core_log_puts) referenced from tfm_secure_api.o(.text.tfm_secure_api_error_handler)
 <LI><a href="#[79]">tfm_core_log_puts</a> from tfm_core_log.o(.text.tfm_core_log_puts) referenced from spm_hal.o(.text.tfm_spm_hal_setup_isolation_hw)
 <LI><a href="#[79]">tfm_core_log_puts</a> from tfm_core_log.o(.text.tfm_core_log_puts) referenced 54 times from tfm_veneers.o(SFN)
 <LI><a href="#[11e]">tfm_crypto_aead_decrypt</a> from crypto_aead.o(.text.tfm_crypto_aead_decrypt) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[11d]">tfm_crypto_aead_encrypt</a> from crypto_aead.o(.text.tfm_crypto_aead_encrypt) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[100]">tfm_crypto_allocate_key</a> from crypto_key.o(.text.tfm_crypto_allocate_key) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[122]">tfm_crypto_asymmetric_decrypt</a> from crypto_asymmetric.o(.text.tfm_crypto_asymmetric_decrypt) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[121]">tfm_crypto_asymmetric_encrypt</a> from crypto_asymmetric.o(.text.tfm_crypto_asymmetric_encrypt) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[11f]">tfm_crypto_asymmetric_sign</a> from crypto_asymmetric.o(.text.tfm_crypto_asymmetric_sign) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[120]">tfm_crypto_asymmetric_verify</a> from crypto_asymmetric.o(.text.tfm_crypto_asymmetric_verify) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[10f]">tfm_crypto_cipher_abort</a> from crypto_cipher.o(.text.tfm_crypto_cipher_abort) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[10d]">tfm_crypto_cipher_decrypt_setup</a> from crypto_cipher.o(.text.tfm_crypto_cipher_decrypt_setup) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[10c]">tfm_crypto_cipher_encrypt_setup</a> from crypto_cipher.o(.text.tfm_crypto_cipher_encrypt_setup) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[110]">tfm_crypto_cipher_finish</a> from crypto_cipher.o(.text.tfm_crypto_cipher_finish) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[10a]">tfm_crypto_cipher_generate_iv</a> from crypto_cipher.o(.text.tfm_crypto_cipher_generate_iv) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[10b]">tfm_crypto_cipher_set_iv</a> from crypto_cipher.o(.text.tfm_crypto_cipher_set_iv) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[10e]">tfm_crypto_cipher_update</a> from crypto_cipher.o(.text.tfm_crypto_cipher_update) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[106]">tfm_crypto_copy_key</a> from crypto_key.o(.text.tfm_crypto_copy_key) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[102]">tfm_crypto_destroy_key</a> from crypto_key.o(.text.tfm_crypto_destroy_key) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[104]">tfm_crypto_export_key</a> from crypto_key.o(.text.tfm_crypto_export_key) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[105]">tfm_crypto_export_public_key</a> from crypto_key.o(.text.tfm_crypto_export_public_key) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[12a]">tfm_crypto_generate_key</a> from crypto_generator.o(.text.tfm_crypto_generate_key) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[129]">tfm_crypto_generate_random</a> from crypto_generator.o(.text.tfm_crypto_generate_random) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[126]">tfm_crypto_generator_abort</a> from crypto_generator.o(.text.tfm_crypto_generator_abort) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[125]">tfm_crypto_generator_import_key</a> from crypto_generator.o(.text.tfm_crypto_generator_import_key) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[124]">tfm_crypto_generator_read</a> from crypto_generator.o(.text.tfm_crypto_generator_read) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[123]">tfm_crypto_get_generator_capacity</a> from crypto_generator.o(.text.tfm_crypto_get_generator_capacity) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[103]">tfm_crypto_get_key_information</a> from crypto_key.o(.text.tfm_crypto_get_key_information) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[109]">tfm_crypto_get_key_lifetime</a> from crypto_key.o(.text.tfm_crypto_get_key_lifetime) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[108]">tfm_crypto_get_key_policy</a> from crypto_key.o(.text.tfm_crypto_get_key_policy) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[115]">tfm_crypto_hash_abort</a> from crypto_hash.o(.text.tfm_crypto_hash_abort) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[116]">tfm_crypto_hash_clone</a> from crypto_hash.o(.text.tfm_crypto_hash_clone) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[113]">tfm_crypto_hash_finish</a> from crypto_hash.o(.text.tfm_crypto_hash_finish) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[111]">tfm_crypto_hash_setup</a> from crypto_hash.o(.text.tfm_crypto_hash_setup) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[112]">tfm_crypto_hash_update</a> from crypto_hash.o(.text.tfm_crypto_hash_update) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[114]">tfm_crypto_hash_verify</a> from crypto_hash.o(.text.tfm_crypto_hash_verify) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[101]">tfm_crypto_import_key</a> from crypto_key.o(.text.tfm_crypto_import_key) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[12d]">tfm_crypto_init</a> from crypto_init.o(.text.tfm_crypto_init) referenced from spm_api.o(.rodata.static_data_list)
 <LI><a href="#[128]">tfm_crypto_key_agreement</a> from crypto_generator.o(.text.tfm_crypto_key_agreement) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[127]">tfm_crypto_key_derivation</a> from crypto_generator.o(.text.tfm_crypto_key_derivation) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[11c]">tfm_crypto_mac_abort</a> from crypto_mac.o(.text.tfm_crypto_mac_abort) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[11a]">tfm_crypto_mac_sign_finish</a> from crypto_mac.o(.text.tfm_crypto_mac_sign_finish) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[117]">tfm_crypto_mac_sign_setup</a> from crypto_mac.o(.text.tfm_crypto_mac_sign_setup) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[119]">tfm_crypto_mac_update</a> from crypto_mac.o(.text.tfm_crypto_mac_update) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[11b]">tfm_crypto_mac_verify_finish</a> from crypto_mac.o(.text.tfm_crypto_mac_verify_finish) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[118]">tfm_crypto_mac_verify_setup</a> from crypto_mac.o(.text.tfm_crypto_mac_verify_setup) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[107]">tfm_crypto_set_key_policy</a> from crypto_key.o(.text.tfm_crypto_set_key_policy) referenced from crypto_init.o(.rodata.sfid_func_table)
 <LI><a href="#[9a]">tfm_its_get_info_ipc</a> from tfm_its_req_mngr.o(.text.tfm_its_get_info_ipc) referenced from tfm_its_req_mngr.o(.text.tfm_its_req_mngr_init)
 <LI><a href="#[99]">tfm_its_get_ipc</a> from tfm_its_req_mngr.o(.text.tfm_its_get_ipc) referenced from tfm_its_req_mngr.o(.text.tfm_its_req_mngr_init)
 <LI><a href="#[9b]">tfm_its_remove_ipc</a> from tfm_its_req_mngr.o(.text.tfm_its_remove_ipc) referenced from tfm_its_req_mngr.o(.text.tfm_its_req_mngr_init)
 <LI><a href="#[12c]">tfm_its_req_mngr_init</a> from tfm_its_req_mngr.o(.text.tfm_its_req_mngr_init) referenced from spm_api.o(.rodata.static_data_list)
 <LI><a href="#[98]">tfm_its_set_ipc</a> from tfm_its_req_mngr.o(.text.tfm_its_set_ipc) referenced from tfm_its_req_mngr.o(.text.tfm_its_req_mngr_init)
 <LI><a href="#[9c]">tfm_nspm_thread_entry</a> from tfm_nspm_ipc.o(SFN) referenced from spm_api.o(.rodata.static_data_list)
 <LI><a href="#[9c]">tfm_nspm_thread_entry</a> from tfm_nspm_ipc.o(SFN) referenced from spm_api_ipc.o(.text.tfm_pendsv_do_schedule)
 <LI><a href="#[9c]">tfm_nspm_thread_entry</a> from tfm_nspm_ipc.o(SFN) referenced from spm_api_ipc.o(.text.tfm_spm_init)
 <LI><a href="#[9f]">tfm_sst_get_info_ipc</a> from tfm_sst_req_mngr.o(.text.tfm_sst_get_info_ipc) referenced from tfm_sst_req_mngr.o(.text.tfm_sst_req_mngr_init)
 <LI><a href="#[9e]">tfm_sst_get_ipc</a> from tfm_sst_req_mngr.o(.text.tfm_sst_get_ipc) referenced from tfm_sst_req_mngr.o(.text.tfm_sst_req_mngr_init)
 <LI><a href="#[a1]">tfm_sst_get_support_ipc</a> from tfm_sst_req_mngr.o(.text.tfm_sst_get_support_ipc) referenced from tfm_sst_req_mngr.o(.text.tfm_sst_req_mngr_init)
 <LI><a href="#[a0]">tfm_sst_remove_ipc</a> from tfm_sst_req_mngr.o(.text.tfm_sst_remove_ipc) referenced from tfm_sst_req_mngr.o(.text.tfm_sst_req_mngr_init)
 <LI><a href="#[12b]">tfm_sst_req_mngr_init</a> from tfm_sst_req_mngr.o(.text.tfm_sst_req_mngr_init) referenced from spm_api.o(.rodata.static_data_list)
 <LI><a href="#[9d]">tfm_sst_set_ipc</a> from tfm_sst_req_mngr.o(.text.tfm_sst_set_ipc) referenced from tfm_sst_req_mngr.o(.text.tfm_sst_req_mngr_init)
 <LI><a href="#[134]">tfm_svcall_psa_call</a> from tfm_svcalls.o(.text.tfm_svcall_psa_call) referenced from tfm_psa_api_veneers.o(SFN)
 <LI><a href="#[135]">tfm_svcall_psa_close</a> from tfm_svcalls.o(.text.tfm_svcall_psa_close) referenced from tfm_psa_api_veneers.o(SFN)
 <LI><a href="#[133]">tfm_svcall_psa_connect</a> from tfm_svcalls.o(.text.tfm_svcall_psa_connect) referenced from tfm_psa_api_veneers.o(SFN)
 <LI><a href="#[131]">tfm_svcall_psa_framework_version</a> from tfm_svcalls.o(.text.tfm_svcall_psa_framework_version) referenced from tfm_psa_api_veneers.o(SFN)
 <LI><a href="#[132]">tfm_svcall_psa_version</a> from tfm_svcalls.o(.text.tfm_svcall_psa_version) referenced from tfm_psa_api_veneers.o(SFN)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMAMUX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMAMUX1_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GTZC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>HASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>OTFDEC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USB_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tfm_arch_v8m_main.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1d0]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tfm_platform_system.o(.text.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>

<P><STRONG><a name="[1db]"></a>FLASH_PageErase</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l5xx_hal_flash_ex.o(.text.FLASH_PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[1be]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32l5xx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_Flash_Initialize
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_CRYPEx_AESCCM_GenerateAuthTAG</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, stm32l5xx_hal_cryp_ex.o(.text.HAL_CRYPEx_AESCCM_GenerateAuthTAG))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CRYPEx_AESCCM_GenerateAuthTAG
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_CRYPEx_AESGCM_GenerateAuthTAG</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, stm32l5xx_hal_cryp_ex.o(.text.HAL_CRYPEx_AESGCM_GenerateAuthTAG), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_CRYP_DeInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32l5xx_hal_cryp.o(.text.HAL_CRYP_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRYP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_CRYP_Decrypt</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, stm32l5xx_hal_cryp.o(.text.HAL_CRYP_Decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_WaitOnCCFlag
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_SetKey
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ProcessData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESGCM_Process
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESCCM_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_CRYP_Encrypt</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, stm32l5xx_hal_cryp.o(.text.HAL_CRYP_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_CRYP_Encrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_SetKey
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ProcessData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESGCM_Process
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESCCM_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_CRYP_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_cryp.o(.text.HAL_CRYP_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ProcessData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESGCM_Process
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_CRYP_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32l5xx_hal_cryp.o(.text.HAL_CRYP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRYP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_CRYP_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_cryp.o(.text.HAL_CRYP_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_DeInit
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_CRYP_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_cryp.o(.text.HAL_CRYP_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Init
</UL>

<P><STRONG><a name="[353]"></a>HAL_CRYP_SetConfig</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32l5xx_hal_cryp.o(.text.HAL_CRYP_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRYP_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, stm32l5xx_hal_flash_ex.o(.text.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_Flash_EraseSector
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_Flash_ProgramData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_Flash_EraseSector
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_FLASH_Program</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_Flash_ProgramData
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_Flash_ProgramData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_Flash_EraseSector
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_GPIO_Init</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, stm32l5xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USART0_Initialize
</UL>

<P><STRONG><a name="[2d2]"></a>HAL_GTZC_MPCBB_ConfigMem</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32l5xx_hal_gtzc.o(.text.HAL_GTZC_MPCBB_ConfigMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GTZC_MPCBB_ConfigMem
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsecure_sram1
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_sram_config
</UL>

<P><STRONG><a name="[2d1]"></a>HAL_GTZC_MPCBB_GetConfigMem</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32l5xx_hal_gtzc.o(.text.HAL_GTZC_MPCBB_GetConfigMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GTZC_MPCBB_GetConfigMem
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsecure_sram1
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_sram_config
</UL>

<P><STRONG><a name="[407]"></a>HAL_GTZC_TZIC_EnableIT</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32l5xx_hal_gtzc.o(.text.HAL_GTZC_TZIC_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GTZC_TZIC_EnableIT
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpc_init_cfg
</UL>

<P><STRONG><a name="[408]"></a>HAL_GTZC_TZSC_ConfigPeriphAttributes</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, stm32l5xx_hal_gtzc.o(.text.HAL_GTZC_TZSC_ConfigPeriphAttributes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GTZC_TZSC_ConfigPeriphAttributes
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpc_init_cfg
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l5xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYPEx_AESCCM_GenerateAuthTAG
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYPEx_AESGCM_GenerateAuthTAG
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_DeInit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_WaitOnCCFlag
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESGCM_Process
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESCCM_Process
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_WaitOnFlagUntilTimeout
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Process
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_PollEndOfOperation
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_HASHEx_SHA224_Accmlt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l5xx_hal_hash_ex.o(.text.HAL_HASHEx_SHA224_Accmlt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_HASHEx_SHA224_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
</UL>

<P><STRONG><a name="[1df]"></a>HAL_HASHEx_SHA224_Accmlt_End</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32l5xx_hal_hash_ex.o(.text.HAL_HASHEx_SHA224_Accmlt_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_HASHEx_SHA224_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_HASHEx_SHA256_Accmlt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l5xx_hal_hash_ex.o(.text.HAL_HASHEx_SHA256_Accmlt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_HASHEx_SHA256_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_HASHEx_SHA256_Accmlt_End</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32l5xx_hal_hash_ex.o(.text.HAL_HASHEx_SHA256_Accmlt_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_HASHEx_SHA256_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>

<P><STRONG><a name="[3a4]"></a>HAL_HASH_ContextRestoring</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l5xx_hal_hash.o(.text.HAL_HASH_ContextRestoring))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
</UL>

<P><STRONG><a name="[3a5]"></a>HAL_HASH_ContextSaving</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32l5xx_hal_hash.o(.text.HAL_HASH_ContextSaving))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_HASH_DeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l5xx_hal_hash.o(.text.HAL_HASH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_HASH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_HASH_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32l5xx_hal_hash.o(.text.HAL_HASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HASH_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
</UL>

<P><STRONG><a name="[1e4]"></a>HAL_HASH_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_hash.o(.text.HAL_HASH_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_DeInit
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_HASH_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_hash.o(.text.HAL_HASH_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_Init
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_HASH_SHA1_Accmlt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l5xx_hal_hash.o(.text.HAL_HASH_SHA1_Accmlt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_HASH_SHA1_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_HASH_SHA1_Accmlt_End</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32l5xx_hal_hash.o(.text.HAL_HASH_SHA1_Accmlt_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_HASH_SHA1_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_PKA_DeInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PKA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_PKA_ECCMul</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_ECCMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_PKA_ECCMul &rArr; PKA_Process &rArr; PKA_PollEndOfOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Process
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_ECCMul_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_PKA_ECCMul_GetResult</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_ECCMul_GetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_PKA_ECCMul_GetResult &rArr; PKA_Memcpy_u32_to_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Memcpy_u32_to_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_PKA_ECDSASign</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_ECDSASign))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_PKA_ECDSASign &rArr; PKA_Process &rArr; PKA_PollEndOfOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Process
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_ECDSASign_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_PKA_ECDSASign_GetResult</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_ECDSASign_GetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PKA_ECDSASign_GetResult &rArr; PKA_Memcpy_u32_to_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Memcpy_u32_to_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_PKA_ECDSAVerif</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_ECDSAVerif))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_PKA_ECDSAVerif &rArr; PKA_Process &rArr; PKA_PollEndOfOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Process
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_ECDSAVerif_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>

<P><STRONG><a name="[382]"></a>HAL_PKA_ECDSAVerif_IsValidSignature</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_ECDSAVerif_IsValidSignature))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_PKA_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PKA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_PKA_ModExp</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_ModExp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_PKA_ModExp &rArr; PKA_Process &rArr; PKA_PollEndOfOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Process
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_ModExp_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_PKA_ModExp_GetResult</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_ModExp_GetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PKA_ModExp_GetResult &rArr; PKA_Memcpy_u32_to_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Memcpy_u32_to_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_PKA_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_DeInit
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_PKA_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_Init
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_PKA_PointCheck</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_PointCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_PKA_PointCheck &rArr; PKA_Process &rArr; PKA_PollEndOfOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Process
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_PointCheck_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[389]"></a>HAL_PKA_PointCheck_IsOnCurve</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_PointCheck_IsOnCurve))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_PKA_RSACRTExp</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l5xx_hal_pka.o(.text.HAL_PKA_RSACRTExp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_PKA_RSACRTExp &rArr; PKA_Process &rArr; PKA_PollEndOfOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_RSACRTExp_Set
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[200]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[201]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[202]"></a>HAL_RNG_DeInit</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32l5xx_hal_rng.o(.text.HAL_RNG_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RNG_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
</UL>

<P><STRONG><a name="[220]"></a>HAL_RNG_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_rng.o(.text.HAL_RNG_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_RecoverSeedError
</UL>

<P><STRONG><a name="[204]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32l5xx_hal_rng.o(.text.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RNG_GenerateRandomNumber &rArr; RNG_RecoverSeedError
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_RecoverSeedError
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
</UL>

<P><STRONG><a name="[206]"></a>HAL_RNG_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32l5xx_hal_rng.o(.text.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RNG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
</UL>

<P><STRONG><a name="[203]"></a>HAL_RNG_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_rng.o(.text.HAL_RNG_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_DeInit
</UL>

<P><STRONG><a name="[207]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_rng.o(.text.HAL_RNG_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[238]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[23a]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USART0_Initialize
</UL>

<P><STRONG><a name="[208]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USART0_Receive
</UL>

<P><STRONG><a name="[239]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_UART_Transmit</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USART0_Send
</UL>

<P><STRONG><a name="[1de]"></a>HASH_Accumulate</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32l5xx_hal_hash.o(.text.HASH_Accumulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA256_Accmlt
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA224_Accmlt
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_SHA1_Accmlt
</UL>

<P><STRONG><a name="[1e0]"></a>HASH_Start</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, stm32l5xx_hal_hash.o(.text.HASH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_WriteData
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_WaitOnFlagUntilTimeout
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_GetDigest
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA256_Accmlt_End
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA224_Accmlt_End
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_SHA1_Accmlt_End
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tfm_arch_v8m_main.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[213]"></a>PKA_CheckError</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l5xx_hal_pka.o(.text.PKA_CheckError))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Process
</UL>

<P><STRONG><a name="[1ec]"></a>PKA_ECCMul_Set</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32l5xx_hal_pka.o(.text.PKA_ECCMul_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PKA_ECCMul_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ECCMul
</UL>

<P><STRONG><a name="[1f1]"></a>PKA_ECDSASign_Set</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, stm32l5xx_hal_pka.o(.text.PKA_ECDSASign_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PKA_ECDSASign_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ECDSASign
</UL>

<P><STRONG><a name="[1f4]"></a>PKA_ECDSAVerif_Set</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, stm32l5xx_hal_pka.o(.text.PKA_ECDSAVerif_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PKA_ECDSAVerif_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ECDSAVerif
</UL>

<P><STRONG><a name="[1ef]"></a>PKA_Memcpy_u32_to_u8</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, stm32l5xx_hal_pka.o(.text.PKA_Memcpy_u32_to_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PKA_Memcpy_u32_to_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ECDSASign_GetResult
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ECCMul_GetResult
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ModExp_GetResult
</UL>

<P><STRONG><a name="[78]"></a>PKA_Memcpy_u8_to_u32</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32l5xx_hal_pka.o(.text.PKA_Memcpy_u8_to_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PKA_Memcpy_u8_to_u32
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stm32l5xx_hal_pka.o(.text.PKA_ModExp_Set)
<LI> stm32l5xx_hal_pka.o(.text.PKA_ECDSAVerif_Set)
<LI> stm32l5xx_hal_pka.o(.text.PKA_RSACRTExp_Set)
</UL>
<P><STRONG><a name="[1f8]"></a>PKA_ModExp_Set</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32l5xx_hal_pka.o(.text.PKA_ModExp_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PKA_ModExp_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ModExp
</UL>

<P><STRONG><a name="[1fb]"></a>PKA_PointCheck_Set</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32l5xx_hal_pka.o(.text.PKA_PointCheck_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PKA_PointCheck_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_PointCheck
</UL>

<P><STRONG><a name="[212]"></a>PKA_PollEndOfOperation</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, stm32l5xx_hal_pka.o(.text.PKA_PollEndOfOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PKA_PollEndOfOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Process
</UL>

<P><STRONG><a name="[1ed]"></a>PKA_Process</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32l5xx_hal_pka.o(.text.PKA_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PKA_Process &rArr; PKA_PollEndOfOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_PollEndOfOperation
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_CheckError
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ECDSAVerif
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ECDSASign
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_PointCheck
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ECCMul
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_RSACRTExp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ModExp
</UL>

<P><STRONG><a name="[1fd]"></a>PKA_RSACRTExp_Set</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32l5xx_hal_pka.o(.text.PKA_RSACRTExp_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PKA_RSACRTExp_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_RSACRTExp
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tfm_arch_v8m_main.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; tfm_pendsv_do_schedule &rArr; tfm_thrd_context_switch &rArr; tfm_core_util_memcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_pendsv_do_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[215]"></a>QCBOREncode_AddBuffer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, qcbor_encode.o(.text.QCBOREncode_AddBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = QCBOREncode_AddBuffer &rArr; AppendEncodedTypeAndNumber &rArr; InsertEncodedTypeAndNumber &rArr; UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsefulOutBuf_InsertUsefulBuf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEncodedTypeAndNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_add_tstr
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_add_bstr
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tbs_hash
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddBytes
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddBytes
</UL>

<P><STRONG><a name="[218]"></a>QCBOREncode_AddInt64</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, qcbor_encode.o(.text.QCBOREncode_AddInt64))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = QCBOREncode_AddInt64 &rArr; AppendEncodedTypeAndNumber &rArr; InsertEncodedTypeAndNumber &rArr; UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEncodedTypeAndNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_add_tstr
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_add_integer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_add_bstr
</UL>

<P><STRONG><a name="[219]"></a>QCBOREncode_AddTag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qcbor_encode.o(.text.QCBOREncode_AddTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QCBOREncode_AddTag &rArr; AppendEncodedTypeAndNumber &rArr; InsertEncodedTypeAndNumber &rArr; UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEncodedTypeAndNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_init
</UL>

<P><STRONG><a name="[21a]"></a>QCBOREncode_CloseMapOrArray</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, qcbor_encode.o(.text.QCBOREncode_CloseMapOrArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = QCBOREncode_CloseMapOrArray &rArr; InsertEncodedTypeAndNumber &rArr; UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsefulOutBuf_OutUBuf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertEncodedTypeAndNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_finish
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_finish
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tbs_hash
</UL>

<P><STRONG><a name="[21c]"></a>QCBOREncode_Finish</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, qcbor_encode.o(.text.QCBOREncode_Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QCBOREncode_Finish
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsefulOutBuf_OutUBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_finish
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tbs_hash
</UL>

<P><STRONG><a name="[21d]"></a>QCBOREncode_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, qcbor_encode.o(.text.QCBOREncode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QCBOREncode_Init &rArr; UsefulOutBuf_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsefulOutBuf_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_start
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tbs_hash
</UL>

<P><STRONG><a name="[257]"></a>QCBOREncode_OpenMapOrArray</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, qcbor_encode.o(.text.QCBOREncode_OpenMapOrArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QCBOREncode_OpenMapOrArray
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_start
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tbs_hash
</UL>

<P><STRONG><a name="[205]"></a>RNG_RecoverSeedError</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32l5xx_hal_rng.o(.text.RNG_RecoverSeedError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RNG_RecoverSeedError
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tfm_arch_v8m_main.o(.text.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; tfm_core_svc_handler &rArr; SVC_Handler_IPC &rArr; tfm_svcall_psa_call &rArr; tfm_spm_fill_msg &rArr; tfm_spm_get_rhandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_svc_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[222]"></a>SVC_Handler_IPC</STRONG> (Thumb, 1352 bytes, Stack size 40 bytes, tfm_svcalls.o(.text.SVC_Handler_IPC))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = SVC_Handler_IPC &rArr; tfm_svcall_psa_call &rArr; tfm_spm_fill_msg &rArr; tfm_spm_get_rhandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_enable_irq
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_clear_pending_irq
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_set_rhandle
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_partition_get_privileged_mode
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_service_by_signal
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_running_partition
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_msg_from_handle
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_free_conn_handle
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_memory_check
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_event_wake
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_event_wait
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_util_memcpy
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_is_one_bit_set
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_bitcount
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_version
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_connect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_close
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_call
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_msg_queue_is_empty
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_msg_dequeue
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_thrd_exit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_enable_irq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_disable_irq
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_svc_handler
</UL>

<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, tfm_arch_v8m_main.o(.text.SecureFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, system_stm32l5xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>__acle_se_TZ_AllocModuleContext_S</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tfm_nspm_ipc.o(.text.TZ_AllocModuleContext_S), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TZ_AllocModuleContext_S
</UL>

<P><STRONG><a name="[13b]"></a>__acle_se_TZ_FreeModuleContext_S</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tfm_nspm_ipc.o(.text.TZ_FreeModuleContext_S), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TZ_FreeModuleContext_S
</UL>

<P><STRONG><a name="[13c]"></a>__acle_se_TZ_InitContextSystem_S</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tfm_nspm_ipc.o(.text.TZ_InitContextSystem_S), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TZ_InitContextSystem_S
</UL>

<P><STRONG><a name="[13d]"></a>__acle_se_TZ_LoadContext_S</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tfm_nspm_ipc.o(.text.TZ_LoadContext_S), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TZ_LoadContext_S
</UL>

<P><STRONG><a name="[13e]"></a>__acle_se_TZ_StoreContext_S</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tfm_nspm_ipc.o(.text.TZ_StoreContext_S), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TZ_StoreContext_S
</UL>

<P><STRONG><a name="[20a]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[20b]"></a>UART_CheckIdleState</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l5xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[209]"></a>UART_SetConfig</STRONG> (Thumb, 544 bytes, Stack size 16 bytes, stm32l5xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[20c]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[20d]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32l5xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tfm_arch_v8m_main.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(RESET)
</UL>
<P><STRONG><a name="[21f]"></a>UsefulOutBuf_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usefulbuf.o(.text.UsefulOutBuf_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsefulOutBuf_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_Init
</UL>

<P><STRONG><a name="[211]"></a>UsefulOutBuf_InsertUsefulBuf</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, usefulbuf.o(.text.UsefulOutBuf_InsertUsefulBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddBuffer
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertEncodedTypeAndNumber
</UL>

<P><STRONG><a name="[21b]"></a>UsefulOutBuf_OutUBuf</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usefulbuf.o(.text.UsefulOutBuf_OutUBuf))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_Finish
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_CloseMapOrArray
</UL>

<P><STRONG><a name="[25a]"></a>attest_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, attestation_core.o(.text.attest_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attest_init &rArr; attest_get_boot_data
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_get_boot_data
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_partition_init
</UL>

<P><STRONG><a name="[25c]"></a>attest_register_initial_attestation_private_key</STRONG> (Thumb, 160 bytes, Stack size 160 bytes, attestation_key.o(.text.attest_register_initial_attestation_private_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = attest_register_initial_attestation_private_key &rArr; psa_import_key &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_get_initial_attest_key
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_set_key_policy
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_policy_set_usage
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_allocate_key
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_crypto_pub_key_sign
</UL>

<P><STRONG><a name="[24a]"></a>attest_token_add_bstr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, attest_token.o(.text.attest_token_add_bstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = attest_token_add_bstr &rArr; QCBOREncode_AddBuffer &rArr; AppendEncodedTypeAndNumber &rArr; InsertEncodedTypeAndNumber &rArr; UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddInt64
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_add_sw_component_claim
</UL>

<P><STRONG><a name="[253]"></a>attest_token_add_integer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, attest_token.o(.text.attest_token_add_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = attest_token_add_integer &rArr; QCBOREncode_AddInt64 &rArr; AppendEncodedTypeAndNumber &rArr; InsertEncodedTypeAndNumber &rArr; UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>

<P><STRONG><a name="[24b]"></a>attest_token_add_tstr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, attest_token.o(.text.attest_token_add_tstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = attest_token_add_tstr &rArr; QCBOREncode_AddBuffer &rArr; AppendEncodedTypeAndNumber &rArr; InsertEncodedTypeAndNumber &rArr; UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddInt64
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_add_sw_component_claim
</UL>

<P><STRONG><a name="[256]"></a>attest_token_borrow_cbor_cntxt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, attest_token.o(.text.attest_token_borrow_cbor_cntxt))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>

<P><STRONG><a name="[259]"></a>attest_token_finish</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, attest_token.o(.text.attest_token_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = attest_token_finish &rArr; t_cose_sign1_finish &rArr; create_tbs_hash &rArr; t_cose_crypto_hash_finish &rArr; psa_hash_finish &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_finish
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_Finish
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_CloseMapOrArray
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>

<P><STRONG><a name="[24d]"></a>attest_token_start</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, attest_token.o(.text.attest_token_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = attest_token_start &rArr; t_cose_sign1_init &rArr; QCBOREncode_AddBytes &rArr; QCBOREncode_AddBuffer &rArr; AppendEncodedTypeAndNumber &rArr; InsertEncodedTypeAndNumber &rArr; UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_OpenMapOrArray
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>

<P><STRONG><a name="[264]"></a>attest_unregister_initial_attestation_private_key</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, attestation_key.o(.text.attest_unregister_initial_attestation_private_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = attest_unregister_initial_attestation_private_key &rArr; psa_destroy_key &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_destroy_key
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_crypto_pub_key_sign
</UL>

<P><STRONG><a name="[2a4]"></a>check_address_range</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tfm_secure_api.o(.text.check_address_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_address_range
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_access_to_region
</UL>

<P><STRONG><a name="[26f]"></a>configure_ns_code</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tfm_nspm_ipc.o(.text.configure_ns_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = configure_ns_code
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_set_ns_mpu
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_get_ns_entry_point
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_get_ns_VTOR
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_get_ns_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_init
</UL>

<P><STRONG><a name="[274]"></a>create_tbs_hash</STRONG> (Thumb, 208 bytes, Stack size 256 bytes, t_cose_util.o(.text.create_tbs_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = create_tbs_hash &rArr; t_cose_crypto_hash_finish &rArr; psa_hash_finish &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_OpenMapOrArray
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_Finish
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_CloseMapOrArray
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddBuffer
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_crypto_hash_update
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_crypto_hash_start
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_crypto_hash_finish
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_finish
</UL>

<P><STRONG><a name="[49d]"></a>enable_fault_handlers</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, target_cfg.o(.text.enable_fault_handlers))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_enable_fault_handlers
</UL>

<P><STRONG><a name="[130]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart_stdout.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[49a]"></a>get_partition_idx</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, spm_api.o(.text.get_partition_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_partition_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_partition_by_id
</UL>

<P><STRONG><a name="[465]"></a>hash_alg_id_from_sig_alg_id</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, t_cose_util.o(.text.hash_alg_id_from_sig_alg_id))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_init
</UL>

<P><STRONG><a name="[2a5]"></a>initial_attest_get_token</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, attestation_core.o(.text.initial_attest_get_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = initial_attest_get_token &rArr; attest_create_token &rArr; attest_token_finish &rArr; t_cose_sign1_finish &rArr; create_tbs_hash &rArr; t_cose_crypto_hash_finish &rArr; psa_hash_finish &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_check_memory_access
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_attest_get_token
</UL>

<P><STRONG><a name="[2a7]"></a>initial_attest_get_token_size</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, attestation_core.o(.text.initial_attest_get_token_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = initial_attest_get_token_size &rArr; attest_create_token &rArr; attest_token_finish &rArr; t_cose_sign1_finish &rArr; create_tbs_hash &rArr; t_cose_crypto_hash_finish &rArr; psa_hash_finish &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_attest_get_token_size
</UL>

<P><STRONG><a name="[498]"></a>is_valid_chunk_data_in_pool</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tfm_pools.o(.text.is_valid_chunk_data_in_pool))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_msg_from_handle
</UL>

<P><STRONG><a name="[2ac]"></a>its_flash_block_to_block_move</STRONG> (Thumb, 88 bytes, Stack size 288 bytes, its_flash.o(.text.its_flash_block_to_block_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = its_flash_block_to_block_move
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_update_scratch_block_meta
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_migrate_lb0_data_to_scratch
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_cp_remaining_file_meta
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_cp_remaining_data
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_compact_block
</UL>

<P><STRONG><a name="[2c9]"></a>its_flash_erase_block</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, its_flash.o(.text.its_flash_erase_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = its_flash_erase_block
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_mblock_erase_scratch_blocks
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_reset_metablock
</UL>

<P><STRONG><a name="[2aa]"></a>its_flash_fs_dblock_compact_block</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, its_flash_fs_dblock.o(.text.its_flash_fs_dblock_compact_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = its_flash_fs_dblock_compact_block &rArr; its_flash_fs_mblock_update_scratch_block_meta &rArr; its_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_update_scratch_block_meta
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_set_data_scratch
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_read_block_metadata
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_cur_data_scratch_id
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_block_to_block_move
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_delete
</UL>

<P><STRONG><a name="[2af]"></a>its_flash_fs_dblock_cp_remaining_data</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, its_flash_fs_dblock.o(.text.its_flash_fs_dblock_cp_remaining_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = its_flash_fs_dblock_cp_remaining_data &rArr; its_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_cur_data_scratch_id
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_block_to_block_move
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_create
</UL>

<P><STRONG><a name="[2b0]"></a>its_flash_fs_dblock_read_file</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, its_flash_fs_dblock.o(.text.its_flash_fs_dblock_read_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = its_flash_fs_dblock_read_file &rArr; its_dblock_lo_to_phy &rArr; its_flash_fs_mblock_read_block_metadata &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_dblock_lo_to_phy
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_read
</UL>

<P><STRONG><a name="[2b2]"></a>its_flash_fs_dblock_write_file</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, its_flash_fs_dblock.o(.text.its_flash_fs_dblock_write_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = its_flash_fs_dblock_write_file &rArr; its_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_cur_data_scratch_id
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_write_aligned_data
</UL>

<P><STRONG><a name="[2b4]"></a>its_flash_fs_file_create</STRONG> (Thumb, 166 bytes, Stack size 88 bytes, its_flash_fs.o(.text.its_flash_fs_file_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = its_flash_fs_file_create &rArr; its_flash_fs_mblock_update_scratch_block_meta &rArr; its_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_update_scratch_file_meta
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_update_scratch_block_meta
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_set_data_scratch
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_reserve_file
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_migrate_lb0_data_to_scratch
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_meta_update_finalize
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_get_file_idx
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_cur_data_scratch_id
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_cp_remaining_file_meta
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_cp_remaining_data
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_write_aligned_data
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_set
</UL>

<P><STRONG><a name="[2bc]"></a>its_flash_fs_file_delete</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, its_flash_fs.o(.text.its_flash_fs_file_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = its_flash_fs_file_delete &rArr; its_flash_fs_dblock_compact_block &rArr; its_flash_fs_mblock_update_scratch_block_meta &rArr; its_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_utils_validate_fid
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_update_scratch_file_meta
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_read_file_meta
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_migrate_lb0_data_to_scratch
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_meta_update_finalize
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_get_file_idx
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_compact_block
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_set
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_remove
</UL>

<P><STRONG><a name="[2c0]"></a>its_flash_fs_file_get_info</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, its_flash_fs.o(.text.its_flash_fs_file_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = its_flash_fs_file_get_info &rArr; its_flash_fs_mblock_get_file_idx &rArr; its_flash_fs_mblock_read_file_meta &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_read_file_meta
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_get_file_idx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_set
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_remove
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_get_info
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_get
</UL>

<P><STRONG><a name="[2c1]"></a>its_flash_fs_file_read</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, its_flash_fs.o(.text.its_flash_fs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = its_flash_fs_file_read &rArr; its_flash_fs_mblock_get_file_idx &rArr; its_flash_fs_mblock_read_file_meta &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_utils_check_contained_in
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_read_file_meta
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_get_file_idx
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_read_file
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_get
</UL>

<P><STRONG><a name="[2b9]"></a>its_flash_fs_mblock_cp_remaining_file_meta</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, its_flash_fs_mblock.o(.text.its_flash_fs_mblock_cp_remaining_file_meta))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = its_flash_fs_mblock_cp_remaining_file_meta &rArr; its_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_block_to_block_move
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_create
</UL>

<P><STRONG><a name="[2ab]"></a>its_flash_fs_mblock_cur_data_scratch_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, its_flash_fs_mblock.o(.text.its_flash_fs_mblock_cur_data_scratch_id))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_create
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_write_file
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_cp_remaining_data
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_compact_block
</UL>

<P><STRONG><a name="[2b5]"></a>its_flash_fs_mblock_get_file_idx</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, its_flash_fs_mblock.o(.text.its_flash_fs_mblock_get_file_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = its_flash_fs_mblock_get_file_idx &rArr; its_flash_fs_mblock_read_file_meta &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_read_file_meta
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_read
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_get_info
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_delete
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_create
</UL>

<P><STRONG><a name="[2c3]"></a>its_flash_fs_mblock_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, its_flash_fs_mblock.o(.text.its_flash_fs_mblock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = its_flash_fs_mblock_init &rArr; its_init_get_active_metablock &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_mblock_erase_scratch_blocks
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_init_get_active_metablock
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_read
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_prepare
</UL>

<P><STRONG><a name="[2bb]"></a>its_flash_fs_mblock_meta_update_finalize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, its_flash_fs_mblock.o(.text.its_flash_fs_mblock_meta_update_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = its_flash_fs_mblock_meta_update_finalize &rArr; its_mblock_write_scratch_meta_header &rArr; its_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_mblock_write_scratch_meta_header
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_mblock_erase_scratch_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_delete
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_create
</UL>

<P><STRONG><a name="[2ba]"></a>its_flash_fs_mblock_migrate_lb0_data_to_scratch</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, its_flash_fs_mblock.o(.text.its_flash_fs_mblock_migrate_lb0_data_to_scratch))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = its_flash_fs_mblock_migrate_lb0_data_to_scratch &rArr; its_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_read_block_metadata
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_block_to_block_move
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_delete
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_create
</UL>

<P><STRONG><a name="[2a9]"></a>its_flash_fs_mblock_read_block_metadata</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, its_flash_fs_mblock.o(.text.its_flash_fs_mblock_read_block_metadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = its_flash_fs_mblock_read_block_metadata &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_dblock_lo_to_phy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_update_scratch_block_meta
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_reserve_file
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_migrate_lb0_data_to_scratch
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_compact_block
</UL>

<P><STRONG><a name="[2bd]"></a>its_flash_fs_mblock_read_file_meta</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, its_flash_fs_mblock.o(.text.its_flash_fs_mblock_read_file_meta))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = its_flash_fs_mblock_read_file_meta &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_reserve_file
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_get_file_idx
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_read
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_get_info
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_delete
</UL>

<P><STRONG><a name="[2b6]"></a>its_flash_fs_mblock_reserve_file</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, its_flash_fs_mblock.o(.text.its_flash_fs_mblock_reserve_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = its_flash_fs_mblock_reserve_file &rArr; its_flash_fs_mblock_read_file_meta &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_utils_validate_fid
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_read_file_meta
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_read_block_metadata
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_create
</UL>

<P><STRONG><a name="[2c8]"></a>its_flash_fs_mblock_reset_metablock</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, its_flash_fs_mblock.o(.text.its_flash_fs_mblock_reset_metablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = its_flash_fs_mblock_reset_metablock &rArr; its_init_get_active_metablock &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_mblock_write_scratch_meta_header
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_mblock_update_scratch_block_meta
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_init_get_active_metablock
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_update_scratch_file_meta
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_erase_block
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_wipe_all
</UL>

<P><STRONG><a name="[2ad]"></a>its_flash_fs_mblock_set_data_scratch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, its_flash_fs_mblock.o(.text.its_flash_fs_mblock_set_data_scratch))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_create
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_compact_block
</UL>

<P><STRONG><a name="[2ae]"></a>its_flash_fs_mblock_update_scratch_block_meta</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, its_flash_fs_mblock.o(.text.its_flash_fs_mblock_update_scratch_block_meta))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = its_flash_fs_mblock_update_scratch_block_meta &rArr; its_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_mblock_update_scratch_block_meta
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_read_block_metadata
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_block_to_block_move
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_create
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_compact_block
</UL>

<P><STRONG><a name="[2b8]"></a>its_flash_fs_mblock_update_scratch_file_meta</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, its_flash_fs_mblock.o(.text.its_flash_fs_mblock_update_scratch_file_meta))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = its_flash_fs_mblock_update_scratch_file_meta &rArr; its_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_reset_metablock
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_delete
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_create
</UL>

<P><STRONG><a name="[2cb]"></a>its_flash_fs_prepare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, its_flash_fs.o(.text.its_flash_fs_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = its_flash_fs_prepare &rArr; its_flash_fs_mblock_init &rArr; its_init_get_active_metablock &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_init
</UL>

<P><STRONG><a name="[2cc]"></a>its_flash_fs_wipe_all</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, its_flash_fs.o(.text.its_flash_fs_wipe_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = its_flash_fs_wipe_all &rArr; its_flash_fs_mblock_reset_metablock &rArr; its_init_get_active_metablock &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_reset_metablock
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_init
</UL>

<P><STRONG><a name="[2c4]"></a>its_flash_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, its_flash.o(.text.its_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = its_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_init
</UL>

<P><STRONG><a name="[2b1]"></a>its_flash_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, its_flash.o(.text.its_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = its_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_init_get_active_metablock
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_read_file_meta
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_read_block_metadata
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_read_file
</UL>

<P><STRONG><a name="[2b3]"></a>its_flash_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, its_flash.o(.text.its_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = its_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_mblock_write_scratch_meta_header
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_mblock_update_scratch_block_meta
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_update_scratch_file_meta
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_write_file
</UL>

<P><STRONG><a name="[2c2]"></a>its_utils_check_contained_in</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, its_utils.o(.text.its_utils_check_contained_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = its_utils_check_contained_in
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_read
</UL>

<P><STRONG><a name="[2be]"></a>its_utils_validate_fid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, its_utils.o(.text.its_utils_validate_fid))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_reserve_file
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_delete
</UL>

<P><STRONG><a name="[2d0]"></a>lock_sram_config</STRONG> (Thumb, 38 bytes, Stack size 120 bytes, target_cfg.o(.text.lock_sram_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lock_sram_config &rArr; HAL_GTZC_MPCBB_GetConfigMem
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GTZC_MPCBB_GetConfigMem
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GTZC_MPCBB_ConfigMem
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpc_init_cfg
</UL>

<P><STRONG><a name="[2d3]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tfm_core.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = main &rArr; tfm_spm_init &rArr; tfm_thrd_start &rArr; tfm_thrd_set_status &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_setup_isolation_hw
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_set_secure_irq_priority
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_db_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_arch_prioritize_secure_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2da]"></a>mbedcrypto__psa_aead_decrypt</STRONG> (Thumb, 240 bytes, Stack size 400 bytes, psa_crypto.o(.text.mbedcrypto__psa_aead_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = mbedcrypto__psa_aead_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_setup
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_abort
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_aead_decrypt
</UL>

<P><STRONG><a name="[2e0]"></a>mbedcrypto__psa_aead_encrypt</STRONG> (Thumb, 228 bytes, Stack size 408 bytes, psa_crypto.o(.text.mbedcrypto__psa_aead_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = mbedcrypto__psa_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; mbedtls_ccm_star_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_setup
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_abort
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_aead_encrypt
</UL>

<P><STRONG><a name="[2e3]"></a>mbedcrypto__psa_allocate_key</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, psa_crypto_slot_management.o(.text.mbedcrypto__psa_allocate_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedcrypto__psa_allocate_key &rArr; psa_internal_allocate_key_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_internal_allocate_key_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_allocate_key
</UL>

<P><STRONG><a name="[2e5]"></a>mbedcrypto__psa_asymmetric_decrypt</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, psa_crypto.o(.text.mbedcrypto__psa_asymmetric_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = mbedcrypto__psa_asymmetric_decrypt &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_rsa_oaep_set_padding_mode
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_from_slot
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_asymmetric_decrypt
</UL>

<P><STRONG><a name="[2eb]"></a>mbedcrypto__psa_asymmetric_encrypt</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, psa_crypto.o(.text.mbedcrypto__psa_asymmetric_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mbedcrypto__psa_asymmetric_encrypt &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_rsa_oaep_set_padding_mode
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_from_slot
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_asymmetric_encrypt
</UL>

<P><STRONG><a name="[2ee]"></a>mbedcrypto__psa_asymmetric_sign</STRONG> (Thumb, 488 bytes, Stack size 80 bytes, psa_crypto.o(.text.mbedcrypto__psa_asymmetric_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = mbedcrypto__psa_asymmetric_sign &rArr; mbedtls_ecdsa_sign_det &rArr; ecdsa_sign_det_restartable &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_privkey &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_set_padding
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_type
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_rsa_decode_md_type
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_from_slot
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_psa
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_asymmetric_sign
</UL>

<P><STRONG><a name="[2f7]"></a>mbedcrypto__psa_asymmetric_verify</STRONG> (Thumb, 368 bytes, Stack size 80 bytes, psa_crypto.o(.text.mbedcrypto__psa_asymmetric_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584 + Unknown Stack Size
<LI>Call Chain = mbedcrypto__psa_asymmetric_verify &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_set_padding
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_rsa_decode_md_type
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_from_slot
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_asymmetric_verify
</UL>

<P><STRONG><a name="[2fb]"></a>mbedcrypto__psa_cipher_abort</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, psa_crypto.o(.text.mbedcrypto__psa_cipher_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedcrypto__psa_cipher_abort &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_update
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_set_iv
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_generate_iv
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_finish
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_setup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_abort
</UL>

<P><STRONG><a name="[2fd]"></a>mbedcrypto__psa_cipher_decrypt_setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, psa_crypto.o(.text.mbedcrypto__psa_cipher_decrypt_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedcrypto__psa_cipher_decrypt_setup &rArr; psa_cipher_setup &rArr; psa_get_key_from_slot &rArr; psa_key_algorithm_permits
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_decrypt_setup
</UL>

<P><STRONG><a name="[2ff]"></a>mbedcrypto__psa_cipher_encrypt_setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, psa_crypto.o(.text.mbedcrypto__psa_cipher_encrypt_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedcrypto__psa_cipher_encrypt_setup &rArr; psa_cipher_setup &rArr; psa_get_key_from_slot &rArr; psa_key_algorithm_permits
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_encrypt_setup
</UL>

<P><STRONG><a name="[300]"></a>mbedcrypto__psa_cipher_finish</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, psa_crypto.o(.text.mbedcrypto__psa_cipher_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedcrypto__psa_cipher_finish &rArr; mbedtls_cipher_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_abort
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_finish
</UL>

<P><STRONG><a name="[302]"></a>mbedcrypto__psa_cipher_generate_iv</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, psa_crypto.o(.text.mbedcrypto__psa_cipher_generate_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = mbedcrypto__psa_cipher_generate_iv &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_set_iv
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_abort
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_generate_iv
</UL>

<P><STRONG><a name="[303]"></a>mbedcrypto__psa_cipher_set_iv</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, psa_crypto.o(.text.mbedcrypto__psa_cipher_set_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedcrypto__psa_cipher_set_iv &rArr; mbedtls_cipher_set_iv
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_abort
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_generate_iv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_set_iv
</UL>

<P><STRONG><a name="[305]"></a>mbedcrypto__psa_cipher_update</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, psa_crypto.o(.text.mbedcrypto__psa_cipher_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mbedcrypto__psa_cipher_update &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_abort
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_update
</UL>

<P><STRONG><a name="[307]"></a>mbedcrypto__psa_copy_key</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, psa_crypto.o(.text.mbedcrypto__psa_copy_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456 + Unknown Stack Size
<LI>Call Chain = mbedcrypto__psa_copy_key &rArr; mbedcrypto__psa_import_key &rArr; psa_import_key_into_slot &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_import_key
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_restrict_key_policy
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_internal_export_key
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_from_slot
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_bits
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_empty_key_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_copy_key
</UL>

<P><STRONG><a name="[30d]"></a>mbedcrypto__psa_crypto_init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, psa_crypto.o(.text.mbedcrypto__psa_crypto_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = mbedcrypto__psa_crypto_init &rArr; mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_initialize_key_slots
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_psa_crypto_free
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_init
</UL>

<P><STRONG><a name="[312]"></a>mbedcrypto__psa_destroy_key</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, psa_crypto.o(.text.mbedcrypto__psa_destroy_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedcrypto__psa_destroy_key &rArr; psa_wipe_key_slot &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_wipe_key_slot
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_destroy_key
</UL>

<P><STRONG><a name="[315]"></a>mbedcrypto__psa_export_key</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, psa_crypto.o(.text.mbedcrypto__psa_export_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = mbedcrypto__psa_export_key &rArr; psa_internal_export_key &rArr; mbedtls_pk_write_key_der &rArr; pk_write_ec_pubkey &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_internal_export_key
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_from_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_export_key
</UL>

<P><STRONG><a name="[316]"></a>mbedcrypto__psa_export_public_key</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, psa_crypto.o(.text.mbedcrypto__psa_export_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = mbedcrypto__psa_export_public_key &rArr; psa_internal_export_key &rArr; mbedtls_pk_write_key_der &rArr; pk_write_ec_pubkey &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_internal_export_key
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_from_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_export_public_key
</UL>

<P><STRONG><a name="[317]"></a>mbedcrypto__psa_generate_key</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, psa_crypto.o(.text.mbedcrypto__psa_generate_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320<LI>Call Chain = mbedcrypto__psa_generate_key &rArr; mbedtls_rsa_gen_key &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime_ext &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_key
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_random
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_empty_key_slot
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_raw_data_slot
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecc_group_of_psa
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_generate_key
</UL>

<P><STRONG><a name="[319]"></a>mbedcrypto__psa_generate_random</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, psa_crypto.o(.text.mbedcrypto__psa_generate_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = mbedcrypto__psa_generate_random &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_generate_random
</UL>

<P><STRONG><a name="[320]"></a>mbedcrypto__psa_generator_abort</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, psa_crypto.o(.text.mbedcrypto__psa_generator_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedcrypto__psa_generator_abort &rArr; psa_hmac_abort_internal &rArr; mbedcrypto__psa_hash_abort
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_abort_internal
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_derivation
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_agreement
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_read
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_generator_abort
</UL>

<P><STRONG><a name="[322]"></a>mbedcrypto__psa_generator_import_key</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, psa_crypto.o(.text.mbedcrypto__psa_generator_import_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2432 + Unknown Stack Size
<LI>Call Chain = mbedcrypto__psa_generator_import_key &rArr; mbedcrypto__psa_import_key &rArr; psa_import_key_into_slot &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_import_key
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_read
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_generator_import_key
</UL>

<P><STRONG><a name="[323]"></a>mbedcrypto__psa_generator_read</STRONG> (Thumb, 840 bytes, Stack size 584 bytes, psa_crypto.o(.text.mbedcrypto__psa_generator_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = mbedcrypto__psa_generator_read &rArr; psa_hmac_setup_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_update
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_abort
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_setup_internal
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_finish_internal
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_abort_internal
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_import_key
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_generator_read
</UL>

<P><STRONG><a name="[47d]"></a>mbedcrypto__psa_get_generator_capacity</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, psa_crypto.o(.text.mbedcrypto__psa_get_generator_capacity))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_get_generator_capacity
</UL>

<P><STRONG><a name="[327]"></a>mbedcrypto__psa_get_key_information</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, psa_crypto.o(.text.mbedcrypto__psa_get_key_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedcrypto__psa_get_key_information &rArr; psa_get_key_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_slot
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_asymmetric_encrypt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_get_key_information
</UL>

<P><STRONG><a name="[328]"></a>mbedcrypto__psa_get_key_lifetime</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, psa_crypto.o(.text.mbedcrypto__psa_get_key_lifetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedcrypto__psa_get_key_lifetime
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_get_key_lifetime
</UL>

<P><STRONG><a name="[329]"></a>mbedcrypto__psa_get_key_policy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psa_crypto.o(.text.mbedcrypto__psa_get_key_policy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedcrypto__psa_get_key_policy
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_get_key_policy
</UL>

<P><STRONG><a name="[32a]"></a>mbedcrypto__psa_hash_abort</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, psa_crypto.o(.text.mbedcrypto__psa_hash_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedcrypto__psa_hash_abort
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_update
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_setup
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_finish
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_abort_internal
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_abort
</UL>

<P><STRONG><a name="[32e]"></a>mbedcrypto__psa_hash_clone</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, psa_crypto.o(.text.mbedcrypto__psa_hash_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedcrypto__psa_hash_clone &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_clone
</UL>

<P><STRONG><a name="[332]"></a>mbedcrypto__psa_hash_finish</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, psa_crypto.o(.text.mbedcrypto__psa_hash_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = mbedcrypto__psa_hash_finish &rArr; mbedtls_sha512_finish_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish_ret
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_abort
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_verify
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_setup_internal
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_finish_internal
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_finish
</UL>

<P><STRONG><a name="[336]"></a>mbedcrypto__psa_hash_setup</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, psa_crypto.o(.text.mbedcrypto__psa_hash_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedcrypto__psa_hash_setup &rArr; mbedtls_sha256_starts_ret &rArr; HAL_HASH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts_ret
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_abort
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_setup_internal
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_finish_internal
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_setup
</UL>

<P><STRONG><a name="[325]"></a>mbedcrypto__psa_hash_update</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, psa_crypto.o(.text.mbedcrypto__psa_hash_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update_ret
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_abort
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_update
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_read
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_derivation_internal
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_setup_internal
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_finish_internal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_update
</UL>

<P><STRONG><a name="[33e]"></a>mbedcrypto__psa_hash_verify</STRONG> (Thumb, 54 bytes, Stack size 88 bytes, psa_crypto.o(.text.mbedcrypto__psa_hash_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = mbedcrypto__psa_hash_verify &rArr; mbedcrypto__psa_hash_finish &rArr; mbedtls_sha512_finish_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_finish
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_verify
</UL>

<P><STRONG><a name="[30c]"></a>mbedcrypto__psa_import_key</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, psa_crypto.o(.text.mbedcrypto__psa_import_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400 + Unknown Stack Size
<LI>Call Chain = mbedcrypto__psa_import_key &rArr; psa_import_key_into_slot &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_empty_key_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_import_key
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_copy_key
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_import_key
</UL>

<P><STRONG><a name="[341]"></a>mbedcrypto__psa_key_agreement</STRONG> (Thumb, 380 bytes, Stack size 392 bytes, psa_crypto.o(.text.mbedcrypto__psa_key_agreement))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = mbedcrypto__psa_key_agreement &rArr; psa_key_derivation_internal &rArr; psa_hmac_setup_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_abort
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_derivation_internal
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_ec_public_key
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_from_slot
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_key_agreement
</UL>

<P><STRONG><a name="[348]"></a>mbedcrypto__psa_key_derivation</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, psa_crypto.o(.text.mbedcrypto__psa_key_derivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
<LI>Call Chain = mbedcrypto__psa_key_derivation &rArr; psa_key_derivation_internal &rArr; psa_hmac_setup_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_abort
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_derivation_internal
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_from_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_key_derivation
</UL>

<P><STRONG><a name="[349]"></a>mbedcrypto__psa_mac_abort</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, psa_crypto.o(.text.mbedcrypto__psa_mac_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedcrypto__psa_mac_abort &rArr; psa_hmac_abort_internal &rArr; mbedcrypto__psa_hash_abort
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_abort_internal
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_verify_finish
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_update
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_sign_finish
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_setup
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_abort
</UL>

<P><STRONG><a name="[34a]"></a>mbedcrypto__psa_mac_sign_finish</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, psa_crypto.o(.text.mbedcrypto__psa_mac_sign_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = mbedcrypto__psa_mac_sign_finish &rArr; psa_mac_finish_internal &rArr; psa_hmac_finish_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_abort
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_finish_internal
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_sign_finish
</UL>

<P><STRONG><a name="[34c]"></a>mbedcrypto__psa_mac_sign_setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, psa_crypto.o(.text.mbedcrypto__psa_mac_sign_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = mbedcrypto__psa_mac_sign_setup &rArr; psa_mac_setup &rArr; psa_hmac_setup_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_sign_setup
</UL>

<P><STRONG><a name="[34e]"></a>mbedcrypto__psa_mac_update</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, psa_crypto.o(.text.mbedcrypto__psa_mac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = mbedcrypto__psa_mac_update &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_update
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_abort
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_update
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_update
</UL>

<P><STRONG><a name="[350]"></a>mbedcrypto__psa_mac_verify_finish</STRONG> (Thumb, 104 bytes, Stack size 88 bytes, psa_crypto.o(.text.mbedcrypto__psa_mac_verify_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = mbedcrypto__psa_mac_verify_finish &rArr; psa_mac_finish_internal &rArr; psa_hmac_finish_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_abort
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safer_memcmp
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_finish_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_verify_finish
</UL>

<P><STRONG><a name="[351]"></a>mbedcrypto__psa_mac_verify_setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, psa_crypto.o(.text.mbedcrypto__psa_mac_verify_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = mbedcrypto__psa_mac_verify_setup &rArr; psa_mac_setup &rArr; psa_hmac_setup_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_verify_setup
</UL>

<P><STRONG><a name="[352]"></a>mbedcrypto__psa_set_key_policy</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, psa_crypto.o(.text.mbedcrypto__psa_set_key_policy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedcrypto__psa_set_key_policy &rArr; psa_get_empty_key_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_empty_key_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_set_key_policy
</UL>

<P><STRONG><a name="[23d]"></a>mbedtls_aes_crypt_cbc</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, aes_alt.o(.text.mbedtls_aes_crypt_cbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_aes_crypt_cbc &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_SetConfig
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Encrypt
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Decrypt
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_DeInit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc_wrap
</UL>

<P><STRONG><a name="[23e]"></a>mbedtls_aes_crypt_cfb128</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, aes_alt.o(.text.mbedtls_aes_crypt_cfb128))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbedtls_aes_crypt_cfb128 &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cfb128_wrap
</UL>

<P><STRONG><a name="[23f]"></a>mbedtls_aes_crypt_ctr</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, aes_alt.o(.text.mbedtls_aes_crypt_ctr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mbedtls_aes_crypt_ctr &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ctr_wrap
</UL>

<P><STRONG><a name="[240]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, aes_alt.o(.text.mbedtls_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ofb
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb128
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
</UL>

<P><STRONG><a name="[241]"></a>mbedtls_aes_crypt_ofb</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, aes_alt.o(.text.mbedtls_aes_crypt_ofb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbedtls_aes_crypt_ofb &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ofb_wrap
</UL>

<P><STRONG><a name="[244]"></a>mbedtls_aes_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aes_alt.o(.text.mbedtls_aes_free))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
</UL>

<P><STRONG><a name="[243]"></a>mbedtls_aes_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aes_alt.o(.text.mbedtls_aes_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_aes_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
</UL>

<P><STRONG><a name="[247]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aes_alt.o(.text.mbedtls_aes_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; aes_set_key &rArr; HAL_CRYP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
</UL>

<P><STRONG><a name="[248]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aes_alt.o(.text.mbedtls_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_aes_setkey_enc &rArr; aes_set_key &rArr; HAL_CRYP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
</UL>

<P><STRONG><a name="[356]"></a>mbedtls_asn1_get_alg</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, asn1parse.o(.text.mbedtls_asn1_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>

<P><STRONG><a name="[359]"></a>mbedtls_asn1_get_alg_null</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, asn1parse.o(.text.mbedtls_asn1_get_alg_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[35a]"></a>mbedtls_asn1_get_bitstring_null</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, asn1parse.o(.text.mbedtls_asn1_get_bitstring_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[35b]"></a>mbedtls_asn1_get_int</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, asn1parse.o(.text.mbedtls_asn1_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
</UL>

<P><STRONG><a name="[358]"></a>mbedtls_asn1_get_len</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, asn1parse.o(.text.mbedtls_asn1_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>

<P><STRONG><a name="[35c]"></a>mbedtls_asn1_get_mpi</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, asn1parse.o(.text.mbedtls_asn1_get_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature_restartable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
</UL>

<P><STRONG><a name="[357]"></a>mbedtls_asn1_get_tag</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, asn1parse.o(.text.mbedtls_asn1_get_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature_restartable
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[35d]"></a>mbedtls_asn1_write_int</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, asn1write.o(.text.mbedtls_asn1_write_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_asn1_write_int &rArr; mbedtls_asn1_write_len
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
</UL>

<P><STRONG><a name="[35e]"></a>mbedtls_asn1_write_len</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, asn1write.o(.text.mbedtls_asn1_write_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_int
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_restartable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
</UL>

<P><STRONG><a name="[35f]"></a>mbedtls_asn1_write_mpi</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, asn1write.o(.text.mbedtls_asn1_write_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_restartable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
</UL>

<P><STRONG><a name="[360]"></a>mbedtls_asn1_write_oid</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, asn1write.o(.text.mbedtls_asn1_write_oid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_asn1_write_oid &rArr; mbedtls_asn1_write_len
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_param
</UL>

<P><STRONG><a name="[384]"></a>mbedtls_asn1_write_tag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, asn1write.o(.text.mbedtls_asn1_write_tag))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_restartable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
</UL>

<P><STRONG><a name="[3c5]"></a>mbedtls_base64_decode</STRONG> (Thumb, 372 bytes, Stack size 36 bytes, base64.o(.text.mbedtls_base64_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_base64_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[242]"></a>mbedtls_calloc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, platform.o(.text.mbedtls_calloc))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_alloc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_import_key
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_copy_key
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_derivation_internal
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_ec_public_key
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_tls12_prf_setup
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_raw_data_slot
</UL>

<P><STRONG><a name="[2dd]"></a>mbedtls_ccm_auth_decrypt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ccm_alt.o(.text.mbedtls_ccm_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mbedtls_ccm_auth_decrypt &rArr; mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_star_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_aead_decrypt
</UL>

<P><STRONG><a name="[2e2]"></a>mbedtls_ccm_encrypt_and_tag</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ccm_alt.o(.text.mbedtls_ccm_encrypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbedtls_ccm_encrypt_and_tag &rArr; mbedtls_ccm_star_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_star_encrypt_and_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_aead_encrypt
</UL>

<P><STRONG><a name="[26e]"></a>mbedtls_ccm_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ccm_alt.o(.text.mbedtls_ccm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ccm_free &rArr; HAL_CRYP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_free
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_abort
</UL>

<P><STRONG><a name="[26d]"></a>mbedtls_ccm_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccm_alt.o(.text.mbedtls_ccm_init))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_alloc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_setup
</UL>

<P><STRONG><a name="[26b]"></a>mbedtls_ccm_setkey</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ccm_alt.o(.text.mbedtls_ccm_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ccm_setkey &rArr; HAL_CRYP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_aes_setkey_wrap
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_setup
</UL>

<P><STRONG><a name="[361]"></a>mbedtls_ccm_star_auth_decrypt</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, ccm_alt.o(.text.mbedtls_ccm_star_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
</UL>

<P><STRONG><a name="[362]"></a>mbedtls_ccm_star_encrypt_and_tag</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, ccm_alt.o(.text.mbedtls_ccm_star_encrypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbedtls_ccm_star_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
</UL>

<P><STRONG><a name="[363]"></a>mbedtls_cipher_cmac_finish</STRONG> (Thumb, 272 bytes, Stack size 96 bytes, cmac.o(.text.mbedtls_cipher_cmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mbedtls_cipher_cmac_finish &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_xor_block
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_multiply_by_u
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_finish_internal
</UL>

<P><STRONG><a name="[366]"></a>mbedtls_cipher_cmac_starts</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cmac.o(.text.mbedtls_cipher_cmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_cmac_starts &rArr; mbedtls_cipher_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_setup
</UL>

<P><STRONG><a name="[34f]"></a>mbedtls_cipher_cmac_update</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, cmac.o(.text.mbedtls_cipher_cmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbedtls_cipher_cmac_update &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_xor_block
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_update
</UL>

<P><STRONG><a name="[368]"></a>mbedtls_cipher_crypt</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, cipher.o(.text.mbedtls_cipher_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[301]"></a>mbedtls_cipher_finish</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, cipher.o(.text.mbedtls_cipher_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_finish
</UL>

<P><STRONG><a name="[2fc]"></a>mbedtls_cipher_free</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cipher.o(.text.mbedtls_cipher_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_abort
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_abort
</UL>

<P><STRONG><a name="[3e5]"></a>mbedtls_cipher_info_from_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cipher.o(.text.mbedtls_cipher_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</UL>

<P><STRONG><a name="[36a]"></a>mbedtls_cipher_info_from_values</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cipher.o(.text.mbedtls_cipher_info_from_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_psa
</UL>

<P><STRONG><a name="[36b]"></a>mbedtls_cipher_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cipher.o(.text.mbedtls_cipher_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_cipher_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_setup
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_setup
</UL>

<P><STRONG><a name="[3e6]"></a>mbedtls_cipher_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cipher.o(.text.mbedtls_cipher_reset))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</UL>

<P><STRONG><a name="[304]"></a>mbedtls_cipher_set_iv</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cipher.o(.text.mbedtls_cipher_set_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_set_iv
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_set_iv
</UL>

<P><STRONG><a name="[40f]"></a>mbedtls_cipher_set_padding_mode</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, cipher.o(.text.mbedtls_cipher_set_padding_mode))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_setup
</UL>

<P><STRONG><a name="[367]"></a>mbedtls_cipher_setkey</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cipher.o(.text.mbedtls_cipher_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_setup
</UL>

<P><STRONG><a name="[36c]"></a>mbedtls_cipher_setup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cipher.o(.text.mbedtls_cipher_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_cipher_setup &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_setup
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_setup
</UL>

<P><STRONG><a name="[306]"></a>mbedtls_cipher_update</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, cipher.o(.text.mbedtls_cipher_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_update
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_update
</UL>

<P><STRONG><a name="[36e]"></a>mbedtls_ctr_drbg_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ctr_drbg.o(.text.mbedtls_ctr_drbg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ctr_drbg_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_psa_crypto_free
</UL>

<P><STRONG><a name="[30e]"></a>mbedtls_ctr_drbg_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ctr_drbg.o(.text.mbedtls_ctr_drbg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_ctr_drbg_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_crypto_init
</UL>

<P><STRONG><a name="[80]"></a>mbedtls_ctr_drbg_random</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ctr_drbg.o(.text.mbedtls_ctr_drbg_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_random
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_generate_iv
</UL>
<BR>[Address Reference Count : 5]<UL><LI> psa_crypto.o(.text.psa_import_key_into_slot)
<LI> psa_crypto.o(.text.mbedcrypto__psa_asymmetric_sign)
<LI> psa_crypto.o(.text.mbedcrypto__psa_asymmetric_verify)
<LI> psa_crypto.o(.text.mbedcrypto__psa_key_agreement)
<LI> psa_crypto.o(.text.mbedcrypto__psa_generate_key)
</UL>
<P><STRONG><a name="[36f]"></a>mbedtls_ctr_drbg_random_with_add</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, ctr_drbg.o(.text.mbedtls_ctr_drbg_random_with_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
</UL>

<P><STRONG><a name="[370]"></a>mbedtls_ctr_drbg_reseed</STRONG> (Thumb, 140 bytes, Stack size 416 bytes, ctr_drbg.o(.text.mbedtls_ctr_drbg_reseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[30f]"></a>mbedtls_ctr_drbg_seed</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ctr_drbg.o(.text.mbedtls_ctr_drbg_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_crypto_init
</UL>

<P><STRONG><a name="[371]"></a>mbedtls_ctr_drbg_seed_entropy_len</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, ctr_drbg.o(.text.mbedtls_ctr_drbg_seed_entropy_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
</UL>

<P><STRONG><a name="[345]"></a>mbedtls_ecdh_calc_secret</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ecdh.o(.text.mbedtls_ecdh_calc_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = mbedtls_ecdh_calc_secret &rArr; mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul_restartable &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary_le
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_get_type
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_agreement
</UL>

<P><STRONG><a name="[372]"></a>mbedtls_ecdh_compute_shared</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, ecdh.o(.text.mbedtls_ecdh_compute_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul_restartable &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</UL>

<P><STRONG><a name="[346]"></a>mbedtls_ecdh_free</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ecdh.o(.text.mbedtls_ecdh_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_agreement
</UL>

<P><STRONG><a name="[344]"></a>mbedtls_ecdh_get_params</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ecdh.o(.text.mbedtls_ecdh_get_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mbedtls_ecdh_get_params &rArr; mbedtls_ecdh_setup &rArr; mbedtls_ecp_group_load &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_agreement
</UL>

<P><STRONG><a name="[342]"></a>mbedtls_ecdh_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ecdh.o(.text.mbedtls_ecdh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_ecdh_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_agreement
</UL>

<P><STRONG><a name="[37a]"></a>mbedtls_ecdh_setup</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ecdh.o(.text.mbedtls_ecdh_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbedtls_ecdh_setup &rArr; mbedtls_ecp_group_load &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
</UL>

<P><STRONG><a name="[27a]"></a>mbedtls_ecdsa_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ecdsa.o(.text.mbedtls_ecdsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
</UL>

<P><STRONG><a name="[28b]"></a>mbedtls_ecdsa_from_keypair</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ecdsa.o(.text.mbedtls_ecdsa_from_keypair))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbedtls_ecdsa_from_keypair &rArr; mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</UL>

<P><STRONG><a name="[279]"></a>mbedtls_ecdsa_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecdsa.o(.text.mbedtls_ecdsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
</UL>

<P><STRONG><a name="[287]"></a>mbedtls_ecdsa_read_signature</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ecdsa.o(.text.mbedtls_ecdsa_read_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_read_signature_restartable &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature_restartable
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>

<P><STRONG><a name="[37f]"></a>mbedtls_ecdsa_read_signature_restartable</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, ecdsa.o(.text.mbedtls_ecdsa_read_signature_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbedtls_ecdsa_read_signature_restartable &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>

<P><STRONG><a name="[285]"></a>mbedtls_ecdsa_sign</STRONG> (Thumb, 444 bytes, Stack size 112 bytes, ecdsa_alt.o(.text.mbedtls_ecdsa_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_privkey &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ECDSASign_GetResult
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ECDSASign
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
</UL>

<P><STRONG><a name="[2f5]"></a>mbedtls_ecdsa_sign_det</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, ecdsa.o(.text.mbedtls_ecdsa_sign_det))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = mbedtls_ecdsa_sign_det &rArr; ecdsa_sign_det_restartable &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_privkey &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
</UL>

<P><STRONG><a name="[2f8]"></a>mbedtls_ecdsa_verify</STRONG> (Thumb, 428 bytes, Stack size 120 bytes, ecdsa_alt.o(.text.mbedtls_ecdsa_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mbedtls_ecdsa_verify &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_Init
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ECDSAVerif_IsValidSignature
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ECDSAVerif
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature_restartable
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_verify
</UL>

<P><STRONG><a name="[286]"></a>mbedtls_ecdsa_write_signature</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, ecdsa.o(.text.mbedtls_ecdsa_write_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_write_signature_restartable &rArr; ecdsa_sign_det_restartable &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_privkey &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_restartable
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
</UL>

<P><STRONG><a name="[383]"></a>mbedtls_ecdsa_write_signature_restartable</STRONG> (Thumb, 182 bytes, Stack size 208 bytes, ecdsa.o(.text.mbedtls_ecdsa_write_signature_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = mbedtls_ecdsa_write_signature_restartable &rArr; ecdsa_sign_det_restartable &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_privkey &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[385]"></a>mbedtls_ecp_check_privkey</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ecp_alt.o(.text.mbedtls_ecp_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ecp_check_privkey &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
</UL>

<P><STRONG><a name="[289]"></a>mbedtls_ecp_check_pub_priv</STRONG> (Thumb, 192 bytes, Stack size 240 bytes, ecp_alt.o(.text.mbedtls_ecp_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_check_pair
</UL>

<P><STRONG><a name="[388]"></a>mbedtls_ecp_check_pubkey</STRONG> (Thumb, 344 bytes, Stack size 88 bytes, ecp_alt.o(.text.mbedtls_ecp_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_ecp_check_pubkey &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_DeInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_PointCheck_IsOnCurve
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_PointCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_ec_public_key
</UL>

<P><STRONG><a name="[37b]"></a>mbedtls_ecp_copy</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ecp_alt.o(.text.mbedtls_ecp_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_ecp_copy &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
</UL>

<P><STRONG><a name="[31b]"></a>mbedtls_ecp_curve_info_from_grp_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ecp_alt.o(.text.mbedtls_ecp_curve_info_from_grp_id))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
</UL>

<P><STRONG><a name="[31f]"></a>mbedtls_ecp_gen_key</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ecp_alt.o(.text.mbedtls_ecp_gen_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = mbedtls_ecp_gen_key &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
</UL>

<P><STRONG><a name="[38a]"></a>mbedtls_ecp_gen_keypair</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ecp_alt.o(.text.mbedtls_ecp_gen_keypair))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_key
</UL>

<P><STRONG><a name="[38b]"></a>mbedtls_ecp_gen_keypair_base</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ecp_alt.o(.text.mbedtls_ecp_gen_keypair_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>

<P><STRONG><a name="[380]"></a>mbedtls_ecp_gen_privkey</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, ecp_alt.o(.text.mbedtls_ecp_gen_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_ecp_gen_privkey &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>

<P><STRONG><a name="[373]"></a>mbedtls_ecp_get_type</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ecp_alt.o(.text.mbedtls_ecp_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</UL>

<P><STRONG><a name="[37e]"></a>mbedtls_ecp_group_copy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ecp_alt.o(.text.mbedtls_ecp_group_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
</UL>

<P><STRONG><a name="[28f]"></a>mbedtls_ecp_group_free</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, ecp_alt.o(.text.mbedtls_ecp_group_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[37c]"></a>mbedtls_ecp_group_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ecp_alt.o(.text.mbedtls_ecp_group_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ecp_group_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_setup
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[37d]"></a>mbedtls_ecp_group_load</STRONG> (Thumb, 1300 bytes, Stack size 64 bytes, ecp_curves_alt.o(.text.mbedtls_ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbedtls_ecp_group_load &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_key
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_setup
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_ec_public_key
</UL>

<P><STRONG><a name="[40a]"></a>mbedtls_ecp_grp_id_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ecp_alt.o(.text.mbedtls_ecp_grp_id_list))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[377]"></a>mbedtls_ecp_is_zero</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ecp_alt.o(.text.mbedtls_ecp_is_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecp_is_zero &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[28a]"></a>mbedtls_ecp_keypair_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp_alt.o(.text.mbedtls_ecp_keypair_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_wipe_key_slot
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_agreement
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_ec_public_key
</UL>

<P><STRONG><a name="[288]"></a>mbedtls_ecp_keypair_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ecp_alt.o(.text.mbedtls_ecp_keypair_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_ec_public_key
</UL>

<P><STRONG><a name="[387]"></a>mbedtls_ecp_mul</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ecp_alt.o(.text.mbedtls_ecp_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
</UL>

<P><STRONG><a name="[376]"></a>mbedtls_ecp_mul_restartable</STRONG> (Thumb, 1780 bytes, Stack size 224 bytes, ecp_alt.o(.text.mbedtls_ecp_mul_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = mbedtls_ecp_mul_restartable &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_DeInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_swap
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ECCMul_GetResult
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ECCMul
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[379]"></a>mbedtls_ecp_point_free</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ecp_alt.o(.text.mbedtls_ecp_point_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[375]"></a>mbedtls_ecp_point_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ecp_alt.o(.text.mbedtls_ecp_point_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_point_init
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_setup
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[390]"></a>mbedtls_ecp_point_read_binary</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, ecp_alt.o(.text.mbedtls_ecp_point_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary_le &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary_le
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_ec_public_key
</UL>

<P><STRONG><a name="[381]"></a>mbedtls_ecp_point_write_binary</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, ecp_alt.o(.text.mbedtls_ecp_point_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary_le
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_pubkey
</UL>

<P><STRONG><a name="[393]"></a>mbedtls_ecp_set_zero</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ecp_alt.o(.text.mbedtls_ecp_set_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecp_set_zero &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</UL>

<P><STRONG><a name="[395]"></a>mbedtls_entropy_add_source</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, entropy.o(.text.mbedtls_entropy_add_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_entropy_add_source
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
</UL>

<P><STRONG><a name="[82]"></a>mbedtls_entropy_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, entropy.o(.text.mbedtls_entropy_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_entropy_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psa_crypto.o(.text.mbedcrypto__psa_crypto_init)
</UL>
<P><STRONG><a name="[83]"></a>mbedtls_entropy_func</STRONG> (Thumb, 226 bytes, Stack size 104 bytes, entropy.o(.text.mbedtls_entropy_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = mbedtls_entropy_func &rArr; entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha512_ret &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update_ret
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts_ret
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish_ret
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psa_crypto.o(.text.mbedcrypto__psa_crypto_init)
</UL>
<P><STRONG><a name="[81]"></a>mbedtls_entropy_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, entropy.o(.text.mbedtls_entropy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_entropy_init &rArr; mbedtls_entropy_add_source
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psa_crypto.o(.text.mbedcrypto__psa_crypto_init)
</UL>
<P><STRONG><a name="[245]"></a>mbedtls_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, platform.o(.text.mbedtls_free))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_free
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_free
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_wipe_key_slot
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_agreement
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_import_key
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_abort
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_copy_key
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_ec_public_key
</UL>

<P><STRONG><a name="[2dc]"></a>mbedtls_gcm_auth_decrypt</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, gcm_alt.o(.text.mbedtls_gcm_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_aead_decrypt
</UL>

<P><STRONG><a name="[2e1]"></a>mbedtls_gcm_crypt_and_tag</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, gcm_alt.o(.text.mbedtls_gcm_crypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_aead_encrypt
</UL>

<P><STRONG><a name="[397]"></a>mbedtls_gcm_finish</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, gcm_alt.o(.text.mbedtls_gcm_finish), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYPEx_AESGCM_GenerateAuthTAG
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2a2]"></a>mbedtls_gcm_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gcm_alt.o(.text.mbedtls_gcm_free))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_abort
</UL>

<P><STRONG><a name="[2a1]"></a>mbedtls_gcm_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gcm_alt.o(.text.mbedtls_gcm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_gcm_init &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_setup
</UL>

<P><STRONG><a name="[2a0]"></a>mbedtls_gcm_setkey</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, gcm_alt.o(.text.mbedtls_gcm_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_gcm_setkey &rArr; HAL_CRYP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_aes_setkey_wrap
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_setup
</UL>

<P><STRONG><a name="[396]"></a>mbedtls_gcm_starts</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, gcm_alt.o(.text.mbedtls_gcm_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_gcm_starts &rArr; HAL_CRYP_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_SetConfig
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>

<P><STRONG><a name="[36d]"></a>mbedtls_gcm_update</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, gcm_alt.o(.text.mbedtls_gcm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbedtls_gcm_update &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Encrypt
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>

<P><STRONG><a name="[94]"></a>mbedtls_hardware_poll</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, low_level_rng.o(.text.mbedtls_hardware_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_hardware_poll &rArr; HAL_RNG_GenerateRandomNumber &rArr; RNG_RecoverSeedError
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entropy.o(.text.mbedtls_entropy_init)
</UL>
<P><STRONG><a name="[280]"></a>mbedtls_hmac_drbg_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hmac_drbg.o(.text.mbedtls_hmac_drbg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_hmac_drbg_free &rArr; mbedtls_md_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
</UL>

<P><STRONG><a name="[27d]"></a>mbedtls_hmac_drbg_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hmac_drbg.o(.text.mbedtls_hmac_drbg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_hmac_drbg_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
</UL>

<P><STRONG><a name="[7f]"></a>mbedtls_hmac_drbg_random</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, hmac_drbg.o(.text.mbedtls_hmac_drbg_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = mbedtls_hmac_drbg_random &rArr; mbedtls_hmac_drbg_random_with_add &rArr; mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update_ret &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecdsa.o(.text.ecdsa_sign_det_restartable)
</UL>
<P><STRONG><a name="[399]"></a>mbedtls_hmac_drbg_random_with_add</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, hmac_drbg.o(.text.mbedtls_hmac_drbg_random_with_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = mbedtls_hmac_drbg_random_with_add &rArr; mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update_ret &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random
</UL>

<P><STRONG><a name="[39b]"></a>mbedtls_hmac_drbg_reseed</STRONG> (Thumb, 122 bytes, Stack size 416 bytes, hmac_drbg.o(.text.mbedtls_hmac_drbg_reseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update_ret &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>

<P><STRONG><a name="[284]"></a>mbedtls_hmac_drbg_seed_buf</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hmac_drbg.o(.text.mbedtls_hmac_drbg_seed_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mbedtls_hmac_drbg_seed_buf &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
</UL>

<P><STRONG><a name="[39c]"></a>mbedtls_hmac_drbg_update_ret</STRONG> (Thumb, 196 bytes, Stack size 112 bytes, hmac_drbg.o(.text.mbedtls_hmac_drbg_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = mbedtls_hmac_drbg_update_ret &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>

<P><STRONG><a name="[355]"></a>mbedtls_internal_aes_decrypt</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, aes_alt.o(.text.mbedtls_internal_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[354]"></a>mbedtls_internal_aes_encrypt</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, aes_alt.o(.text.mbedtls_internal_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_internal_aes_encrypt &rArr; HAL_CRYP_Encrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[3a3]"></a>mbedtls_internal_sha1_process</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sha1_alt.o(.text.mbedtls_internal_sha1_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_internal_sha1_process &rArr; HAL_HASH_SHA1_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_SHA1_Accmlt
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_ContextSaving
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_ContextRestoring
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_wrap
</UL>

<P><STRONG><a name="[3a6]"></a>mbedtls_internal_sha256_process</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sha256_alt.o(.text.mbedtls_internal_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_internal_sha256_process &rArr; HAL_HASHEx_SHA256_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA256_Accmlt
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA224_Accmlt
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_ContextSaving
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_ContextRestoring
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
</UL>

<P><STRONG><a name="[404]"></a>mbedtls_internal_sha512_process</STRONG> (Thumb, 2460 bytes, Stack size 856 bytes, sha512.o(.text.mbedtls_internal_sha512_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = mbedtls_internal_sha512_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update_ret
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish_ret
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_process_wrap
</UL>

<P><STRONG><a name="[3e3]"></a>mbedtls_md</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
</UL>

<P><STRONG><a name="[3e2]"></a>mbedtls_md_finish</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_finish))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
</UL>

<P><STRONG><a name="[398]"></a>mbedtls_md_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, md.o(.text.mbedtls_md_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
</UL>

<P><STRONG><a name="[39a]"></a>mbedtls_md_get_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_rsa_decode_md_type
</UL>

<P><STRONG><a name="[2f4]"></a>mbedtls_md_get_type</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_rsa_oaep_set_padding_mode
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_rsa_decode_md_type
</UL>

<P><STRONG><a name="[39f]"></a>mbedtls_md_hmac_finish</STRONG> (Thumb, 84 bytes, Stack size 88 bytes, md.o(.text.mbedtls_md_hmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
</UL>

<P><STRONG><a name="[39d]"></a>mbedtls_md_hmac_reset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, md.o(.text.mbedtls_md_hmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>

<P><STRONG><a name="[3a1]"></a>mbedtls_md_hmac_starts</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, md.o(.text.mbedtls_md_hmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
</UL>

<P><STRONG><a name="[39e]"></a>mbedtls_md_hmac_update</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, md.o(.text.mbedtls_md_hmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_hmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
</UL>

<P><STRONG><a name="[27c]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
</UL>

<P><STRONG><a name="[3de]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_init))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
</UL>

<P><STRONG><a name="[3a0]"></a>mbedtls_md_setup</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, md.o(.text.mbedtls_md_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
</UL>

<P><STRONG><a name="[3e0]"></a>mbedtls_md_starts</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_starts))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
</UL>

<P><STRONG><a name="[3e1]"></a>mbedtls_md_update</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_update))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
</UL>

<P><STRONG><a name="[3a7]"></a>mbedtls_memory_buffer_alloc_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, memory_buffer_alloc.o(.text.mbedtls_memory_buffer_alloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_memory_buffer_alloc_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_init
</UL>

<P><STRONG><a name="[293]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[3aa]"></a>mbedtls_mpi_add_int</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_add_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
</UL>

<P><STRONG><a name="[296]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p448
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[28d]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
</UL>

<P><STRONG><a name="[3ab]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[97]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export_crt
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime_ext
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rsa_alt.o(.text.mbedtls_rsa_complete)
</UL>
<P><STRONG><a name="[282]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[378]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export_crt
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[3ac]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 848 bytes, Stack size 120 bytes, bignum.o(.text.mbedtls_mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[3ad]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 1064 bytes, Stack size 1640 bytes, bignum.o(.text.mbedtls_mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
</UL>

<P><STRONG><a name="[38c]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_fill_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_bigendian_to_host
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
</UL>

<P><STRONG><a name="[8d]"></a>mbedtls_mpi_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary_le
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_restartable
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature_restartable
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_verify
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
</UL>
<BR>[Address Reference Count : 9]<UL><LI> rsa_alt.o(.text.mbedtls_rsa_private)
<LI> rsa_alt.o(.text.mbedtls_rsa_gen_key)
<LI> ecp_alt.o(.text.mbedtls_ecp_point_free)
<LI> ecp_alt.o(.text.mbedtls_ecp_group_free)
<LI> bignum.o(.text.mbedtls_mpi_div_mpi)
<LI> bignum.o(.text.mbedtls_mpi_exp_mod)
<LI> bignum.o(.text.mbedtls_mpi_gcd)
<LI> bignum.o(.text.mbedtls_mpi_inv_mod)
<LI> bignum.o(.text.mpi_miller_rabin)
</UL>
<P><STRONG><a name="[3b2]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, bignum.o(.text.mbedtls_mpi_gcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[3b4]"></a>mbedtls_mpi_gen_prime</STRONG> (Thumb, 504 bytes, Stack size 64 bytes, bignum.o(.text.mbedtls_mpi_gen_prime))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = mbedtls_mpi_gen_prime &rArr; mbedtls_mpi_is_prime_ext &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_int
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime_ext
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[386]"></a>mbedtls_mpi_get_bit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bignum.o(.text.mbedtls_mpi_get_bit))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[3a9]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_swap
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary_le
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[8e]"></a>mbedtls_mpi_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bignum.o(.text.mbedtls_mpi_init))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_restartable
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature_restartable
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_setup
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_verify
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
</UL>
<BR>[Address Reference Count : 4]<UL><LI> rsa_alt.o(.text.mbedtls_rsa_private)
<LI> rsa_alt.o(.text.mbedtls_rsa_gen_key)
<LI> ecp_alt.o(.text.mbedtls_ecp_point_init)
<LI> ecp_alt.o(.text.mbedtls_ecp_group_init)
</UL>
<P><STRONG><a name="[392]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 684 bytes, Stack size 144 bytes, bignum.o(.text.mbedtls_mpi_inv_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
</UL>

<P><STRONG><a name="[3b5]"></a>mbedtls_mpi_is_prime_ext</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_is_prime_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056<LI>Call Chain = mbedtls_mpi_is_prime_ext &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
</UL>

<P><STRONG><a name="[3b3]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, bignum.o(.text.mbedtls_mpi_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
</UL>

<P><STRONG><a name="[38e]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary_le
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[3b6]"></a>mbedtls_mpi_mod_int</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_mod_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_mod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
</UL>

<P><STRONG><a name="[29a]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
</UL>

<P><STRONG><a name="[295]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[292]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, bignum.o(.text.mbedtls_mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
</UL>

<P><STRONG><a name="[27f]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_bigendian_to_host
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_verify
</UL>

<P><STRONG><a name="[394]"></a>mbedtls_mpi_read_binary_le</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_read_binary_le))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_read_binary_le &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</UL>

<P><STRONG><a name="[38d]"></a>mbedtls_mpi_read_string</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, bignum.o(.text.mbedtls_mpi_read_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbedtls_mpi_read_string &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_get_digit
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[391]"></a>mbedtls_mpi_safe_cond_swap</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_safe_cond_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_safe_cond_swap &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[294]"></a>mbedtls_mpi_set_bit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_set_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_set_bit &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[297]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p448
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[281]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, bignum.o(.text.mbedtls_mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p448
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
</UL>

<P><STRONG><a name="[28e]"></a>mbedtls_mpi_size</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[299]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</UL>

<P><STRONG><a name="[38f]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_sub_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
</UL>

<P><STRONG><a name="[283]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
</UL>

<P><STRONG><a name="[3f4]"></a>mbedtls_mpi_swap</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_mpi_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[27e]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_write_binary
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_internal_export_key
</UL>

<P><STRONG><a name="[374]"></a>mbedtls_mpi_write_binary_le</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_write_binary_le))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_write_binary_le
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</UL>

<P><STRONG><a name="[3bd]"></a>mbedtls_oid_get_cipher_alg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, oid.o(.text.mbedtls_oid_get_cipher_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_oid_get_cipher_alg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[3be]"></a>mbedtls_oid_get_ec_grp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text.mbedtls_oid_get_ec_grp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_oid_get_ec_grp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[3bf]"></a>mbedtls_oid_get_md_hmac</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, oid.o(.text.mbedtls_oid_get_md_hmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_oid_get_md_hmac &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[40b]"></a>mbedtls_oid_get_oid_by_ec_grp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, oid.o(.text.mbedtls_oid_get_oid_by_ec_grp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_oid_get_oid_by_ec_grp
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_param
</UL>

<P><STRONG><a name="[414]"></a>mbedtls_oid_get_oid_by_md</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, oid.o(.text.mbedtls_oid_get_oid_by_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_oid_get_oid_by_md
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
</UL>

<P><STRONG><a name="[3c0]"></a>mbedtls_oid_get_pk_alg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, oid.o(.text.mbedtls_oid_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_oid_get_pk_alg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>

<P><STRONG><a name="[3c1]"></a>mbedtls_oid_get_pkcs12_pbe_alg</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, oid.o(.text.mbedtls_oid_get_pkcs12_pbe_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_oid_get_pkcs12_pbe_alg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[3c2]"></a>mbedtls_pem_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pem.o(.text.mbedtls_pem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[3c8]"></a>mbedtls_pem_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pem.o(.text.mbedtls_pem_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[3c3]"></a>mbedtls_pem_read_buffer</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, pem.o(.text.mbedtls_pem_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_pem_read_buffer &rArr; mbedtls_base64_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[3c6]"></a>mbedtls_pk_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pk.o(.text.mbedtls_pk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
</UL>

<P><STRONG><a name="[3d7]"></a>mbedtls_pk_get_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk.o(.text.mbedtls_pk_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
</UL>

<P><STRONG><a name="[3cc]"></a>mbedtls_pk_info_from_type</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pk.o(.text.mbedtls_pk_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[3ca]"></a>mbedtls_pk_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pk.o(.text.mbedtls_pk_init))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_internal_export_key
</UL>

<P><STRONG><a name="[3c7]"></a>mbedtls_pk_parse_key</STRONG> (Thumb, 732 bytes, Stack size 64 bytes, pkparse.o(.text.mbedtls_pk_parse_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2312 + Unknown Stack Size
<LI>Call Chain = mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
</UL>

<P><STRONG><a name="[3d0]"></a>mbedtls_pk_parse_public_key</STRONG> (Thumb, 424 bytes, Stack size 64 bytes, pkparse.o(.text.mbedtls_pk_parse_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = mbedtls_pk_parse_public_key &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
</UL>

<P><STRONG><a name="[3d2]"></a>mbedtls_pk_parse_subpubkey</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, pkparse.o(.text.mbedtls_pk_parse_subpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
</UL>

<P><STRONG><a name="[3cd]"></a>mbedtls_pk_setup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pk.o(.text.mbedtls_pk_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[3d6]"></a>mbedtls_pk_write_key_der</STRONG> (Thumb, 756 bytes, Stack size 64 bytes, pkwrite.o(.text.mbedtls_pk_write_key_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_pk_write_key_der &rArr; pk_write_ec_pubkey &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export_crt
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_int
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_pubkey
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_param
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_internal_export_key
</UL>

<P><STRONG><a name="[3dc]"></a>mbedtls_pk_write_pubkey</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, pkwrite.o(.text.mbedtls_pk_write_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mbedtls_pk_write_pubkey &rArr; pk_write_ec_pubkey &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_internal_export_key
</UL>

<P><STRONG><a name="[3dd]"></a>mbedtls_pkcs12_derivation</STRONG> (Thumb, 452 bytes, Stack size 640 bytes, pkcs12.o(.text.mbedtls_pkcs12_derivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = mbedtls_pkcs12_derivation &rArr; mbedtls_md_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_fill_buffer
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</UL>

<P><STRONG><a name="[3e4]"></a>mbedtls_pkcs12_pbe</STRONG> (Thumb, 428 bytes, Stack size 392 bytes, pkcs12.o(.text.mbedtls_pkcs12_pbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = mbedtls_pkcs12_pbe &rArr; mbedtls_pkcs12_derivation &rArr; mbedtls_md_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_reset
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[409]"></a>mbedtls_pkcs12_pbe_sha1_rc4_128</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pkcs12.o(.text.mbedtls_pkcs12_pbe_sha1_rc4_128))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[3e7]"></a>mbedtls_pkcs5_pbes2</STRONG> (Thumb, 512 bytes, Stack size 280 bytes, pkcs5.o(.text.mbedtls_pkcs5_pbes2))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = mbedtls_pkcs5_pbes2 &rArr; mbedtls_pkcs5_pbkdf2_hmac &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_hmac
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_cipher_alg
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[3e8]"></a>mbedtls_pkcs5_pbkdf2_hmac</STRONG> (Thumb, 248 bytes, Stack size 184 bytes, pkcs5.o(.text.mbedtls_pkcs5_pbkdf2_hmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = mbedtls_pkcs5_pbkdf2_hmac &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[3a8]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, platform.o(.text.mbedtls_platform_set_calloc_free))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
</UL>

<P><STRONG><a name="[7e]"></a>mbedtls_platform_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, platform_util.o(.text.mbedtls_platform_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_star_auth_decrypt
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_psa_crypto_free
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_verify_finish
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_agreement
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_abort
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_copy_key
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_finish
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_finish_internal
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_derivation_internal
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_setup_internal
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_finish_internal
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_abort_internal
</UL>
<BR>[Address Reference Count : 3]<UL><LI> ctr_drbg.o(.text.block_cipher_df)
<LI> cmac.o(.text.mbedtls_cipher_cmac_finish)
<LI> pkcs12.o(.text.mbedtls_pkcs12_derivation)
</UL>
<P><STRONG><a name="[311]"></a>mbedtls_psa_crypto_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, psa_crypto.o(.text.mbedtls_psa_crypto_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_psa_crypto_free &rArr; psa_wipe_all_key_slots &rArr; psa_wipe_key_slot &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_wipe_all_key_slots
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_crypto_init
</UL>

<P><STRONG><a name="[3ea]"></a>mbedtls_rsa_check_privkey</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, rsa_alt.o(.text.mbedtls_rsa_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime_ext &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[3ef]"></a>mbedtls_rsa_check_pub_priv</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rsa_alt.o(.text.mbedtls_rsa_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime_ext &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pair_wrap
</UL>

<P><STRONG><a name="[3eb]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rsa_alt.o(.text.mbedtls_rsa_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; rsa_check_context &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[3f0]"></a>mbedtls_rsa_complete</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, rsa_alt.o(.text.mbedtls_rsa_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040<LI>Call Chain = mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[3f3]"></a>mbedtls_rsa_deduce_crt</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, rsa_internal.o(.text.mbedtls_rsa_deduce_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mbedtls_rsa_deduce_crt &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[3f1]"></a>mbedtls_rsa_deduce_primes</STRONG> (Thumb, 488 bytes, Stack size 64 bytes, rsa_internal.o(.text.mbedtls_rsa_deduce_primes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[3f2]"></a>mbedtls_rsa_deduce_private_exponent</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, rsa_internal.o(.text.mbedtls_rsa_deduce_private_exponent))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = mbedtls_rsa_deduce_private_exponent &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[3db]"></a>mbedtls_rsa_export</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, rsa_alt.o(.text.mbedtls_rsa_export))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_rsa_export &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
</UL>

<P><STRONG><a name="[3d8]"></a>mbedtls_rsa_export_crt</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, rsa_alt.o(.text.mbedtls_rsa_export_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_rsa_export_crt &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
</UL>

<P><STRONG><a name="[31e]"></a>mbedtls_rsa_free</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rsa_alt.o(.text.mbedtls_rsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_free
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_wipe_key_slot
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
</UL>

<P><STRONG><a name="[31d]"></a>mbedtls_rsa_gen_key</STRONG> (Thumb, 532 bytes, Stack size 120 bytes, rsa_alt.o(.text.mbedtls_rsa_gen_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2280<LI>Call Chain = mbedtls_rsa_gen_key &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime_ext &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_swap
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
</UL>

<P><STRONG><a name="[2e7]"></a>mbedtls_rsa_get_len</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rsa_alt.o(.text.mbedtls_rsa_get_len))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_get_bitlen
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_verify
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_encrypt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_decrypt
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_bits
</UL>

<P><STRONG><a name="[3f5]"></a>mbedtls_rsa_import_raw</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rsa_alt.o(.text.mbedtls_rsa_import_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_rsa_import_raw &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[31c]"></a>mbedtls_rsa_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rsa_alt.o(.text.mbedtls_rsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_rsa_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
</UL>

<P><STRONG><a name="[2e8]"></a>mbedtls_rsa_pkcs1_decrypt</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, rsa_alt.o(.text.mbedtls_rsa_pkcs1_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_decrypt
</UL>

<P><STRONG><a name="[2ec]"></a>mbedtls_rsa_pkcs1_encrypt</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, rsa_alt.o(.text.mbedtls_rsa_pkcs1_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_encrypt
</UL>

<P><STRONG><a name="[2f1]"></a>mbedtls_rsa_pkcs1_sign</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, rsa_alt.o(.text.mbedtls_rsa_pkcs1_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
</UL>

<P><STRONG><a name="[2f9]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, rsa_alt.o(.text.mbedtls_rsa_pkcs1_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_verify
</UL>

<P><STRONG><a name="[3fa]"></a>mbedtls_rsa_private</STRONG> (Thumb, 676 bytes, Stack size 208 bytes, rsa_alt.o(.text.mbedtls_rsa_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_DeInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_RSACRTExp
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ModExp_GetResult
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[3fb]"></a>mbedtls_rsa_public</STRONG> (Thumb, 388 bytes, Stack size 88 bytes, rsa_alt.o(.text.mbedtls_rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_DeInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ModExp_GetResult
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_ModExp
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[2ea]"></a>mbedtls_rsa_rsaes_oaep_decrypt</STRONG> (Thumb, 412 bytes, Stack size 1144 bytes, rsa_alt.o(.text.mbedtls_rsa_rsaes_oaep_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_decrypt
</UL>

<P><STRONG><a name="[2ed]"></a>mbedtls_rsa_rsaes_oaep_encrypt</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, rsa_alt.o(.text.mbedtls_rsa_rsaes_oaep_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_encrypt
</UL>

<P><STRONG><a name="[3f6]"></a>mbedtls_rsa_rsaes_pkcs1_v15_decrypt</STRONG> (Thumb, 412 bytes, Stack size 1064 bytes, rsa_alt.o(.text.mbedtls_rsa_rsaes_pkcs1_v15_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[3f7]"></a>mbedtls_rsa_rsaes_pkcs1_v15_encrypt</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, rsa_alt.o(.text.mbedtls_rsa_rsaes_pkcs1_v15_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[3f8]"></a>mbedtls_rsa_rsassa_pkcs1_v15_sign</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, rsa_alt.o(.text.mbedtls_rsa_rsassa_pkcs1_v15_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_safer_memcmp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[3f9]"></a>mbedtls_rsa_rsassa_pkcs1_v15_verify</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, rsa_alt.o(.text.mbedtls_rsa_rsassa_pkcs1_v15_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[2f2]"></a>mbedtls_rsa_rsassa_pss_sign</STRONG> (Thumb, 428 bytes, Stack size 144 bytes, rsa_alt.o(.text.mbedtls_rsa_rsassa_pss_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
</UL>

<P><STRONG><a name="[2fa]"></a>mbedtls_rsa_rsassa_pss_verify</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, rsa_alt.o(.text.mbedtls_rsa_rsassa_pss_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_verify
</UL>

<P><STRONG><a name="[3ff]"></a>mbedtls_rsa_rsassa_pss_verify_ext</STRONG> (Thumb, 476 bytes, Stack size 1160 bytes, rsa_alt.o(.text.mbedtls_rsa_rsassa_pss_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
</UL>

<P><STRONG><a name="[2f0]"></a>mbedtls_rsa_set_padding</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rsa_alt.o(.text.mbedtls_rsa_set_padding))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_verify
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_rsa_oaep_set_padding_mode
</UL>

<P><STRONG><a name="[3ee]"></a>mbedtls_rsa_validate_crt</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, rsa_internal.o(.text.mbedtls_rsa_validate_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_rsa_validate_crt &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[3ed]"></a>mbedtls_rsa_validate_params</STRONG> (Thumb, 496 bytes, Stack size 64 bytes, rsa_internal.o(.text.mbedtls_rsa_validate_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime_ext &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[32f]"></a>mbedtls_sha1_clone</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sha1_alt.o(.text.mbedtls_sha1_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_clone_wrap
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_clone
</UL>

<P><STRONG><a name="[335]"></a>mbedtls_sha1_finish_ret</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sha1_alt.o(.text.mbedtls_sha1_finish_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_sha1_finish_ret &rArr; HAL_HASH_SHA1_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_SHA1_Accmlt_End
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_ContextRestoring
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_finish
</UL>

<P><STRONG><a name="[32b]"></a>mbedtls_sha1_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sha1_alt.o(.text.mbedtls_sha1_free))
<BR><BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_abort
</UL>

<P><STRONG><a name="[337]"></a>mbedtls_sha1_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sha1_alt.o(.text.mbedtls_sha1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_setup
</UL>

<P><STRONG><a name="[e6]"></a>mbedtls_sha1_ret</STRONG> (Thumb, 64 bytes, Stack size 384 bytes, sha1.o(.text.mbedtls_sha1_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = mbedtls_sha1_ret &rArr; mbedtls_sha1_finish_ret &rArr; HAL_HASH_SHA1_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha1_info)
</UL>
<P><STRONG><a name="[338]"></a>mbedtls_sha1_starts_ret</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sha1_alt.o(.text.mbedtls_sha1_starts_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha1_starts_ret &rArr; HAL_HASH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_Init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_DeInit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_ContextSaving
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_setup
</UL>

<P><STRONG><a name="[33d]"></a>mbedtls_sha1_update_ret</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, sha1_alt.o(.text.mbedtls_sha1_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_sha1_update_ret &rArr; HAL_HASH_SHA1_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_SHA1_Accmlt
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_ContextSaving
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_ContextRestoring
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_update
</UL>

<P><STRONG><a name="[330]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sha256_alt.o(.text.mbedtls_sha256_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_clone
</UL>

<P><STRONG><a name="[334]"></a>mbedtls_sha256_finish_ret</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sha256_alt.o(.text.mbedtls_sha256_finish_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_sha256_finish_ret &rArr; HAL_HASHEx_SHA256_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA256_Accmlt_End
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA224_Accmlt_End
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_ContextRestoring
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_finish
</UL>

<P><STRONG><a name="[32c]"></a>mbedtls_sha256_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sha256_alt.o(.text.mbedtls_sha256_free))
<BR><BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_abort
</UL>

<P><STRONG><a name="[339]"></a>mbedtls_sha256_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sha256_alt.o(.text.mbedtls_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_setup
</UL>

<P><STRONG><a name="[402]"></a>mbedtls_sha256_ret</STRONG> (Thumb, 72 bytes, Stack size 392 bytes, sha256.o(.text.mbedtls_sha256_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = mbedtls_sha256_ret &rArr; mbedtls_sha256_finish_ret &rArr; HAL_HASHEx_SHA256_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
</UL>

<P><STRONG><a name="[33a]"></a>mbedtls_sha256_starts_ret</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sha256_alt.o(.text.mbedtls_sha256_starts_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_sha256_starts_ret &rArr; HAL_HASH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_Init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_DeInit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_ContextSaving
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_setup
</UL>

<P><STRONG><a name="[33c]"></a>mbedtls_sha256_update_ret</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, sha256_alt.o(.text.mbedtls_sha256_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_sha256_update_ret &rArr; HAL_HASHEx_SHA256_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA256_Accmlt
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA224_Accmlt
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_ContextSaving
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_ContextRestoring
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_update
</UL>

<P><STRONG><a name="[331]"></a>mbedtls_sha512_clone</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sha512.o(.text.mbedtls_sha512_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha512_clone &rArr; __aeabi_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_clone_wrap
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_clone
</UL>

<P><STRONG><a name="[333]"></a>mbedtls_sha512_finish_ret</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, sha512.o(.text.mbedtls_sha512_finish_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = mbedtls_sha512_finish_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha512_process
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_finish_wrap
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_finish
</UL>

<P><STRONG><a name="[32d]"></a>mbedtls_sha512_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sha512.o(.text.mbedtls_sha512_free))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_free
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_abort
</UL>

<P><STRONG><a name="[33b]"></a>mbedtls_sha512_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sha512.o(.text.mbedtls_sha512_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_sha512_init &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_alloc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_setup
</UL>

<P><STRONG><a name="[29d]"></a>mbedtls_sha512_ret</STRONG> (Thumb, 64 bytes, Stack size 240 bytes, sha512.o(.text.mbedtls_sha512_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = mbedtls_sha512_ret &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update_ret
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts_ret
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish_ret
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_wrap
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_wrap
</UL>

<P><STRONG><a name="[29f]"></a>mbedtls_sha512_starts_ret</STRONG> (Thumb, 340 bytes, Stack size 20 bytes, sha512.o(.text.mbedtls_sha512_starts_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_sha512_starts_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_starts_wrap
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_starts_wrap
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_setup
</UL>

<P><STRONG><a name="[29e]"></a>mbedtls_sha512_update_ret</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sha512.o(.text.mbedtls_sha512_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha512_process
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update_wrap
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_update
</UL>

<P><STRONG><a name="[405]"></a>mpc_init_cfg</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, target_cfg.o(.text.mpc_init_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mpc_init_cfg &rArr; unsecure_sram1 &rArr; HAL_GTZC_MPCBB_GetConfigMem
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsecure_sram1
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_sram_config
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GTZC_TZSC_ConfigPeriphAttributes
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GTZC_TZIC_EnableIT
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_init_isolation_hw
</UL>

<P><STRONG><a name="[49f]"></a>mpu_armv8m_clean</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mpu_armv8m_drv.o(.text.mpu_armv8m_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpu_armv8m_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_setup_isolation_hw
</UL>

<P><STRONG><a name="[4a1]"></a>mpu_armv8m_enable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mpu_armv8m_drv.o(.text.mpu_armv8m_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_setup_isolation_hw
</UL>

<P><STRONG><a name="[4a0]"></a>mpu_armv8m_region_enable</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mpu_armv8m_drv.o(.text.mpu_armv8m_region_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpu_armv8m_region_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_setup_isolation_hw
</UL>

<P><STRONG><a name="[40d]"></a>pinmux_conf_init_ns</STRONG> (Thumb, 200 bytes, Stack size 4 bytes, target_cfg.o(.text.pinmux_conf_init_ns))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pinmux_conf_init_ns
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppc_init_cfg
</UL>

<P><STRONG><a name="[40c]"></a>ppc_init_cfg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, target_cfg.o(.text.ppc_init_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ppc_init_cfg &rArr; pinmux_conf_init_ns
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_conf_init_ns
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_init_isolation_hw
</UL>

<P><STRONG><a name="[313]"></a>psa_get_key_slot</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, psa_crypto_slot_management.o(.text.psa_get_key_slot))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_get_key_policy
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_get_key_lifetime
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_get_key_information
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_destroy_key
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_from_slot
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_empty_key_slot
</UL>

<P><STRONG><a name="[340]"></a>psa_import_key_into_slot</STRONG> (Thumb, 524 bytes, Stack size 64 bytes, psa_crypto.o(.text.psa_import_key_into_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376 + Unknown Stack Size
<LI>Call Chain = psa_import_key_into_slot &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_ec_public_key
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_raw_data_slot
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecc_group_of_psa
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_import_key
</UL>

<P><STRONG><a name="[310]"></a>psa_initialize_key_slots</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, psa_crypto_slot_management.o(.text.psa_initialize_key_slots))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_crypto_init
</UL>

<P><STRONG><a name="[3e9]"></a>psa_wipe_all_key_slots</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psa_crypto_slot_management.o(.text.psa_wipe_all_key_slots))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = psa_wipe_all_key_slots &rArr; psa_wipe_key_slot &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_wipe_key_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_psa_crypto_free
</UL>

<P><STRONG><a name="[314]"></a>psa_wipe_key_slot</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, psa_crypto.o(.text.psa_wipe_key_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = psa_wipe_key_slot &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_wipe_all_key_slots
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_destroy_key
</UL>

<P><STRONG><a name="[49e]"></a>sau_and_idau_cfg</STRONG> (Thumb, 204 bytes, Stack size 4 bytes, target_cfg.o(.text.sau_and_idau_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sau_and_idau_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_init_isolation_hw
</UL>

<P><STRONG><a name="[415]"></a>sst_crypto_auth_and_decrypt</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, sst_crypto_interface.o(.text.sst_crypto_auth_and_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = sst_crypto_auth_and_decrypt &rArr; psa_aead_decrypt &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_decrypt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_read
</UL>

<P><STRONG><a name="[417]"></a>sst_crypto_authenticate</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, sst_crypto_interface.o(.text.sst_crypto_authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sst_crypto_authenticate &rArr; psa_aead_decrypt &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_init
</UL>

<P><STRONG><a name="[418]"></a>sst_crypto_destroykey</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sst_crypto_interface.o(.text.sst_crypto_destroykey))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sst_crypto_destroykey &rArr; psa_destroy_key &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_destroy_key
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_write
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_read
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_save_table
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_init
</UL>

<P><STRONG><a name="[419]"></a>sst_crypto_encrypt_and_tag</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, sst_crypto_interface.o(.text.sst_crypto_encrypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sst_crypto_encrypt_and_tag &rArr; psa_aead_encrypt &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_encrypt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_write
</UL>

<P><STRONG><a name="[41b]"></a>sst_crypto_generate_auth_tag</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, sst_crypto_interface.o(.text.sst_crypto_generate_auth_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sst_crypto_generate_auth_tag &rArr; psa_aead_encrypt &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_save_table
</UL>

<P><STRONG><a name="[41c]"></a>sst_crypto_get_iv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sst_crypto_interface.o(.text.sst_crypto_get_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sst_crypto_get_iv
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_write
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_save_table
</UL>

<P><STRONG><a name="[41d]"></a>sst_crypto_getkey</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sst_crypto_interface.o(.text.sst_crypto_getkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sst_crypto_getkey &rArr; tfm_plat_get_crypto_huk
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_get_crypto_huk
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_set_encryption_key
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_set_crypto_key
</UL>

<P><STRONG><a name="[41f]"></a>sst_crypto_set_iv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sst_crypto_interface.o(.text.sst_crypto_set_iv))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_init
</UL>

<P><STRONG><a name="[420]"></a>sst_crypto_setkey</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, sst_crypto_interface.o(.text.sst_crypto_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = sst_crypto_setkey &rArr; psa_import_key &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_set_key_policy
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_policy_set_usage
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_allocate_key
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_set_encryption_key
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_set_crypto_key
</UL>

<P><STRONG><a name="[423]"></a>sst_encrypted_object_read</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, sst_encrypted_object.o(.text.sst_encrypted_object_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = sst_encrypted_object_read &rArr; sst_crypto_auth_and_decrypt &rArr; psa_aead_decrypt &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_read
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_get_info
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_set_encryption_key
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_destroykey
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_auth_and_decrypt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_read
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_get_info
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_delete
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_create
</UL>

<P><STRONG><a name="[427]"></a>sst_encrypted_object_write</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, sst_encrypted_object.o(.text.sst_encrypted_object_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sst_encrypted_object_write &rArr; sst_flash_fs_file_create &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_create
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_set_encryption_key
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_get_iv
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_encrypt_and_tag
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_destroykey
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_create
</UL>

<P><STRONG><a name="[42c]"></a>sst_flash_block_to_block_move</STRONG> (Thumb, 96 bytes, Stack size 296 bytes, sst_flash.o(.text.sst_flash_block_to_block_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sst_flash_block_to_block_move
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_update_scratch_block_meta
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_migrate_lb0_data_to_scratch
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_cp_remaining_file_meta
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_cp_remaining_data
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_compact_block
</UL>

<P><STRONG><a name="[446]"></a>sst_flash_erase_block</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sst_flash.o(.text.sst_flash_erase_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sst_flash_erase_block
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_mblock_erase_scratch_blocks
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_reset_metablock
</UL>

<P><STRONG><a name="[42a]"></a>sst_flash_fs_dblock_compact_block</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, sst_flash_fs_dblock.o(.text.sst_flash_fs_dblock_compact_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sst_flash_fs_dblock_compact_block &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_update_scratch_block_meta
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_set_data_scratch
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_read_block_metadata
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_cur_data_scratch_id
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_block_to_block_move
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_delete
</UL>

<P><STRONG><a name="[42f]"></a>sst_flash_fs_dblock_cp_remaining_data</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sst_flash_fs_dblock.o(.text.sst_flash_fs_dblock_cp_remaining_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sst_flash_fs_dblock_cp_remaining_data &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_cur_data_scratch_id
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_block_to_block_move
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_create
</UL>

<P><STRONG><a name="[430]"></a>sst_flash_fs_dblock_read_file</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sst_flash_fs_dblock.o(.text.sst_flash_fs_dblock_read_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sst_flash_fs_dblock_read_file &rArr; sst_dblock_lo_to_phy &rArr; sst_flash_fs_mblock_read_block_metadata &rArr; sst_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_dblock_lo_to_phy
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_read
</UL>

<P><STRONG><a name="[432]"></a>sst_flash_fs_dblock_write_file</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sst_flash_fs_dblock.o(.text.sst_flash_fs_dblock_write_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sst_flash_fs_dblock_write_file &rArr; sst_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_cur_data_scratch_id
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write_aligned_data
</UL>

<P><STRONG><a name="[428]"></a>sst_flash_fs_file_create</STRONG> (Thumb, 160 bytes, Stack size 80 bytes, sst_flash_fs.o(.text.sst_flash_fs_file_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = sst_flash_fs_file_create &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_update_scratch_file_meta
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_update_scratch_block_meta
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_set_data_scratch
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_reserve_file
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_migrate_lb0_data_to_scratch
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_meta_update_finalize
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_get_file_idx
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_cur_data_scratch_id
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_cp_remaining_file_meta
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_cp_remaining_data
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write_aligned_data
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_write
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_save_table
</UL>

<P><STRONG><a name="[43b]"></a>sst_flash_fs_file_delete</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, sst_flash_fs.o(.text.sst_flash_fs_file_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sst_flash_fs_file_delete &rArr; sst_flash_fs_dblock_compact_block &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_utils_validate_fid
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_update_scratch_file_meta
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_read_file_meta
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_migrate_lb0_data_to_scratch
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_meta_update_finalize
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_get_file_idx
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_compact_block
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_init
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_get_free_fid
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_delete_old_table
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_create
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_remove_old_data
</UL>

<P><STRONG><a name="[43e]"></a>sst_flash_fs_file_exist</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sst_flash_fs.o(.text.sst_flash_fs_file_exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sst_flash_fs_file_exist &rArr; sst_flash_fs_mblock_get_file_idx &rArr; sst_flash_fs_mblock_read_file_meta &rArr; sst_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_get_file_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_get_free_fid
</UL>

<P><STRONG><a name="[424]"></a>sst_flash_fs_file_get_info</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, sst_flash_fs.o(.text.sst_flash_fs_file_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sst_flash_fs_file_get_info &rArr; sst_flash_fs_mblock_get_file_idx &rArr; sst_flash_fs_mblock_read_file_meta &rArr; sst_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_read_file_meta
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_get_file_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_read
</UL>

<P><STRONG><a name="[425]"></a>sst_flash_fs_file_read</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, sst_flash_fs.o(.text.sst_flash_fs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sst_flash_fs_file_read &rArr; sst_flash_fs_mblock_get_file_idx &rArr; sst_flash_fs_mblock_read_file_meta &rArr; sst_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_utils_check_contained_in
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_read_file_meta
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_get_file_idx
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_read_file
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_read
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_init
</UL>

<P><STRONG><a name="[429]"></a>sst_flash_fs_file_write</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, sst_flash_fs.o(.text.sst_flash_fs_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = sst_flash_fs_file_write &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_update_scratch_file_meta
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_update_scratch_block_meta
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_set_data_scratch
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_read_file_meta
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_read_block_metadata
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_migrate_lb0_data_to_scratch
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_meta_update_finalize
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_get_file_idx
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_cur_data_scratch_id
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_cp_remaining_file_meta
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_cp_remaining_data
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write_aligned_data
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_write
</UL>

<P><STRONG><a name="[438]"></a>sst_flash_fs_mblock_cp_remaining_file_meta</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sst_flash_fs_mblock.o(.text.sst_flash_fs_mblock_cp_remaining_file_meta))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sst_flash_fs_mblock_cp_remaining_file_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_block_to_block_move
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_create
</UL>

<P><STRONG><a name="[42b]"></a>sst_flash_fs_mblock_cur_data_scratch_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sst_flash_fs_mblock.o(.text.sst_flash_fs_mblock_cur_data_scratch_id))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_create
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_write_file
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_cp_remaining_data
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_compact_block
</UL>

<P><STRONG><a name="[434]"></a>sst_flash_fs_mblock_get_file_idx</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, sst_flash_fs_mblock.o(.text.sst_flash_fs_mblock_get_file_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sst_flash_fs_mblock_get_file_idx &rArr; sst_flash_fs_mblock_read_file_meta &rArr; sst_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_read_file_meta
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_read
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_get_info
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_create
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_exist
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_delete
</UL>

<P><STRONG><a name="[440]"></a>sst_flash_fs_mblock_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sst_flash_fs_mblock.o(.text.sst_flash_fs_mblock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sst_flash_fs_mblock_init &rArr; sst_init_get_active_metablock &rArr; sst_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_mblock_erase_scratch_blocks
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_init_get_active_metablock
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_read
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_prepare
</UL>

<P><STRONG><a name="[43a]"></a>sst_flash_fs_mblock_meta_update_finalize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sst_flash_fs_mblock.o(.text.sst_flash_fs_mblock_meta_update_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sst_flash_fs_mblock_meta_update_finalize &rArr; sst_mblock_write_scratch_meta_header &rArr; sst_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_mblock_write_scratch_meta_header
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_mblock_erase_scratch_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_create
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_delete
</UL>

<P><STRONG><a name="[439]"></a>sst_flash_fs_mblock_migrate_lb0_data_to_scratch</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, sst_flash_fs_mblock.o(.text.sst_flash_fs_mblock_migrate_lb0_data_to_scratch))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sst_flash_fs_mblock_migrate_lb0_data_to_scratch &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_read_block_metadata
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_block_to_block_move
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_create
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_delete
</UL>

<P><STRONG><a name="[422]"></a>sst_flash_fs_mblock_read_block_metadata</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sst_flash_fs_mblock.o(.text.sst_flash_fs_mblock_read_block_metadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sst_flash_fs_mblock_read_block_metadata &rArr; sst_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_dblock_lo_to_phy
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_update_scratch_block_meta
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_reserve_file
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_migrate_lb0_data_to_scratch
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_compact_block
</UL>

<P><STRONG><a name="[43c]"></a>sst_flash_fs_mblock_read_file_meta</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sst_flash_fs_mblock.o(.text.sst_flash_fs_mblock_read_file_meta))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sst_flash_fs_mblock_read_file_meta &rArr; sst_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_read
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_get_info
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_reserve_file
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_get_file_idx
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_delete
</UL>

<P><STRONG><a name="[435]"></a>sst_flash_fs_mblock_reserve_file</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, sst_flash_fs_mblock.o(.text.sst_flash_fs_mblock_reserve_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sst_flash_fs_mblock_reserve_file &rArr; sst_flash_fs_mblock_read_file_meta &rArr; sst_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_utils_validate_fid
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_read_file_meta
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_read_block_metadata
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_create
</UL>

<P><STRONG><a name="[445]"></a>sst_flash_fs_mblock_reset_metablock</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, sst_flash_fs_mblock.o(.text.sst_flash_fs_mblock_reset_metablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sst_flash_fs_mblock_reset_metablock &rArr; sst_init_get_active_metablock &rArr; sst_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_mblock_write_scratch_meta_header
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_mblock_update_scratch_file_meta
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_mblock_update_scratch_block_meta
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_init_get_active_metablock
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_erase_block
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_wipe_all
</UL>

<P><STRONG><a name="[42d]"></a>sst_flash_fs_mblock_set_data_scratch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sst_flash_fs_mblock.o(.text.sst_flash_fs_mblock_set_data_scratch))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_create
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_compact_block
</UL>

<P><STRONG><a name="[42e]"></a>sst_flash_fs_mblock_update_scratch_block_meta</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, sst_flash_fs_mblock.o(.text.sst_flash_fs_mblock_update_scratch_block_meta))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_mblock_update_scratch_block_meta
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_read_block_metadata
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_block_to_block_move
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_create
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_compact_block
</UL>

<P><STRONG><a name="[437]"></a>sst_flash_fs_mblock_update_scratch_file_meta</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sst_flash_fs_mblock.o(.text.sst_flash_fs_mblock_update_scratch_file_meta))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sst_flash_fs_mblock_update_scratch_file_meta &rArr; sst_mblock_update_scratch_file_meta &rArr; sst_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_mblock_update_scratch_file_meta
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_create
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_delete
</UL>

<P><STRONG><a name="[449]"></a>sst_flash_fs_prepare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sst_flash_fs.o(.text.sst_flash_fs_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sst_flash_fs_prepare &rArr; sst_flash_fs_mblock_init &rArr; sst_init_get_active_metablock &rArr; sst_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_system_wipe_all
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_system_prepare
</UL>

<P><STRONG><a name="[44a]"></a>sst_flash_fs_wipe_all</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sst_flash_fs.o(.text.sst_flash_fs_wipe_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sst_flash_fs_wipe_all &rArr; sst_flash_fs_mblock_reset_metablock &rArr; sst_init_get_active_metablock &rArr; sst_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_reset_metablock
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_system_wipe_all
</UL>

<P><STRONG><a name="[441]"></a>sst_flash_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sst_flash.o(.text.sst_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sst_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_init
</UL>

<P><STRONG><a name="[431]"></a>sst_flash_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sst_flash.o(.text.sst_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sst_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_init_get_active_metablock
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_read_file_meta
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_read_block_metadata
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_read_file
</UL>

<P><STRONG><a name="[433]"></a>sst_flash_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sst_flash.o(.text.sst_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sst_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_mblock_write_scratch_meta_header
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_mblock_update_scratch_file_meta
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_mblock_update_scratch_block_meta
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_write_file
</UL>

<P><STRONG><a name="[44b]"></a>sst_object_create</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, sst_object_system.o(.text.sst_object_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = sst_object_create &rArr; sst_object_table_set_obj_tbl_info &rArr; sst_object_table_save_table &rArr; sst_flash_fs_file_create &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_write
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_read
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_req_mngr_read_asset_data
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_set_obj_tbl_info
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_get_obj_tbl_info
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_get_free_fid
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_delete_old_table
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_remove_old_data
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_delete
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_set
</UL>

<P><STRONG><a name="[452]"></a>sst_object_delete</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, sst_object_system.o(.text.sst_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sst_object_delete &rArr; sst_object_table_delete_object &rArr; sst_object_table_save_table &rArr; sst_flash_fs_file_create &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_read
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_get_obj_tbl_info
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_delete_object
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_remove_old_data
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_remove
</UL>

<P><STRONG><a name="[454]"></a>sst_object_get_info</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sst_object_system.o(.text.sst_object_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = sst_object_get_info &rArr; sst_encrypted_object_read &rArr; sst_crypto_auth_and_decrypt &rArr; psa_aead_decrypt &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_read
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_get_obj_tbl_info
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_get_info
</UL>

<P><STRONG><a name="[455]"></a>sst_object_read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sst_object_system.o(.text.sst_object_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = sst_object_read &rArr; sst_encrypted_object_read &rArr; sst_crypto_auth_and_decrypt &rArr; psa_aead_decrypt &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_read
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_req_mngr_write_asset_data
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_get_obj_tbl_info
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_utils_check_contained_in
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_get
</UL>

<P><STRONG><a name="[457]"></a>sst_object_table_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sst_object_table.o(.text.sst_object_table_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = sst_object_table_create &rArr; sst_object_table_save_table &rArr; sst_flash_fs_file_create &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_save_table
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_system_wipe_all
</UL>

<P><STRONG><a name="[453]"></a>sst_object_table_delete_object</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, sst_object_table.o(.text.sst_object_table_delete_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = sst_object_table_delete_object &rArr; sst_object_table_save_table &rArr; sst_flash_fs_file_create &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_save_table
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_get_object_entry_idx
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_delete
</UL>

<P><STRONG><a name="[451]"></a>sst_object_table_delete_old_table</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sst_object_table.o(.text.sst_object_table_delete_old_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sst_object_table_delete_old_table &rArr; sst_flash_fs_file_delete &rArr; sst_flash_fs_dblock_compact_block &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_create
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_remove_old_data
</UL>

<P><STRONG><a name="[44e]"></a>sst_object_table_get_free_fid</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sst_object_table.o(.text.sst_object_table_get_free_fid))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = sst_object_table_get_free_fid &rArr; sst_flash_fs_file_delete &rArr; sst_flash_fs_dblock_compact_block &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_exist
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_create
</UL>

<P><STRONG><a name="[44c]"></a>sst_object_table_get_obj_tbl_info</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sst_object_table.o(.text.sst_object_table_get_obj_tbl_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sst_object_table_get_obj_tbl_info &rArr; sst_get_object_entry_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_get_object_entry_idx
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_read
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_get_info
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_delete
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_create
</UL>

<P><STRONG><a name="[45a]"></a>sst_object_table_init</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, sst_object_table.o(.text.sst_object_table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = sst_object_table_init &rArr; sst_flash_fs_file_delete &rArr; sst_flash_fs_dblock_compact_block &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_read
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_set_iv
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_destroykey
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_authenticate
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_set_crypto_key
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_delete
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_system_prepare
</UL>

<P><STRONG><a name="[44f]"></a>sst_object_table_set_obj_tbl_info</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, sst_object_table.o(.text.sst_object_table_set_obj_tbl_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sst_object_table_set_obj_tbl_info &rArr; sst_object_table_save_table &rArr; sst_flash_fs_file_create &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_save_table
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_get_object_entry_idx
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_create
</UL>

<P><STRONG><a name="[44d]"></a>sst_req_mngr_read_asset_data</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tfm_sst_req_mngr.o(.text.sst_req_mngr_read_asset_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sst_req_mngr_read_asset_data
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_read
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_create
</UL>

<P><STRONG><a name="[456]"></a>sst_req_mngr_write_asset_data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tfm_sst_req_mngr.o(.text.sst_req_mngr_write_asset_data))
<BR><BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_write
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_read
</UL>

<P><STRONG><a name="[45e]"></a>sst_system_prepare</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sst_object_system.o(.text.sst_system_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sst_system_prepare &rArr; sst_object_table_init &rArr; sst_flash_fs_file_delete &rArr; sst_flash_fs_dblock_compact_block &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_init
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_init
</UL>

<P><STRONG><a name="[45f]"></a>sst_system_wipe_all</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sst_object_system.o(.text.sst_system_wipe_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sst_system_wipe_all &rArr; sst_object_table_create &rArr; sst_object_table_save_table &rArr; sst_flash_fs_file_create &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_create
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_wipe_all
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_init
</UL>

<P><STRONG><a name="[43f]"></a>sst_utils_check_contained_in</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sst_utils.o(.text.sst_utils_check_contained_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sst_utils_check_contained_in
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_read
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_read
</UL>

<P><STRONG><a name="[43d]"></a>sst_utils_validate_fid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sst_utils.o(.text.sst_utils_validate_fid))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_reserve_file
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_delete
</UL>

<P><STRONG><a name="[471]"></a>stdio_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_stdout.o(.text.stdio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stdio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_init
</UL>

<P><STRONG><a name="[277]"></a>t_cose_crypto_hash_finish</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, t_cose_psa_crypto_hash.o(.text.t_cose_crypto_hash_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = t_cose_crypto_hash_finish &rArr; psa_hash_finish &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tbs_hash
</UL>

<P><STRONG><a name="[275]"></a>t_cose_crypto_hash_start</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, t_cose_psa_crypto_hash.o(.text.t_cose_crypto_hash_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = t_cose_crypto_hash_start &rArr; psa_hash_setup &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tbs_hash
</UL>

<P><STRONG><a name="[276]"></a>t_cose_crypto_hash_update</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, t_cose_psa_crypto_hash.o(.text.t_cose_crypto_hash_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = t_cose_crypto_hash_update &rArr; psa_hash_update &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_update
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tbs_hash
</UL>

<P><STRONG><a name="[463]"></a>t_cose_crypto_pub_key_sign</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, t_cose_psa_crypto_sign.o(.text.t_cose_crypto_pub_key_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = t_cose_crypto_pub_key_sign &rArr; attest_register_initial_attestation_private_key &rArr; psa_import_key &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_unregister_initial_attestation_private_key
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_register_initial_attestation_private_key
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_finish
</UL>

<P><STRONG><a name="[262]"></a>t_cose_sign1_finish</STRONG> (Thumb, 108 bytes, Stack size 152 bytes, t_cose_sign1_sign.o(.text.t_cose_sign1_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = t_cose_sign1_finish &rArr; create_tbs_hash &rArr; t_cose_crypto_hash_finish &rArr; psa_hash_finish &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_CloseMapOrArray
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tbs_hash
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddBytes
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_crypto_pub_key_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_finish
</UL>

<P><STRONG><a name="[263]"></a>t_cose_sign1_init</STRONG> (Thumb, 166 bytes, Stack size 184 bytes, t_cose_sign1_sign.o(.text.t_cose_sign1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = t_cose_sign1_init &rArr; QCBOREncode_AddBytes &rArr; QCBOREncode_AddBuffer &rArr; AppendEncodedTypeAndNumber &rArr; InsertEncodedTypeAndNumber &rArr; UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_OpenMapOrArray
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_Finish
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddInt64
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddTag
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_alg_id_from_sig_alg_id
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_OpenMap
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_CloseMap
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_start
</UL>

<P><STRONG><a name="[4b0]"></a>tfm_arch_initialize_ctx_ext</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tfm_arch_v8m_main.o(.text.tfm_arch_initialize_ctx_ext))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_start
</UL>

<P><STRONG><a name="[2d7]"></a>tfm_arch_prioritize_secure_exception</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tfm_arch_v8m_main.o(.text.tfm_arch_prioritize_secure_exception))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[254]"></a>tfm_attest_hal_get_security_lifecycle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, attest_hal.o(.text.tfm_attest_hal_get_security_lifecycle))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>

<P><STRONG><a name="[22c]"></a>tfm_bitcount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tfm_secure_api.o(.text.tfm_bitcount))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>

<P><STRONG><a name="[46a]"></a>tfm_core_get_boot_data_handler</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, tfm_boot_data.o(.text.tfm_core_get_boot_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tfm_core_get_boot_data_handler &rArr; tfm_core_util_memcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_partition_get_privileged_mode
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_running_partition
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_memory_check
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_util_memcpy
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_check_boot_data_access_policy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_svc_handler
</UL>

<P><STRONG><a name="[46b]"></a>tfm_core_get_boot_value_handler</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, tfm_boot_data.o(.text.tfm_core_get_boot_value_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tfm_core_get_boot_value_handler &rArr; tfm_memory_check &rArr; tfm_core_has_write_access_to_region &rArr; has_access_to_region &rArr; check_address_range
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_partition_get_privileged_mode
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_running_partition
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_memory_check
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_check_boot_data_access_policy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_svc_handler
</UL>

<P><STRONG><a name="[46c]"></a>tfm_core_has_read_access_to_region</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tfm_core_mem_check.o(.text.tfm_core_has_read_access_to_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tfm_core_has_read_access_to_region &rArr; has_access_to_region &rArr; check_address_range
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_access_to_region
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_memory_check
</UL>

<P><STRONG><a name="[46d]"></a>tfm_core_has_write_access_to_region</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tfm_core_mem_check.o(.text.tfm_core_has_write_access_to_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tfm_core_has_write_access_to_region &rArr; has_access_to_region &rArr; check_address_range
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_access_to_region
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_memory_check
</UL>

<P><STRONG><a name="[2d4]"></a>tfm_core_init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, tfm_core.o(.text.tfm_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tfm_core_init &rArr; tfm_spm_hal_init_isolation_hw &rArr; mpc_init_cfg &rArr; unsecure_sram1 &rArr; HAL_GTZC_MPCBB_GetConfigMem
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_init_debug
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_system_reset_cfg
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_set_secure_irq_priority
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_set_irq_target_state
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_nvic_interrupt_target_state_cfg
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_nvic_interrupt_enable
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_init_isolation_hw
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_enable_fault_handlers
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdio_init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_ns_code
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_validate_boot_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>tfm_core_log_puts</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tfm_core_log.o(.text.tfm_core_log_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tfm_core_log_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 7]<UL><LI> spm_hal.o(.text.tfm_spm_hal_setup_isolation_hw)
<LI> tfm_arch_v8m_main.o(.text.SecureFault_Handler)
<LI> tfm_core.o(.text.tfm_core_init)
<LI> tfm_core_svcalls_ipc.o(.text.tfm_core_svc_handler)
<LI> tfm_svcalls.o(.text.SVC_Handler_IPC)
<LI> tfm_veneers.o(SFN)
<LI> tfm_secure_api.o(.text.tfm_secure_api_error_handler)
</UL>
<P><STRONG><a name="[221]"></a>tfm_core_svc_handler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tfm_core_svcalls_ipc.o(.text.tfm_core_svc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = tfm_core_svc_handler &rArr; SVC_Handler_IPC &rArr; tfm_svcall_psa_call &rArr; tfm_spm_fill_msg &rArr; tfm_spm_get_rhandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_psa_ipc_request_handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_value_handler
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_data_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[231]"></a>tfm_core_util_memcpy</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, tfm_core_utils.o(.text.tfm_core_util_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tfm_core_util_memcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_context_switch
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_data_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_call
</UL>

<P><STRONG><a name="[48e]"></a>tfm_core_util_memset</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, tfm_core_utils.o(.text.tfm_core_util_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tfm_core_util_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_start
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_fill_msg
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_pool_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_call
</UL>

<P><STRONG><a name="[472]"></a>tfm_core_validate_boot_data</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tfm_boot_data.o(.text.tfm_core_validate_boot_data))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_init
</UL>

<P><STRONG><a name="[11e]"></a>tfm_crypto_aead_decrypt</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, crypto_aead.o(.text.tfm_crypto_aead_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = tfm_crypto_aead_decrypt &rArr; mbedcrypto__psa_aead_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_aead_decrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[11d]"></a>tfm_crypto_aead_encrypt</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, crypto_aead.o(.text.tfm_crypto_aead_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = tfm_crypto_aead_encrypt &rArr; mbedcrypto__psa_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; mbedtls_ccm_star_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_aead_encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[100]"></a>tfm_crypto_allocate_key</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, crypto_key.o(.text.tfm_crypto_allocate_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tfm_crypto_allocate_key &rArr; mbedcrypto__psa_allocate_key &rArr; psa_internal_allocate_key_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_get_caller_id
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_allocate_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[122]"></a>tfm_crypto_asymmetric_decrypt</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, crypto_asymmetric.o(.text.tfm_crypto_asymmetric_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = tfm_crypto_asymmetric_decrypt &rArr; mbedcrypto__psa_asymmetric_decrypt &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_decrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[121]"></a>tfm_crypto_asymmetric_encrypt</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, crypto_asymmetric.o(.text.tfm_crypto_asymmetric_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tfm_crypto_asymmetric_encrypt &rArr; mbedcrypto__psa_asymmetric_encrypt &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_get_key_information
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[11f]"></a>tfm_crypto_asymmetric_sign</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, crypto_asymmetric.o(.text.tfm_crypto_asymmetric_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tfm_crypto_asymmetric_sign &rArr; mbedcrypto__psa_asymmetric_sign &rArr; mbedtls_ecdsa_sign_det &rArr; ecdsa_sign_det_restartable &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_privkey &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[120]"></a>tfm_crypto_asymmetric_verify</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, crypto_asymmetric.o(.text.tfm_crypto_asymmetric_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = tfm_crypto_asymmetric_verify &rArr; mbedcrypto__psa_asymmetric_verify &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_verify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[478]"></a>tfm_crypto_check_handle_owner</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, crypto_key.o(.text.tfm_crypto_check_handle_owner))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tfm_crypto_check_handle_owner
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_get_caller_id
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_asymmetric_verify
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_asymmetric_sign
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_asymmetric_encrypt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_asymmetric_decrypt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_aead_encrypt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_aead_decrypt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_set_key_policy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_verify_setup
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_sign_setup
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_import_key
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_destroy_key
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_key_derivation
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_key_agreement
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_generator_import_key
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_generate_key
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_encrypt_setup
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_decrypt_setup
</UL>

<P><STRONG><a name="[10f]"></a>tfm_crypto_cipher_abort</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, crypto_cipher.o(.text.tfm_crypto_cipher_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tfm_crypto_cipher_abort &rArr; tfm_crypto_operation_release &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[10d]"></a>tfm_crypto_cipher_decrypt_setup</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, crypto_cipher.o(.text.tfm_crypto_cipher_decrypt_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tfm_crypto_cipher_decrypt_setup &rArr; mbedcrypto__psa_cipher_decrypt_setup &rArr; psa_cipher_setup &rArr; psa_get_key_from_slot &rArr; psa_key_algorithm_permits
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_alloc
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_decrypt_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[10c]"></a>tfm_crypto_cipher_encrypt_setup</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, crypto_cipher.o(.text.tfm_crypto_cipher_encrypt_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tfm_crypto_cipher_encrypt_setup &rArr; mbedcrypto__psa_cipher_encrypt_setup &rArr; psa_cipher_setup &rArr; psa_get_key_from_slot &rArr; psa_key_algorithm_permits
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_alloc
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_encrypt_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[110]"></a>tfm_crypto_cipher_finish</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, crypto_cipher.o(.text.tfm_crypto_cipher_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tfm_crypto_cipher_finish &rArr; mbedcrypto__psa_cipher_finish &rArr; mbedtls_cipher_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[10a]"></a>tfm_crypto_cipher_generate_iv</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, crypto_cipher.o(.text.tfm_crypto_cipher_generate_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = tfm_crypto_cipher_generate_iv &rArr; mbedcrypto__psa_cipher_generate_iv &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_generate_iv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[10b]"></a>tfm_crypto_cipher_set_iv</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, crypto_cipher.o(.text.tfm_crypto_cipher_set_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tfm_crypto_cipher_set_iv &rArr; tfm_crypto_operation_release &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_set_iv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[10e]"></a>tfm_crypto_cipher_update</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, crypto_cipher.o(.text.tfm_crypto_cipher_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tfm_crypto_cipher_update &rArr; mbedcrypto__psa_cipher_update &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[106]"></a>tfm_crypto_copy_key</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, crypto_key.o(.text.tfm_crypto_copy_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456 + Unknown Stack Size
<LI>Call Chain = tfm_crypto_copy_key &rArr; mbedcrypto__psa_copy_key &rArr; mbedcrypto__psa_import_key &rArr; psa_import_key_into_slot &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_copy_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[102]"></a>tfm_crypto_destroy_key</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, crypto_key.o(.text.tfm_crypto_destroy_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tfm_crypto_destroy_key &rArr; mbedcrypto__psa_destroy_key &rArr; psa_wipe_key_slot &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_destroy_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[104]"></a>tfm_crypto_export_key</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, crypto_key.o(.text.tfm_crypto_export_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tfm_crypto_export_key &rArr; mbedcrypto__psa_export_key &rArr; psa_internal_export_key &rArr; mbedtls_pk_write_key_der &rArr; pk_write_ec_pubkey &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_export_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[105]"></a>tfm_crypto_export_public_key</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, crypto_key.o(.text.tfm_crypto_export_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = tfm_crypto_export_public_key &rArr; mbedcrypto__psa_export_public_key &rArr; psa_internal_export_key &rArr; mbedtls_pk_write_key_der &rArr; pk_write_ec_pubkey &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_export_public_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[12a]"></a>tfm_crypto_generate_key</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, crypto_generator.o(.text.tfm_crypto_generate_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352<LI>Call Chain = tfm_crypto_generate_key &rArr; mbedcrypto__psa_generate_key &rArr; mbedtls_rsa_gen_key &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime_ext &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[129]"></a>tfm_crypto_generate_random</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, crypto_generator.o(.text.tfm_crypto_generate_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = tfm_crypto_generate_random &rArr; mbedcrypto__psa_generate_random &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_random
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[126]"></a>tfm_crypto_generator_abort</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, crypto_generator.o(.text.tfm_crypto_generator_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tfm_crypto_generator_abort &rArr; tfm_crypto_operation_release &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[125]"></a>tfm_crypto_generator_import_key</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, crypto_generator.o(.text.tfm_crypto_generator_import_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456 + Unknown Stack Size
<LI>Call Chain = tfm_crypto_generator_import_key &rArr; mbedcrypto__psa_generator_import_key &rArr; mbedcrypto__psa_import_key &rArr; psa_import_key_into_slot &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_import_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[124]"></a>tfm_crypto_generator_read</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, crypto_generator.o(.text.tfm_crypto_generator_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = tfm_crypto_generator_read &rArr; mbedcrypto__psa_generator_read &rArr; psa_hmac_setup_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[479]"></a>tfm_crypto_get_caller_id</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, crypto_init.o(.text.tfm_crypto_get_caller_id))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_alloc
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_allocate_key
</UL>

<P><STRONG><a name="[123]"></a>tfm_crypto_get_generator_capacity</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, crypto_generator.o(.text.tfm_crypto_get_generator_capacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tfm_crypto_get_generator_capacity &rArr; tfm_crypto_operation_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_get_generator_capacity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[103]"></a>tfm_crypto_get_key_information</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, crypto_key.o(.text.tfm_crypto_get_key_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tfm_crypto_get_key_information &rArr; mbedcrypto__psa_get_key_information &rArr; psa_get_key_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_get_key_information
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[109]"></a>tfm_crypto_get_key_lifetime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, crypto_key.o(.text.tfm_crypto_get_key_lifetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tfm_crypto_get_key_lifetime &rArr; mbedcrypto__psa_get_key_lifetime
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_get_key_lifetime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[108]"></a>tfm_crypto_get_key_policy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, crypto_key.o(.text.tfm_crypto_get_key_policy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tfm_crypto_get_key_policy &rArr; mbedcrypto__psa_get_key_policy
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_get_key_policy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[115]"></a>tfm_crypto_hash_abort</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, crypto_hash.o(.text.tfm_crypto_hash_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tfm_crypto_hash_abort &rArr; tfm_crypto_operation_release &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[116]"></a>tfm_crypto_hash_clone</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, crypto_hash.o(.text.tfm_crypto_hash_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tfm_crypto_hash_clone &rArr; tfm_crypto_operation_release &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_alloc
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[113]"></a>tfm_crypto_hash_finish</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, crypto_hash.o(.text.tfm_crypto_hash_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = tfm_crypto_hash_finish &rArr; mbedcrypto__psa_hash_finish &rArr; mbedtls_sha512_finish_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[111]"></a>tfm_crypto_hash_setup</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, crypto_hash.o(.text.tfm_crypto_hash_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tfm_crypto_hash_setup &rArr; mbedcrypto__psa_hash_setup &rArr; mbedtls_sha256_starts_ret &rArr; HAL_HASH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_alloc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[112]"></a>tfm_crypto_hash_update</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, crypto_hash.o(.text.tfm_crypto_hash_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = tfm_crypto_hash_update &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[114]"></a>tfm_crypto_hash_verify</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, crypto_hash.o(.text.tfm_crypto_hash_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = tfm_crypto_hash_verify &rArr; mbedcrypto__psa_hash_verify &rArr; mbedcrypto__psa_hash_finish &rArr; mbedtls_sha512_finish_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_verify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[101]"></a>tfm_crypto_import_key</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, crypto_key.o(.text.tfm_crypto_import_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2424 + Unknown Stack Size
<LI>Call Chain = tfm_crypto_import_key &rArr; mbedcrypto__psa_import_key &rArr; psa_import_key_into_slot &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_import_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[12d]"></a>tfm_crypto_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, crypto_init.o(.text.tfm_crypto_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = tfm_crypto_init &rArr; mbedcrypto__psa_crypto_init &rArr; mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_init_alloc
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_crypto_init
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_ipc_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spm_api.o(.rodata.static_data_list)
</UL>
<P><STRONG><a name="[47e]"></a>tfm_crypto_init_alloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, crypto_alloc.o(.text.tfm_crypto_init_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tfm_crypto_init_alloc &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_init
</UL>

<P><STRONG><a name="[128]"></a>tfm_crypto_key_agreement</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, crypto_generator.o(.text.tfm_crypto_key_agreement))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824 + Unknown Stack Size
<LI>Call Chain = tfm_crypto_key_agreement &rArr; mbedcrypto__psa_key_agreement &rArr; psa_key_derivation_internal &rArr; psa_hmac_setup_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_alloc
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_agreement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[127]"></a>tfm_crypto_key_derivation</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, crypto_generator.o(.text.tfm_crypto_key_derivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = tfm_crypto_key_derivation &rArr; mbedcrypto__psa_key_derivation &rArr; psa_key_derivation_internal &rArr; psa_hmac_setup_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_alloc
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_derivation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[11c]"></a>tfm_crypto_mac_abort</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, crypto_mac.o(.text.tfm_crypto_mac_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tfm_crypto_mac_abort &rArr; tfm_crypto_operation_release &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[11a]"></a>tfm_crypto_mac_sign_finish</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, crypto_mac.o(.text.tfm_crypto_mac_sign_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = tfm_crypto_mac_sign_finish &rArr; mbedcrypto__psa_mac_sign_finish &rArr; psa_mac_finish_internal &rArr; psa_hmac_finish_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_sign_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[117]"></a>tfm_crypto_mac_sign_setup</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, crypto_mac.o(.text.tfm_crypto_mac_sign_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = tfm_crypto_mac_sign_setup &rArr; mbedcrypto__psa_mac_sign_setup &rArr; psa_mac_setup &rArr; psa_hmac_setup_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_alloc
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_sign_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[119]"></a>tfm_crypto_mac_update</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, crypto_mac.o(.text.tfm_crypto_mac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = tfm_crypto_mac_update &rArr; mbedcrypto__psa_mac_update &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[11b]"></a>tfm_crypto_mac_verify_finish</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, crypto_mac.o(.text.tfm_crypto_mac_verify_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = tfm_crypto_mac_verify_finish &rArr; mbedcrypto__psa_mac_verify_finish &rArr; psa_mac_finish_internal &rArr; psa_hmac_finish_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_lookup
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_verify_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[118]"></a>tfm_crypto_mac_verify_setup</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, crypto_mac.o(.text.tfm_crypto_mac_verify_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = tfm_crypto_mac_verify_setup &rArr; mbedcrypto__psa_mac_verify_setup &rArr; psa_mac_setup &rArr; psa_hmac_setup_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_alloc
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_verify_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[47c]"></a>tfm_crypto_operation_alloc</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, crypto_alloc.o(.text.tfm_crypto_operation_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tfm_crypto_operation_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_get_caller_id
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_verify_setup
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_sign_setup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_setup
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_clone
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_key_derivation
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_key_agreement
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_encrypt_setup
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_decrypt_setup
</UL>

<P><STRONG><a name="[47a]"></a>tfm_crypto_operation_lookup</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, crypto_alloc.o(.text.tfm_crypto_operation_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tfm_crypto_operation_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_get_caller_id
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_verify_finish
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_update
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_sign_finish
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_abort
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_verify
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_update
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_finish
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_clone
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_abort
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_get_generator_capacity
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_generator_read
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_generator_import_key
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_generator_abort
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_update
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_set_iv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_generate_iv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_finish
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_abort
</UL>

<P><STRONG><a name="[47b]"></a>tfm_crypto_operation_release</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, crypto_alloc.o(.text.tfm_crypto_operation_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tfm_crypto_operation_release &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_get_caller_id
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_verify_setup
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_verify_finish
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_update
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_sign_setup
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_sign_finish
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_mac_abort
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_verify
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_update
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_setup
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_finish
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_clone
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_hash_abort
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_key_derivation
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_key_agreement
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_generator_abort
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_update
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_set_iv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_generate_iv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_finish
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_encrypt_setup
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_decrypt_setup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_cipher_abort
</UL>

<P><STRONG><a name="[107]"></a>tfm_crypto_set_key_policy</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, crypto_key.o(.text.tfm_crypto_set_key_policy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tfm_crypto_set_key_policy &rArr; mbedcrypto__psa_set_key_policy &rArr; psa_get_empty_key_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_check_handle_owner
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_set_key_policy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_init.o(.rodata.sfid_func_table)
</UL>
<P><STRONG><a name="[227]"></a>tfm_event_wait</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tfm_wait.o(.text.tfm_event_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tfm_event_wait &rArr; tfm_thrd_set_status &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_curr_thread
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_set_status
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_activate_schedule
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_send_event
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>

<P><STRONG><a name="[237]"></a>tfm_event_wake</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tfm_wait.o(.text.tfm_event_wake))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tfm_event_wake &rArr; tfm_thrd_set_status &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_set_status
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_activate_schedule
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_send_event
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>

<P><STRONG><a name="[228]"></a>tfm_is_one_bit_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tfm_secure_api.o(.text.tfm_is_one_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_enable_irq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_disable_irq
</UL>

<P><STRONG><a name="[12c]"></a>tfm_its_req_mngr_init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tfm_its_req_mngr.o(.text.tfm_its_req_mngr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tfm_its_req_mngr_init &rArr; tfm_its_init &rArr; its_flash_fs_wipe_all &rArr; its_flash_fs_mblock_reset_metablock &rArr; its_init_get_active_metablock &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_wait
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_signal_handle
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spm_api.o(.rodata.static_data_list)
</UL>
<P><STRONG><a name="[22e]"></a>tfm_memory_check</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spm_api_ipc.o(.text.tfm_memory_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tfm_memory_check &rArr; tfm_core_has_write_access_to_region &rArr; has_access_to_region &rArr; check_address_range
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_has_write_access_to_region
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_has_read_access_to_region
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_value_handler
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_data_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_call
</UL>

<P><STRONG><a name="[230]"></a>tfm_msg_dequeue</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tfm_message_queue.o(.text.tfm_msg_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>

<P><STRONG><a name="[4a7]"></a>tfm_msg_enqueue</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tfm_message_queue.o(.text.tfm_msg_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_send_event
</UL>

<P><STRONG><a name="[232]"></a>tfm_msg_queue_is_empty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tfm_message_queue.o(.text.tfm_msg_queue_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>

<P><STRONG><a name="[494]"></a>tfm_nspm_get_current_client_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tfm_nspm_ipc.o(.text.tfm_nspm_get_current_client_id))
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_fill_msg
</UL>

<P><STRONG><a name="[226]"></a>tfm_panic</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tfm_utils.o(.text.tfm_panic))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_service_by_signal
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_free_conn_handle
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_value_handler
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_data_handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_svc_handler
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_connect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_close
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_call
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_enable_irq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_disable_irq
</UL>

<P><STRONG><a name="[214]"></a>tfm_pendsv_do_schedule</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, spm_api_ipc.o(.text.tfm_pendsv_do_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tfm_pendsv_do_schedule &rArr; tfm_thrd_context_switch &rArr; tfm_core_util_memcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_next_thread
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_curr_thread
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_context_switch
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_partition_change_privilege
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[492]"></a>tfm_pool_alloc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tfm_pools.o(.text.tfm_pool_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_create_conn_handle
</UL>

<P><STRONG><a name="[496]"></a>tfm_pool_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tfm_pools.o(.text.tfm_pool_free))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_free_conn_handle
</UL>

<P><STRONG><a name="[48d]"></a>tfm_pool_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tfm_pools.o(.text.tfm_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tfm_pool_init &rArr; tfm_core_util_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_util_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_init
</UL>

<P><STRONG><a name="[477]"></a>tfm_psa_ipc_request_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tfm_psa_api_veneers.o(.text.tfm_psa_ipc_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tfm_psa_ipc_request_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_svc_handler
</UL>

<P><STRONG><a name="[48f]"></a>tfm_secure_api_error_handler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tfm_secure_api.o(.text.tfm_secure_api_error_handler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_sst_set_req_veneer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_sst_remove_req_veneer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_sst_get_support_req_veneer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_sst_get_req_veneer
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_sst_get_info_req_veneer
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_its_set_req_veneer
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_its_remove_req_veneer
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_its_get_req_veneer
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_its_get_info_req_veneer
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_set_key_policy_veneer
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_mac_verify_setup_veneer
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_mac_verify_finish_veneer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_mac_update_veneer
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_mac_sign_setup_veneer
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_mac_sign_finish_veneer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_mac_abort_veneer
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_key_derivation_veneer
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_key_agreement_veneer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_import_key_veneer
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_hash_verify_veneer
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_hash_update_veneer
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_hash_setup_veneer
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_hash_finish_veneer
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_hash_clone_veneer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_hash_abort_veneer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_get_key_policy_veneer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_get_key_lifetime_veneer
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_get_key_information_veneer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_get_generator_capacity_veneer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_generator_read_veneer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_generator_import_key_veneer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_generator_abort_veneer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_generate_random_veneer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_generate_key_veneer
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_export_public_key_veneer
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_export_key_veneer
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_destroy_key_veneer
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_copy_key_veneer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_cipher_update_veneer
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_cipher_set_iv_veneer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_cipher_generate_iv_veneer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_cipher_finish_veneer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_cipher_encrypt_setup_veneer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_cipher_decrypt_setup_veneer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_cipher_abort_veneer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_asymmetric_verify_veneer
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_asymmetric_sign_veneer
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_asymmetric_encrypt_veneer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_asymmetric_decrypt_veneer
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_allocate_key_veneer
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_aead_encrypt_veneer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_aead_decrypt_veneer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_initial_attest_get_token_veneer
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_initial_attest_get_token_size_veneer
</UL>

<P><STRONG><a name="[490]"></a>tfm_spm_check_client_version</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, spm_api_ipc.o(.text.tfm_spm_check_client_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tfm_spm_check_client_version &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_connect
</UL>

<P><STRONG><a name="[491]"></a>tfm_spm_create_conn_handle</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, spm_api_ipc.o(.text.tfm_spm_create_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tfm_spm_create_conn_handle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_pool_alloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_connect
</UL>

<P><STRONG><a name="[2d5]"></a>tfm_spm_db_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spm_api.o(.text.tfm_spm_db_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tfm_spm_db_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[493]"></a>tfm_spm_fill_msg</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, spm_api_ipc.o(.text.tfm_spm_fill_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tfm_spm_fill_msg &rArr; tfm_spm_get_rhandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_partition_get_running_partition_id
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_rhandle
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_nspm_get_current_client_id
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_util_memset
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_connect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_close
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_call
</UL>

<P><STRONG><a name="[236]"></a>tfm_spm_free_conn_handle</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, spm_api_ipc.o(.text.tfm_spm_free_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tfm_spm_free_conn_handle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_pool_free
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>

<P><STRONG><a name="[497]"></a>tfm_spm_get_msg_buffer_from_conn_handle</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, spm_api_ipc.o(.text.tfm_spm_get_msg_buffer_from_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tfm_spm_get_msg_buffer_from_conn_handle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_connect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_close
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_call
</UL>

<P><STRONG><a name="[233]"></a>tfm_spm_get_msg_from_handle</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spm_api_ipc.o(.text.tfm_spm_get_msg_from_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tfm_spm_get_msg_from_handle &rArr; tfm_spm_partition_get_running_partition_id
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_partition_get_running_partition_id
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_chunk_data_in_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>

<P><STRONG><a name="[499]"></a>tfm_spm_get_partition_by_id</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spm_api_ipc.o(.text.tfm_spm_get_partition_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tfm_spm_get_partition_by_id &rArr; get_partition_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_partition_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_running_partition
</UL>

<P><STRONG><a name="[495]"></a>tfm_spm_get_rhandle</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spm_api_ipc.o(.text.tfm_spm_get_rhandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tfm_spm_get_rhandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_fill_msg
</UL>

<P><STRONG><a name="[225]"></a>tfm_spm_get_running_partition</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spm_api_ipc.o(.text.tfm_spm_get_running_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tfm_spm_get_running_partition &rArr; tfm_spm_get_partition_by_id &rArr; get_partition_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_partition_get_running_partition_id
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_partition_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_value_handler
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_data_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_call
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_enable_irq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_disable_irq
</UL>

<P><STRONG><a name="[4af]"></a>tfm_spm_get_service_by_handle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spm_api_ipc.o(.text.tfm_spm_get_service_by_handle))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_close
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_call
</UL>

<P><STRONG><a name="[49b]"></a>tfm_spm_get_service_by_sid</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spm_api_ipc.o(.text.tfm_spm_get_service_by_sid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tfm_spm_get_service_by_sid
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_partition_get_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_version
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_connect
</UL>

<P><STRONG><a name="[22f]"></a>tfm_spm_get_service_by_signal</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, spm_api_ipc.o(.text.tfm_spm_get_service_by_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tfm_spm_get_service_by_signal &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>

<P><STRONG><a name="[229]"></a>tfm_spm_hal_clear_pending_irq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spm_hal.o(.text.tfm_spm_hal_clear_pending_irq))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>

<P><STRONG><a name="[4a2]"></a>tfm_spm_hal_configure_default_isolation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spm_hal.o(.text.tfm_spm_hal_configure_default_isolation))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_init
</UL>

<P><STRONG><a name="[4ae]"></a>tfm_spm_hal_disable_irq</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spm_hal.o(.text.tfm_spm_hal_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_disable_irq
</UL>

<P><STRONG><a name="[46e]"></a>tfm_spm_hal_enable_fault_handlers</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spm_hal.o(.text.tfm_spm_hal_enable_fault_handlers))
<BR><BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_fault_handlers
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_init
</UL>

<P><STRONG><a name="[22a]"></a>tfm_spm_hal_enable_irq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spm_hal.o(.text.tfm_spm_hal_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_enable_irq
</UL>

<P><STRONG><a name="[271]"></a>tfm_spm_hal_get_ns_MSP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spm_hal.o(.text.tfm_spm_hal_get_ns_MSP))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_ns_code
</UL>

<P><STRONG><a name="[270]"></a>tfm_spm_hal_get_ns_VTOR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spm_hal.o(.text.tfm_spm_hal_get_ns_VTOR))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_ns_code
</UL>

<P><STRONG><a name="[272]"></a>tfm_spm_hal_get_ns_entry_point</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spm_hal.o(.text.tfm_spm_hal_get_ns_entry_point))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_ns_code
</UL>

<P><STRONG><a name="[470]"></a>tfm_spm_hal_init_debug</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, target_cfg.o(.text.tfm_spm_hal_init_debug))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_init
</UL>

<P><STRONG><a name="[473]"></a>tfm_spm_hal_init_isolation_hw</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spm_hal.o(.text.tfm_spm_hal_init_isolation_hw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tfm_spm_hal_init_isolation_hw &rArr; mpc_init_cfg &rArr; unsecure_sram1 &rArr; HAL_GTZC_MPCBB_GetConfigMem
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sau_and_idau_cfg
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppc_init_cfg
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpc_init_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_init
</UL>

<P><STRONG><a name="[476]"></a>tfm_spm_hal_nvic_interrupt_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spm_hal.o(.text.tfm_spm_hal_nvic_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_init
</UL>

<P><STRONG><a name="[474]"></a>tfm_spm_hal_nvic_interrupt_target_state_cfg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spm_hal.o(.text.tfm_spm_hal_nvic_interrupt_target_state_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_init
</UL>

<P><STRONG><a name="[475]"></a>tfm_spm_hal_set_irq_target_state</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, spm_hal.o(.text.tfm_spm_hal_set_irq_target_state))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_init
</UL>

<P><STRONG><a name="[273]"></a>tfm_spm_hal_set_ns_mpu</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spm_hal.o(.text.tfm_spm_hal_set_ns_mpu))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_ns_code
</UL>

<P><STRONG><a name="[2d8]"></a>tfm_spm_hal_set_secure_irq_priority</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spm_hal.o(.text.tfm_spm_hal_set_secure_irq_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tfm_spm_hal_set_secure_irq_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d6]"></a>tfm_spm_hal_setup_isolation_hw</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, spm_hal.o(.text.tfm_spm_hal_setup_isolation_hw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tfm_spm_hal_setup_isolation_hw &rArr; mpu_armv8m_region_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_armv8m_region_enable
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_armv8m_enable
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_armv8m_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46f]"></a>tfm_spm_hal_system_reset_cfg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spm_hal.o(.text.tfm_spm_hal_system_reset_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_init
</UL>

<P><STRONG><a name="[2d9]"></a>tfm_spm_init</STRONG> (Thumb, 240 bytes, Stack size 112 bytes, spm_api_ipc.o(.text.tfm_spm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tfm_spm_init &rArr; tfm_thrd_start &rArr; tfm_thrd_set_status &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_configure_default_isolation
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_start_scheduler
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_start
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_init
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_partition_by_id
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_pool_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_partition_get_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49c]"></a>tfm_spm_partition_get_flags</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spm_api.o(.text.tfm_spm_partition_get_flags))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_init
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_service_by_sid
</UL>

<P><STRONG><a name="[22d]"></a>tfm_spm_partition_get_privileged_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spm_api_ipc.o(.text.tfm_spm_partition_get_privileged_mode))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_value_handler
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_data_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_call
</UL>

<P><STRONG><a name="[469]"></a>tfm_spm_partition_get_running_partition_id</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spm_api_ipc.o(.text.tfm_spm_partition_get_running_partition_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tfm_spm_partition_get_running_partition_id
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_curr_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_running_partition
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_msg_from_handle
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_fill_msg
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_check_boot_data_access_policy
</UL>

<P><STRONG><a name="[4a6]"></a>tfm_spm_send_event</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, spm_api_ipc.o(.text.tfm_spm_send_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tfm_spm_send_event &rArr; tfm_event_wake &rArr; tfm_thrd_set_status &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_msg_enqueue
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_event_wake
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_event_wait
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_connect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_close
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_call
</UL>

<P><STRONG><a name="[234]"></a>tfm_spm_set_rhandle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, spm_api_ipc.o(.text.tfm_spm_set_rhandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tfm_spm_set_rhandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>

<P><STRONG><a name="[4a8]"></a>tfm_sst_get</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tfm_protected_storage.o(.text.tfm_sst_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = tfm_sst_get &rArr; sst_object_read &rArr; sst_encrypted_object_read &rArr; sst_crypto_auth_and_decrypt &rArr; psa_aead_decrypt &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_get_ipc
</UL>

<P><STRONG><a name="[4a9]"></a>tfm_sst_get_info</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tfm_protected_storage.o(.text.tfm_sst_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tfm_sst_get_info &rArr; sst_object_get_info &rArr; sst_encrypted_object_read &rArr; sst_crypto_auth_and_decrypt &rArr; psa_aead_decrypt &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_get_info
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_get_info_ipc
</UL>

<P><STRONG><a name="[4aa]"></a>tfm_sst_get_support</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tfm_protected_storage.o(.text.tfm_sst_get_support))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_get_support_ipc
</UL>

<P><STRONG><a name="[4ab]"></a>tfm_sst_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tfm_protected_storage.o(.text.tfm_sst_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tfm_sst_init &rArr; sst_system_prepare &rArr; sst_object_table_init &rArr; sst_flash_fs_file_delete &rArr; sst_flash_fs_dblock_compact_block &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_system_wipe_all
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_system_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_req_mngr_init
</UL>

<P><STRONG><a name="[4ac]"></a>tfm_sst_remove</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tfm_protected_storage.o(.text.tfm_sst_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tfm_sst_remove &rArr; sst_object_delete &rArr; sst_object_table_delete_object &rArr; sst_object_table_save_table &rArr; sst_flash_fs_file_create &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_remove_ipc
</UL>

<P><STRONG><a name="[12b]"></a>tfm_sst_req_mngr_init</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, tfm_sst_req_mngr.o(.text.tfm_sst_req_mngr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tfm_sst_req_mngr_init &rArr; tfm_sst_init &rArr; sst_system_prepare &rArr; sst_object_table_init &rArr; sst_flash_fs_file_delete &rArr; sst_flash_fs_dblock_compact_block &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_wait
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_signal_handle
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spm_api.o(.rodata.static_data_list)
</UL>
<P><STRONG><a name="[4ad]"></a>tfm_sst_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tfm_protected_storage.o(.text.tfm_sst_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tfm_sst_set &rArr; sst_object_create &rArr; sst_object_table_set_obj_tbl_info &rArr; sst_object_table_save_table &rArr; sst_flash_fs_file_create &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_set_ipc
</UL>

<P><STRONG><a name="[224]"></a>tfm_svcall_disable_irq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tfm_svcalls.o(.text.tfm_svcall_disable_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tfm_svcall_disable_irq &rArr; tfm_spm_get_running_partition &rArr; tfm_spm_get_partition_by_id &rArr; get_partition_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_disable_irq
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_running_partition
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_is_one_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>

<P><STRONG><a name="[223]"></a>tfm_svcall_enable_irq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tfm_svcalls.o(.text.tfm_svcall_enable_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tfm_svcall_enable_irq &rArr; tfm_spm_get_running_partition &rArr; tfm_spm_get_partition_by_id &rArr; get_partition_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_hal_enable_irq
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_running_partition
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_is_one_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>

<P><STRONG><a name="[134]"></a>tfm_svcall_psa_call</STRONG> (Thumb, 468 bytes, Stack size 152 bytes, tfm_svcalls.o(.text.tfm_svcall_psa_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tfm_svcall_psa_call &rArr; tfm_spm_fill_msg &rArr; tfm_spm_get_rhandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_send_event
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_partition_get_privileged_mode
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_service_by_handle
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_running_partition
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_msg_buffer_from_conn_handle
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_fill_msg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_memory_check
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_util_memset
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_util_memcpy
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_psa_api_veneers.o(SFN)
</UL>
<P><STRONG><a name="[135]"></a>tfm_svcall_psa_close</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, tfm_svcalls.o(.text.tfm_svcall_psa_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tfm_svcall_psa_close &rArr; tfm_spm_fill_msg &rArr; tfm_spm_get_rhandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_send_event
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_service_by_handle
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_msg_buffer_from_conn_handle
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_fill_msg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_psa_api_veneers.o(SFN)
</UL>
<P><STRONG><a name="[133]"></a>tfm_svcall_psa_connect</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, tfm_svcalls.o(.text.tfm_svcall_psa_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tfm_svcall_psa_connect &rArr; tfm_spm_fill_msg &rArr; tfm_spm_get_rhandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_send_event
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_service_by_sid
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_msg_buffer_from_conn_handle
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_fill_msg
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_create_conn_handle
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_check_client_version
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_panic
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_psa_api_veneers.o(SFN)
</UL>
<P><STRONG><a name="[131]"></a>tfm_svcall_psa_framework_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tfm_svcalls.o(.text.tfm_svcall_psa_framework_version))
<BR>[Address Reference Count : 1]<UL><LI> tfm_psa_api_veneers.o(SFN)
</UL>
<P><STRONG><a name="[132]"></a>tfm_svcall_psa_version</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tfm_svcalls.o(.text.tfm_svcall_psa_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tfm_svcall_psa_version &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_service_by_sid
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_psa_api_veneers.o(SFN)
</UL>
<P><STRONG><a name="[22b]"></a>tfm_svcall_thrd_exit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tfm_thread.o(.text.tfm_svcall_thrd_exit))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
</UL>

<P><STRONG><a name="[484]"></a>tfm_thrd_activate_schedule</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tfm_thread.o(.text.tfm_thrd_activate_schedule))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_event_wake
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_event_wait
</UL>

<P><STRONG><a name="[48c]"></a>tfm_thrd_context_switch</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tfm_thread.o(.text.tfm_thrd_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tfm_thrd_context_switch &rArr; tfm_core_util_memcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_util_memcpy
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_pendsv_do_schedule
</UL>

<P><STRONG><a name="[482]"></a>tfm_thrd_curr_thread</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tfm_thread.o(.text.tfm_thrd_curr_thread))
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_partition_get_running_partition_id
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_pendsv_do_schedule
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_event_wait
</UL>

<P><STRONG><a name="[4a3]"></a>tfm_thrd_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tfm_thread.o(.text.tfm_thrd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tfm_thrd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_init
</UL>

<P><STRONG><a name="[48a]"></a>tfm_thrd_next_thread</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tfm_thread.o(.text.tfm_thrd_next_thread))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_pendsv_do_schedule
</UL>

<P><STRONG><a name="[483]"></a>tfm_thrd_set_status</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tfm_thread.o(.text.tfm_thrd_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tfm_thrd_set_status &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_start
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_event_wake
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_event_wait
</UL>

<P><STRONG><a name="[4a4]"></a>tfm_thrd_start</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tfm_thread.o(.text.tfm_thrd_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tfm_thrd_start &rArr; tfm_thrd_set_status &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_util_memset
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_arch_initialize_ctx_ext
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_set_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_init
</UL>

<P><STRONG><a name="[4a5]"></a>tfm_thrd_start_scheduler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tfm_thread.o(.text.tfm_thrd_start_scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tfm_thrd_start_scheduler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_init
</UL>

<P><STRONG><a name="[406]"></a>unsecure_sram1</STRONG> (Thumb, 136 bytes, Stack size 136 bytes, target_cfg.o(.text.unsecure_sram1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = unsecure_sram1 &rArr; HAL_GTZC_MPCBB_GetConfigMem
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GTZC_MPCBB_GetConfigMem
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GTZC_MPCBB_ConfigMem
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpc_init_cfg
</UL>

<P><STRONG><a name="[77]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx_s.o(.text)
</UL>
<P><STRONG><a name="[4b3]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4b5]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[508]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[509]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4b6]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[50a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4b7]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4ca]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[4b9]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[50b]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[4be]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[50c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[4bb]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit5.o(.ARM.Collect$$libinit$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[50d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[50e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[50f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[510]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[511]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[512]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[513]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[514]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[515]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[516]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[517]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[518]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[519]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[51a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[51b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[51c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[51d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[51e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[51f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[520]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4c1]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[521]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[522]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[523]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[524]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[525]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[526]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[527]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4b4]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[528]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[529]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[4bd]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[52a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4bf]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; tfm_spm_init &rArr; tfm_thrd_start &rArr; tfm_thrd_set_status &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[52b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4cb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4c0]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[52c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4c2]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[138]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[139]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[23b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[52d]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_log_puts
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_start_scheduler
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_context_switch
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_set_rhandle
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_send_event
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_service_by_signal
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_rhandle
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_get_msg_buffer_from_conn_handle
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_free_conn_handle
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_fill_msg
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_create_conn_handle
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_check_client_version
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_event_wake
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_event_wait
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_nspm_thread_entry
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_IPC
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_util_memcpy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_version
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_connect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_close
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_svcall_psa_call
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_set_status
</UL>

<P><STRONG><a name="[4d9]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[4b8]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[4c8]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[269]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_free
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_calloc
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3c4]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[1c0]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_Flash_ProgramData
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pkcs12_pbe_alg
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_hmac
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_cipher_alg
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_get_file_idx
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_read
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_get_info
</UL>

<P><STRONG><a name="[3ba]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p448
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_Flash_ReadData
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_update
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update_ret
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_restartable
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_fill_buffer
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_pubkey
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_read
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_finish
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_finish_internal
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_derivation_internal
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_internal_export_key
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_setup_internal
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_finish_internal
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_tls12_prf_setup
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_reserve_file
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_write
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_read
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_set_iv
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_get_iv
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_encrypt_and_tag
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_auth_and_decrypt
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_set_obj_tbl_info
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_init
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_get_obj_tbl_info
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_delete_object
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_value_handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[4cc]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[52e]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_internal_export_key
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsefulOutBuf_InsertUsefulBuf
</UL>

<P><STRONG><a name="[4cd]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[52f]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p448
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[403]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>

<P><STRONG><a name="[530]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[531]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_util.o(.rodata.memset_func)
</UL>
<P><STRONG><a name="[2f6]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_sign_finish
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_finish
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_read
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_setup_internal
</UL>

<P><STRONG><a name="[3a2]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
</UL>

<P><STRONG><a name="[532]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary_le
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish_ret
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_calloc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_aead_encrypt
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_aead_decrypt
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_derivation_internal
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_internal_export_key
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[4d1]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[4cf]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[21e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p448
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_free
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_set_key_policy
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_destroy_key
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_allocate_key
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_register_initial_attestation_private_key
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_wipe_key_slot
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_setup
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_ipc_handler
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_encrypt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_decrypt
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_sign
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_update
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_setup
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_finish
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_read
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_get_info
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_delete
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_create
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_verify_setup
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_verify_finish
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_update
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_sign_setup
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_sign_finish
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_abort
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_derivation
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_agreement
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_verify
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_clone
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_abort
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_policy
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_lifetime
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_information
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_generator_capacity
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_read
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_import_key
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_abort
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generate_random
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generate_key
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_export_public_key
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_export_key
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_copy_key
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_update
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_set_iv
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_generate_iv
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_finish
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_encrypt_setup
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_decrypt_setup
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_abort
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_verify
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_encrypt
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_decrypt
</UL>

<P><STRONG><a name="[2bf]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish_ret
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_operation_release
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_init_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_abort
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_read
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_abort
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_setup
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_reset_metablock
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_delete
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_set_obj_tbl_info
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_delete_object
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_create
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_reset_metablock
</UL>

<P><STRONG><a name="[533]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[4d0]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[4c5]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[534]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[535]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[536]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[537]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4d2]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[4d4]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[4bc]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[4c4]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[4c7]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4d7]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[4d8]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[4da]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[4ba]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[4c6]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[538]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[539]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[4dc]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[4ce]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[53a]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[4d6]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[53b]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[53c]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[4d3]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[4db]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[4d5]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[4c3]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[4de]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[4dd]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[53d]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[53e]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4df]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[53f]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[4e0]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[506]"></a>jump_to_ns_code</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tfm_spm_services.o(.text.jump_to_ns_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jump_to_ns_code
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_nspm_thread_entry
</UL>

<P><STRONG><a name="[4b1]"></a>tfm_core_get_boot_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tfm_spm_services.o(.text.tfm_core_get_boot_data))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_get_boot_data
</UL>

<P><STRONG><a name="[4e1]"></a>tfm_core_get_boot_value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tfm_spm_services.o(.text.tfm_core_get_boot_value))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_get_instance_id
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_get_implementation_id
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_get_initial_attest_key
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_get_crypto_huk
</UL>

<P><STRONG><a name="[24f]"></a>tfm_plat_get_boot_seed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dummy_boot_seed.o(.text.tfm_plat_get_boot_seed))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>

<P><STRONG><a name="[41e]"></a>tfm_plat_get_crypto_huk</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, dummy_crypto_keys.o(.text.tfm_plat_get_crypto_huk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tfm_plat_get_crypto_huk
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_value
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_getkey
</UL>

<P><STRONG><a name="[258]"></a>tfm_plat_get_hw_version</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dummy_device_id.o(.text.tfm_plat_get_hw_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tfm_plat_get_hw_version
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>

<P><STRONG><a name="[251]"></a>tfm_plat_get_implementation_id</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dummy_device_id.o(.text.tfm_plat_get_implementation_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tfm_plat_get_implementation_id
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_value
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>

<P><STRONG><a name="[25e]"></a>tfm_plat_get_initial_attest_key</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, dummy_crypto_keys.o(.text.tfm_plat_get_initial_attest_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tfm_plat_get_initial_attest_key
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_value
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_register_initial_attestation_private_key
</UL>

<P><STRONG><a name="[250]"></a>tfm_plat_get_instance_id</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dummy_device_id.o(.text.tfm_plat_get_instance_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tfm_plat_get_instance_id
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_value
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>

<P><STRONG><a name="[540]"></a>psa_framework_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_client.o(SFN), UNUSED)

<P><STRONG><a name="[541]"></a>psa_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_client.o(SFN), UNUSED)

<P><STRONG><a name="[4e2]"></a>psa_connect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_client.o(SFN))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_set_key_policy
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_destroy_key
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_allocate_key
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_encrypt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_decrypt
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_sign
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_update
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_setup
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_finish
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_verify_setup
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_verify_finish
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_update
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_sign_setup
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_sign_finish
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_abort
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_derivation
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_agreement
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_verify
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_clone
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_abort
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_policy
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_lifetime
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_information
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_generator_capacity
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_read
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_import_key
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_abort
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generate_random
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generate_key
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_export_public_key
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_export_key
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_copy_key
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_update
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_set_iv
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_generate_iv
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_finish
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_encrypt_setup
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_decrypt_setup
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_abort
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_verify
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_encrypt
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_decrypt
</UL>

<P><STRONG><a name="[4e3]"></a>psa_call</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_client.o(SFN))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_set_key_policy
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_destroy_key
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_allocate_key
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_encrypt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_decrypt
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_sign
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_update
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_setup
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_finish
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_verify_setup
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_verify_finish
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_update
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_sign_setup
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_sign_finish
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_abort
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_derivation
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_agreement
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_verify
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_clone
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_abort
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_policy
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_lifetime
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_information
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_generator_capacity
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_read
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_import_key
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_abort
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generate_random
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generate_key
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_export_public_key
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_export_key
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_copy_key
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_update
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_set_iv
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_generate_iv
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_finish
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_encrypt_setup
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_decrypt_setup
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_abort
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_verify
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_encrypt
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_decrypt
</UL>

<P><STRONG><a name="[4e4]"></a>psa_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_client.o(SFN))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_set_key_policy
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_destroy_key
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_allocate_key
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_encrypt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_decrypt
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_sign
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_update
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_setup
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_finish
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_verify_setup
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_verify_finish
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_update
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_sign_setup
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_sign_finish
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_abort
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_derivation
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_agreement
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_verify
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_clone
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hash_abort
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_policy
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_lifetime
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_information
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_generator_capacity
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_read
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_import_key
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_abort
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generate_random
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generate_key
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_export_public_key
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_export_key
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_copy_key
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_update
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_set_iv
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_generate_iv
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_finish
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_encrypt_setup
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_decrypt_setup
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_abort
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_verify
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_encrypt
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_asymmetric_decrypt
</UL>

<P><STRONG><a name="[480]"></a>psa_wait</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_service.o(SFN))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_ipc_handler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_req_mngr_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_req_mngr_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_partition_init
</UL>

<P><STRONG><a name="[2ce]"></a>psa_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_service.o(SFN))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_ipc_handler
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_signal_handle
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_signal_handle
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_signal_handle
</UL>

<P><STRONG><a name="[542]"></a>psa_set_rhandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_service.o(SFN), UNUSED)

<P><STRONG><a name="[45c]"></a>psa_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_service.o(SFN))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_ipc_handler
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_req_mngr_read_asset_data
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_attest_get_token_size
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_attest_get_token
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_set_ipc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_remove_ipc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_get_ipc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_get_info_ipc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_set_ipc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_remove_ipc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_get_ipc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_get_info_ipc
</UL>

<P><STRONG><a name="[543]"></a>psa_skip</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_service.o(SFN), UNUSED)

<P><STRONG><a name="[45d]"></a>psa_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_service.o(SFN))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_ipc_handler
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_req_mngr_write_asset_data
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_attest_get_token_size
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_attest_get_token
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_set_ipc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_remove_ipc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_get_support_ipc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_get_ipc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_get_info_ipc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_get_ipc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_get_info_ipc
</UL>

<P><STRONG><a name="[2cf]"></a>psa_reply</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_service.o(SFN))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_ipc_handler
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_signal_handle
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_signal_handle
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_signal_handle
</UL>

<P><STRONG><a name="[544]"></a>psa_notify</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_service.o(SFN), UNUSED)

<P><STRONG><a name="[545]"></a>psa_clear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_service.o(SFN), UNUSED)

<P><STRONG><a name="[546]"></a>psa_eoi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psa_service.o(SFN), UNUSED)

<P><STRONG><a name="[48b]"></a>tfm_spm_partition_change_privilege</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spm_api.o(SFN))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_pendsv_do_schedule
</UL>

<P><STRONG><a name="[547]"></a>psa_crypto_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)

<P><STRONG><a name="[25d]"></a>psa_allocate_key</STRONG> (Thumb, 82 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = psa_allocate_key &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_register_initial_attestation_private_key
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_setkey
</UL>

<P><STRONG><a name="[548]"></a>psa_open_key</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)

<P><STRONG><a name="[549]"></a>psa_create_key</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)

<P><STRONG><a name="[54a]"></a>psa_close_key</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)

<P><STRONG><a name="[261]"></a>psa_import_key</STRONG> (Thumb, 102 bytes, Stack size 104 bytes, tfm_crypto_secure_api.o(SFN))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = psa_import_key &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_register_initial_attestation_private_key
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_setkey
</UL>

<P><STRONG><a name="[265]"></a>psa_destroy_key</STRONG> (Thumb, 82 bytes, Stack size 88 bytes, tfm_crypto_secure_api.o(SFN))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = psa_destroy_key &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_unregister_initial_attestation_private_key
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_destroykey
</UL>

<P><STRONG><a name="[4e5]"></a>psa_get_key_information</STRONG> (Thumb, 104 bytes, Stack size 112 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4e6]"></a>psa_export_key</STRONG> (Thumb, 106 bytes, Stack size 104 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4e7]"></a>psa_export_public_key</STRONG> (Thumb, 106 bytes, Stack size 104 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4e8]"></a>psa_copy_key</STRONG> (Thumb, 104 bytes, Stack size 112 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[25f]"></a>psa_key_policy_set_usage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tfm_crypto_secure_api.o(SFN))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_register_initial_attestation_private_key
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_setkey
</UL>

<P><STRONG><a name="[54b]"></a>psa_key_policy_get_usage</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)

<P><STRONG><a name="[54c]"></a>psa_key_policy_get_algorithm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)

<P><STRONG><a name="[260]"></a>psa_set_key_policy</STRONG> (Thumb, 90 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = psa_set_key_policy &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_register_initial_attestation_private_key
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_setkey
</UL>

<P><STRONG><a name="[4e9]"></a>psa_get_key_policy</STRONG> (Thumb, 92 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4ea]"></a>psa_get_key_lifetime</STRONG> (Thumb, 92 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4eb]"></a>psa_cipher_generate_iv</STRONG> (Thumb, 110 bytes, Stack size 112 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4ec]"></a>psa_cipher_set_iv</STRONG> (Thumb, 98 bytes, Stack size 104 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4ed]"></a>psa_cipher_encrypt_setup</STRONG> (Thumb, 106 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4ee]"></a>psa_cipher_decrypt_setup</STRONG> (Thumb, 106 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4ef]"></a>psa_cipher_update</STRONG> (Thumb, 120 bytes, Stack size 120 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4f0]"></a>psa_cipher_abort</STRONG> (Thumb, 90 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4f1]"></a>psa_cipher_finish</STRONG> (Thumb, 110 bytes, Stack size 112 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[461]"></a>psa_hash_setup</STRONG> (Thumb, 94 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = psa_hash_setup &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_crypto_hash_start
</UL>

<P><STRONG><a name="[462]"></a>psa_hash_update</STRONG> (Thumb, 98 bytes, Stack size 104 bytes, tfm_crypto_secure_api.o(SFN))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = psa_hash_update &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_crypto_hash_update
</UL>

<P><STRONG><a name="[460]"></a>psa_hash_finish</STRONG> (Thumb, 110 bytes, Stack size 112 bytes, tfm_crypto_secure_api.o(SFN))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = psa_hash_finish &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_crypto_hash_finish
</UL>

<P><STRONG><a name="[4f2]"></a>psa_hash_verify</STRONG> (Thumb, 98 bytes, Stack size 104 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4f3]"></a>psa_hash_abort</STRONG> (Thumb, 90 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4f4]"></a>psa_hash_clone</STRONG> (Thumb, 92 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4f5]"></a>psa_mac_sign_setup</STRONG> (Thumb, 106 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4f6]"></a>psa_mac_verify_setup</STRONG> (Thumb, 106 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4f7]"></a>psa_mac_update</STRONG> (Thumb, 98 bytes, Stack size 104 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4f8]"></a>psa_mac_sign_finish</STRONG> (Thumb, 110 bytes, Stack size 112 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4f9]"></a>psa_mac_verify_finish</STRONG> (Thumb, 98 bytes, Stack size 104 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4fa]"></a>psa_mac_abort</STRONG> (Thumb, 90 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[41a]"></a>psa_aead_encrypt</STRONG> (Thumb, 180 bytes, Stack size 120 bytes, tfm_crypto_secure_api.o(SFN))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = psa_aead_encrypt &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_generate_auth_tag
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_encrypt_and_tag
</UL>

<P><STRONG><a name="[416]"></a>psa_aead_decrypt</STRONG> (Thumb, 180 bytes, Stack size 120 bytes, tfm_crypto_secure_api.o(SFN))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = psa_aead_decrypt &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_authenticate
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_auth_and_decrypt
</UL>

<P><STRONG><a name="[464]"></a>psa_asymmetric_sign</STRONG> (Thumb, 118 bytes, Stack size 112 bytes, tfm_crypto_secure_api.o(SFN))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = psa_asymmetric_sign &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_crypto_pub_key_sign
</UL>

<P><STRONG><a name="[4fb]"></a>psa_asymmetric_verify</STRONG> (Thumb, 110 bytes, Stack size 112 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4fc]"></a>psa_asymmetric_encrypt</STRONG> (Thumb, 140 bytes, Stack size 120 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4fd]"></a>psa_asymmetric_decrypt</STRONG> (Thumb, 140 bytes, Stack size 120 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4fe]"></a>psa_get_generator_capacity</STRONG> (Thumb, 92 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4ff]"></a>psa_generator_read</STRONG> (Thumb, 92 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[500]"></a>psa_generator_import_key</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[501]"></a>psa_generator_abort</STRONG> (Thumb, 90 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[502]"></a>psa_key_derivation</STRONG> (Thumb, 154 bytes, Stack size 112 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[503]"></a>psa_key_agreement</STRONG> (Thumb, 116 bytes, Stack size 104 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[504]"></a>psa_generate_random</STRONG> (Thumb, 94 bytes, Stack size 96 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[505]"></a>psa_generate_key</STRONG> (Thumb, 126 bytes, Stack size 112 bytes, tfm_crypto_secure_api.o(SFN), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_connect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_close
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_call
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[9c]"></a>tfm_nspm_thread_entry</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tfm_nspm_ipc.o(SFN))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tfm_nspm_thread_entry &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_to_ns_code
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> spm_api_ipc.o(.text.tfm_spm_init)
<LI> spm_api_ipc.o(.text.tfm_pendsv_do_schedule)
<LI> spm_api.o(.rodata.static_data_list)
</UL>
<P><STRONG><a name="[143]"></a>__acle_se_tfm_psa_framework_version_veneer</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, tfm_psa_api_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __acle_se_tfm_psa_framework_version_veneer
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_ipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_psa_framework_version_veneer
</UL>

<P><STRONG><a name="[144]"></a>__acle_se_tfm_psa_version_veneer</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, tfm_psa_api_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __acle_se_tfm_psa_version_veneer
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_ipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_psa_version_veneer
</UL>

<P><STRONG><a name="[142]"></a>__acle_se_tfm_psa_connect_veneer</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, tfm_psa_api_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __acle_se_tfm_psa_connect_veneer
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_ipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_psa_connect_veneer
</UL>

<P><STRONG><a name="[140]"></a>__acle_se_tfm_psa_call_veneer</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, tfm_psa_api_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __acle_se_tfm_psa_call_veneer
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_ipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_psa_call_veneer
</UL>

<P><STRONG><a name="[141]"></a>__acle_se_tfm_psa_close_veneer</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, tfm_psa_api_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __acle_se_tfm_psa_close_veneer
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_ipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_psa_close_veneer
</UL>

<P><STRONG><a name="[507]"></a>tfm_thrd_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tfm_thread.o(SFN))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_zone
</UL>

<P><STRONG><a name="[17a]"></a>__acle_se_tfm_tfm_sst_set_req_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_sst_set_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_sst_set_req_veneer
</UL>

<P><STRONG><a name="[177]"></a>__acle_se_tfm_tfm_sst_get_req_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_sst_get_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_sst_get_req_veneer
</UL>

<P><STRONG><a name="[176]"></a>__acle_se_tfm_tfm_sst_get_info_req_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_sst_get_info_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_sst_get_info_req_veneer
</UL>

<P><STRONG><a name="[179]"></a>__acle_se_tfm_tfm_sst_remove_req_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_sst_remove_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_sst_remove_req_veneer
</UL>

<P><STRONG><a name="[178]"></a>__acle_se_tfm_tfm_sst_get_support_req_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_sst_get_support_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_sst_get_support_req_veneer
</UL>

<P><STRONG><a name="[175]"></a>__acle_se_tfm_tfm_its_set_req_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_its_set_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_its_set_req_veneer
</UL>

<P><STRONG><a name="[173]"></a>__acle_se_tfm_tfm_its_get_req_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_its_get_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_its_get_req_veneer
</UL>

<P><STRONG><a name="[172]"></a>__acle_se_tfm_tfm_its_get_info_req_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_its_get_info_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_its_get_info_req_veneer
</UL>

<P><STRONG><a name="[174]"></a>__acle_se_tfm_tfm_its_remove_req_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_its_remove_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_its_remove_req_veneer
</UL>

<P><STRONG><a name="[149]"></a>__acle_se_tfm_tfm_crypto_allocate_key_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_allocate_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_allocate_key_veneer
</UL>

<P><STRONG><a name="[168]"></a>__acle_se_tfm_tfm_crypto_import_key_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_import_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_import_key_veneer
</UL>

<P><STRONG><a name="[156]"></a>__acle_se_tfm_tfm_crypto_destroy_key_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_destroy_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_destroy_key_veneer
</UL>

<P><STRONG><a name="[15f]"></a>__acle_se_tfm_tfm_crypto_get_key_information_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_get_key_information_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_get_key_information_veneer
</UL>

<P><STRONG><a name="[157]"></a>__acle_se_tfm_tfm_crypto_export_key_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_export_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_export_key_veneer
</UL>

<P><STRONG><a name="[158]"></a>__acle_se_tfm_tfm_crypto_export_public_key_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_export_public_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_export_public_key_veneer
</UL>

<P><STRONG><a name="[155]"></a>__acle_se_tfm_tfm_crypto_copy_key_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_copy_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_copy_key_veneer
</UL>

<P><STRONG><a name="[171]"></a>__acle_se_tfm_tfm_crypto_set_key_policy_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_set_key_policy_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_set_key_policy_veneer
</UL>

<P><STRONG><a name="[161]"></a>__acle_se_tfm_tfm_crypto_get_key_policy_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_get_key_policy_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_get_key_policy_veneer
</UL>

<P><STRONG><a name="[160]"></a>__acle_se_tfm_tfm_crypto_get_key_lifetime_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_get_key_lifetime_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_get_key_lifetime_veneer
</UL>

<P><STRONG><a name="[152]"></a>__acle_se_tfm_tfm_crypto_cipher_generate_iv_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_cipher_generate_iv_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_cipher_generate_iv_veneer
</UL>

<P><STRONG><a name="[153]"></a>__acle_se_tfm_tfm_crypto_cipher_set_iv_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_cipher_set_iv_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_cipher_set_iv_veneer
</UL>

<P><STRONG><a name="[150]"></a>__acle_se_tfm_tfm_crypto_cipher_encrypt_setup_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_cipher_encrypt_setup_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_cipher_encrypt_setup_veneer
</UL>

<P><STRONG><a name="[14f]"></a>__acle_se_tfm_tfm_crypto_cipher_decrypt_setup_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_cipher_decrypt_setup_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_cipher_decrypt_setup_veneer
</UL>

<P><STRONG><a name="[154]"></a>__acle_se_tfm_tfm_crypto_cipher_update_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_cipher_update_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_cipher_update_veneer
</UL>

<P><STRONG><a name="[14e]"></a>__acle_se_tfm_tfm_crypto_cipher_abort_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_cipher_abort_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_cipher_abort_veneer
</UL>

<P><STRONG><a name="[151]"></a>__acle_se_tfm_tfm_crypto_cipher_finish_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_cipher_finish_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_cipher_finish_veneer
</UL>

<P><STRONG><a name="[165]"></a>__acle_se_tfm_tfm_crypto_hash_setup_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_hash_setup_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_hash_setup_veneer
</UL>

<P><STRONG><a name="[166]"></a>__acle_se_tfm_tfm_crypto_hash_update_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_hash_update_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_hash_update_veneer
</UL>

<P><STRONG><a name="[164]"></a>__acle_se_tfm_tfm_crypto_hash_finish_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_hash_finish_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_hash_finish_veneer
</UL>

<P><STRONG><a name="[167]"></a>__acle_se_tfm_tfm_crypto_hash_verify_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_hash_verify_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_hash_verify_veneer
</UL>

<P><STRONG><a name="[162]"></a>__acle_se_tfm_tfm_crypto_hash_abort_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_hash_abort_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_hash_abort_veneer
</UL>

<P><STRONG><a name="[163]"></a>__acle_se_tfm_tfm_crypto_hash_clone_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_hash_clone_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_hash_clone_veneer
</UL>

<P><STRONG><a name="[16d]"></a>__acle_se_tfm_tfm_crypto_mac_sign_setup_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_mac_sign_setup_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_mac_sign_setup_veneer
</UL>

<P><STRONG><a name="[170]"></a>__acle_se_tfm_tfm_crypto_mac_verify_setup_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_mac_verify_setup_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_mac_verify_setup_veneer
</UL>

<P><STRONG><a name="[16e]"></a>__acle_se_tfm_tfm_crypto_mac_update_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_mac_update_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_mac_update_veneer
</UL>

<P><STRONG><a name="[16c]"></a>__acle_se_tfm_tfm_crypto_mac_sign_finish_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_mac_sign_finish_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_mac_sign_finish_veneer
</UL>

<P><STRONG><a name="[16f]"></a>__acle_se_tfm_tfm_crypto_mac_verify_finish_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_mac_verify_finish_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_mac_verify_finish_veneer
</UL>

<P><STRONG><a name="[16b]"></a>__acle_se_tfm_tfm_crypto_mac_abort_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_mac_abort_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_mac_abort_veneer
</UL>

<P><STRONG><a name="[148]"></a>__acle_se_tfm_tfm_crypto_aead_encrypt_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_aead_encrypt_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_aead_encrypt_veneer
</UL>

<P><STRONG><a name="[147]"></a>__acle_se_tfm_tfm_crypto_aead_decrypt_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_aead_decrypt_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_aead_decrypt_veneer
</UL>

<P><STRONG><a name="[14c]"></a>__acle_se_tfm_tfm_crypto_asymmetric_sign_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_asymmetric_sign_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_asymmetric_sign_veneer
</UL>

<P><STRONG><a name="[14d]"></a>__acle_se_tfm_tfm_crypto_asymmetric_verify_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_asymmetric_verify_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_asymmetric_verify_veneer
</UL>

<P><STRONG><a name="[14b]"></a>__acle_se_tfm_tfm_crypto_asymmetric_encrypt_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_asymmetric_encrypt_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_asymmetric_encrypt_veneer
</UL>

<P><STRONG><a name="[14a]"></a>__acle_se_tfm_tfm_crypto_asymmetric_decrypt_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_asymmetric_decrypt_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_asymmetric_decrypt_veneer
</UL>

<P><STRONG><a name="[15e]"></a>__acle_se_tfm_tfm_crypto_get_generator_capacity_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_get_generator_capacity_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_get_generator_capacity_veneer
</UL>

<P><STRONG><a name="[15d]"></a>__acle_se_tfm_tfm_crypto_generator_read_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_generator_read_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_generator_read_veneer
</UL>

<P><STRONG><a name="[15c]"></a>__acle_se_tfm_tfm_crypto_generator_import_key_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_generator_import_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_generator_import_key_veneer
</UL>

<P><STRONG><a name="[15b]"></a>__acle_se_tfm_tfm_crypto_generator_abort_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_generator_abort_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_generator_abort_veneer
</UL>

<P><STRONG><a name="[16a]"></a>__acle_se_tfm_tfm_crypto_key_derivation_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_key_derivation_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_key_derivation_veneer
</UL>

<P><STRONG><a name="[169]"></a>__acle_se_tfm_tfm_crypto_key_agreement_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_key_agreement_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_key_agreement_veneer
</UL>

<P><STRONG><a name="[15a]"></a>__acle_se_tfm_tfm_crypto_generate_random_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_generate_random_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_generate_random_veneer
</UL>

<P><STRONG><a name="[159]"></a>__acle_se_tfm_tfm_crypto_generate_key_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_tfm_crypto_generate_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_tfm_crypto_generate_key_veneer
</UL>

<P><STRONG><a name="[146]"></a>__acle_se_tfm_initial_attest_get_token_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_initial_attest_get_token_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_initial_attest_get_token_veneer
</UL>

<P><STRONG><a name="[145]"></a>__acle_se_tfm_initial_attest_get_token_size_veneer</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfm_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __acle_se_tfm_initial_attest_get_token_size_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_secure_api_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_initial_attest_get_token_size_veneer
</UL>

<P><STRONG><a name="[4c9]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[486]"></a>tfm_its_get</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tfm_internal_trusted_storage.o(.text.tfm_its_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tfm_its_get &rArr; its_flash_fs_file_read &rArr; its_flash_fs_mblock_get_file_idx &rArr; its_flash_fs_mblock_read_file_meta &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_read
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_get_info
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_get_ipc
</UL>

<P><STRONG><a name="[485]"></a>tfm_its_get_info</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tfm_internal_trusted_storage.o(.text.tfm_its_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tfm_its_get_info &rArr; its_flash_fs_file_get_info &rArr; its_flash_fs_mblock_get_file_idx &rArr; its_flash_fs_mblock_read_file_meta &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_get_info
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_get_info_ipc
</UL>

<P><STRONG><a name="[488]"></a>tfm_its_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tfm_internal_trusted_storage.o(.text.tfm_its_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tfm_its_init &rArr; its_flash_fs_wipe_all &rArr; its_flash_fs_mblock_reset_metablock &rArr; its_init_get_active_metablock &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_wipe_all
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_req_mngr_init
</UL>

<P><STRONG><a name="[487]"></a>tfm_its_remove</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tfm_internal_trusted_storage.o(.text.tfm_its_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tfm_its_remove &rArr; its_flash_fs_file_delete &rArr; its_flash_fs_dblock_compact_block &rArr; its_flash_fs_mblock_update_scratch_block_meta &rArr; its_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_get_info
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_remove_ipc
</UL>

<P><STRONG><a name="[489]"></a>tfm_its_set</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tfm_internal_trusted_storage.o(.text.tfm_its_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tfm_its_set &rArr; its_flash_fs_file_delete &rArr; its_flash_fs_dblock_compact_block &rArr; its_flash_fs_mblock_update_scratch_block_meta &rArr; its_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_get_info
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_delete
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_create
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_set_ipc
</UL>

<P><STRONG><a name="[2a6]"></a>attest_check_memory_access</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tfm_attestation.o(.text.attest_check_memory_access))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_attest_get_token
</UL>

<P><STRONG><a name="[25b]"></a>attest_get_boot_data</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tfm_attestation.o(.text.attest_get_boot_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attest_get_boot_data
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_data
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_init
</UL>

<P><STRONG><a name="[252]"></a>attest_get_caller_client_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tfm_attestation.o(.text.attest_get_caller_client_id))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>

<P><STRONG><a name="[12e]"></a>attest_partition_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tfm_attestation_req_mngr.o(.text.attest_partition_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = attest_partition_init &rArr; attest_signal_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_signal_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spm_api.o(.rodata.static_data_list)
</UL>
<P><STRONG><a name="[17b]"></a>TZ_AllocModuleContext_S</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_TZ_AllocModuleContext_S
</UL>

<P><STRONG><a name="[17c]"></a>TZ_FreeModuleContext_S</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_TZ_FreeModuleContext_S
</UL>

<P><STRONG><a name="[17d]"></a>TZ_InitContextSystem_S</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_TZ_InitContextSystem_S
</UL>

<P><STRONG><a name="[17e]"></a>TZ_LoadContext_S</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_TZ_LoadContext_S
</UL>

<P><STRONG><a name="[17f]"></a>TZ_StoreContext_S</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_TZ_StoreContext_S
</UL>

<P><STRONG><a name="[180]"></a>tfm_psa_call_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tfm_psa_call_veneer &rArr; __acle_se_tfm_psa_call_veneer
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_psa_call_veneer
</UL>

<P><STRONG><a name="[181]"></a>tfm_psa_close_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tfm_psa_close_veneer &rArr; __acle_se_tfm_psa_close_veneer
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_psa_close_veneer
</UL>

<P><STRONG><a name="[182]"></a>tfm_psa_connect_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tfm_psa_connect_veneer &rArr; __acle_se_tfm_psa_connect_veneer
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_psa_connect_veneer
</UL>

<P><STRONG><a name="[183]"></a>tfm_psa_framework_version_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tfm_psa_framework_version_veneer &rArr; __acle_se_tfm_psa_framework_version_veneer
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_psa_framework_version_veneer
</UL>

<P><STRONG><a name="[184]"></a>tfm_psa_version_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tfm_psa_version_veneer &rArr; __acle_se_tfm_psa_version_veneer
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_psa_version_veneer
</UL>

<P><STRONG><a name="[185]"></a>tfm_initial_attest_get_token_size_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_initial_attest_get_token_size_veneer &rArr; __acle_se_tfm_initial_attest_get_token_size_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_initial_attest_get_token_size_veneer
</UL>

<P><STRONG><a name="[186]"></a>tfm_initial_attest_get_token_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_initial_attest_get_token_veneer &rArr; __acle_se_tfm_initial_attest_get_token_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_initial_attest_get_token_veneer
</UL>

<P><STRONG><a name="[187]"></a>tfm_tfm_crypto_aead_decrypt_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_aead_decrypt_veneer &rArr; __acle_se_tfm_tfm_crypto_aead_decrypt_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_aead_decrypt_veneer
</UL>

<P><STRONG><a name="[188]"></a>tfm_tfm_crypto_aead_encrypt_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_aead_encrypt_veneer &rArr; __acle_se_tfm_tfm_crypto_aead_encrypt_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_aead_encrypt_veneer
</UL>

<P><STRONG><a name="[189]"></a>tfm_tfm_crypto_allocate_key_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_allocate_key_veneer &rArr; __acle_se_tfm_tfm_crypto_allocate_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_allocate_key_veneer
</UL>

<P><STRONG><a name="[18a]"></a>tfm_tfm_crypto_asymmetric_decrypt_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_asymmetric_decrypt_veneer &rArr; __acle_se_tfm_tfm_crypto_asymmetric_decrypt_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_asymmetric_decrypt_veneer
</UL>

<P><STRONG><a name="[18b]"></a>tfm_tfm_crypto_asymmetric_encrypt_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_asymmetric_encrypt_veneer &rArr; __acle_se_tfm_tfm_crypto_asymmetric_encrypt_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_asymmetric_encrypt_veneer
</UL>

<P><STRONG><a name="[18c]"></a>tfm_tfm_crypto_asymmetric_sign_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_asymmetric_sign_veneer &rArr; __acle_se_tfm_tfm_crypto_asymmetric_sign_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_asymmetric_sign_veneer
</UL>

<P><STRONG><a name="[18d]"></a>tfm_tfm_crypto_asymmetric_verify_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_asymmetric_verify_veneer &rArr; __acle_se_tfm_tfm_crypto_asymmetric_verify_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_asymmetric_verify_veneer
</UL>

<P><STRONG><a name="[18e]"></a>tfm_tfm_crypto_cipher_abort_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_cipher_abort_veneer &rArr; __acle_se_tfm_tfm_crypto_cipher_abort_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_cipher_abort_veneer
</UL>

<P><STRONG><a name="[18f]"></a>tfm_tfm_crypto_cipher_decrypt_setup_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_cipher_decrypt_setup_veneer &rArr; __acle_se_tfm_tfm_crypto_cipher_decrypt_setup_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_cipher_decrypt_setup_veneer
</UL>

<P><STRONG><a name="[190]"></a>tfm_tfm_crypto_cipher_encrypt_setup_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_cipher_encrypt_setup_veneer &rArr; __acle_se_tfm_tfm_crypto_cipher_encrypt_setup_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_cipher_encrypt_setup_veneer
</UL>

<P><STRONG><a name="[191]"></a>tfm_tfm_crypto_cipher_finish_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_cipher_finish_veneer &rArr; __acle_se_tfm_tfm_crypto_cipher_finish_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_cipher_finish_veneer
</UL>

<P><STRONG><a name="[192]"></a>tfm_tfm_crypto_cipher_generate_iv_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_cipher_generate_iv_veneer &rArr; __acle_se_tfm_tfm_crypto_cipher_generate_iv_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_cipher_generate_iv_veneer
</UL>

<P><STRONG><a name="[193]"></a>tfm_tfm_crypto_cipher_set_iv_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_cipher_set_iv_veneer &rArr; __acle_se_tfm_tfm_crypto_cipher_set_iv_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_cipher_set_iv_veneer
</UL>

<P><STRONG><a name="[194]"></a>tfm_tfm_crypto_cipher_update_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_cipher_update_veneer &rArr; __acle_se_tfm_tfm_crypto_cipher_update_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_cipher_update_veneer
</UL>

<P><STRONG><a name="[195]"></a>tfm_tfm_crypto_copy_key_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_copy_key_veneer &rArr; __acle_se_tfm_tfm_crypto_copy_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_copy_key_veneer
</UL>

<P><STRONG><a name="[196]"></a>tfm_tfm_crypto_destroy_key_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_destroy_key_veneer &rArr; __acle_se_tfm_tfm_crypto_destroy_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_destroy_key_veneer
</UL>

<P><STRONG><a name="[197]"></a>tfm_tfm_crypto_export_key_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_export_key_veneer &rArr; __acle_se_tfm_tfm_crypto_export_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_export_key_veneer
</UL>

<P><STRONG><a name="[198]"></a>tfm_tfm_crypto_export_public_key_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_export_public_key_veneer &rArr; __acle_se_tfm_tfm_crypto_export_public_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_export_public_key_veneer
</UL>

<P><STRONG><a name="[199]"></a>tfm_tfm_crypto_generate_key_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_generate_key_veneer &rArr; __acle_se_tfm_tfm_crypto_generate_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_generate_key_veneer
</UL>

<P><STRONG><a name="[19a]"></a>tfm_tfm_crypto_generate_random_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_generate_random_veneer &rArr; __acle_se_tfm_tfm_crypto_generate_random_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_generate_random_veneer
</UL>

<P><STRONG><a name="[19b]"></a>tfm_tfm_crypto_generator_abort_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_generator_abort_veneer &rArr; __acle_se_tfm_tfm_crypto_generator_abort_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_generator_abort_veneer
</UL>

<P><STRONG><a name="[19c]"></a>tfm_tfm_crypto_generator_import_key_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_generator_import_key_veneer &rArr; __acle_se_tfm_tfm_crypto_generator_import_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_generator_import_key_veneer
</UL>

<P><STRONG><a name="[19d]"></a>tfm_tfm_crypto_generator_read_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_generator_read_veneer &rArr; __acle_se_tfm_tfm_crypto_generator_read_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_generator_read_veneer
</UL>

<P><STRONG><a name="[19e]"></a>tfm_tfm_crypto_get_generator_capacity_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_get_generator_capacity_veneer &rArr; __acle_se_tfm_tfm_crypto_get_generator_capacity_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_get_generator_capacity_veneer
</UL>

<P><STRONG><a name="[19f]"></a>tfm_tfm_crypto_get_key_information_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_get_key_information_veneer &rArr; __acle_se_tfm_tfm_crypto_get_key_information_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_get_key_information_veneer
</UL>

<P><STRONG><a name="[1a0]"></a>tfm_tfm_crypto_get_key_lifetime_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_get_key_lifetime_veneer &rArr; __acle_se_tfm_tfm_crypto_get_key_lifetime_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_get_key_lifetime_veneer
</UL>

<P><STRONG><a name="[1a1]"></a>tfm_tfm_crypto_get_key_policy_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_get_key_policy_veneer &rArr; __acle_se_tfm_tfm_crypto_get_key_policy_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_get_key_policy_veneer
</UL>

<P><STRONG><a name="[1a2]"></a>tfm_tfm_crypto_hash_abort_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_hash_abort_veneer &rArr; __acle_se_tfm_tfm_crypto_hash_abort_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_hash_abort_veneer
</UL>

<P><STRONG><a name="[1a3]"></a>tfm_tfm_crypto_hash_clone_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_hash_clone_veneer &rArr; __acle_se_tfm_tfm_crypto_hash_clone_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_hash_clone_veneer
</UL>

<P><STRONG><a name="[1a4]"></a>tfm_tfm_crypto_hash_finish_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_hash_finish_veneer &rArr; __acle_se_tfm_tfm_crypto_hash_finish_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_hash_finish_veneer
</UL>

<P><STRONG><a name="[1a5]"></a>tfm_tfm_crypto_hash_setup_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_hash_setup_veneer &rArr; __acle_se_tfm_tfm_crypto_hash_setup_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_hash_setup_veneer
</UL>

<P><STRONG><a name="[1a6]"></a>tfm_tfm_crypto_hash_update_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_hash_update_veneer &rArr; __acle_se_tfm_tfm_crypto_hash_update_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_hash_update_veneer
</UL>

<P><STRONG><a name="[1a7]"></a>tfm_tfm_crypto_hash_verify_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_hash_verify_veneer &rArr; __acle_se_tfm_tfm_crypto_hash_verify_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_hash_verify_veneer
</UL>

<P><STRONG><a name="[1a8]"></a>tfm_tfm_crypto_import_key_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_import_key_veneer &rArr; __acle_se_tfm_tfm_crypto_import_key_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_import_key_veneer
</UL>

<P><STRONG><a name="[1a9]"></a>tfm_tfm_crypto_key_agreement_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_key_agreement_veneer &rArr; __acle_se_tfm_tfm_crypto_key_agreement_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_key_agreement_veneer
</UL>

<P><STRONG><a name="[1aa]"></a>tfm_tfm_crypto_key_derivation_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_key_derivation_veneer &rArr; __acle_se_tfm_tfm_crypto_key_derivation_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_key_derivation_veneer
</UL>

<P><STRONG><a name="[1ab]"></a>tfm_tfm_crypto_mac_abort_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_mac_abort_veneer &rArr; __acle_se_tfm_tfm_crypto_mac_abort_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_mac_abort_veneer
</UL>

<P><STRONG><a name="[1ac]"></a>tfm_tfm_crypto_mac_sign_finish_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_mac_sign_finish_veneer &rArr; __acle_se_tfm_tfm_crypto_mac_sign_finish_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_mac_sign_finish_veneer
</UL>

<P><STRONG><a name="[1ad]"></a>tfm_tfm_crypto_mac_sign_setup_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_mac_sign_setup_veneer &rArr; __acle_se_tfm_tfm_crypto_mac_sign_setup_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_mac_sign_setup_veneer
</UL>

<P><STRONG><a name="[1ae]"></a>tfm_tfm_crypto_mac_update_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_mac_update_veneer &rArr; __acle_se_tfm_tfm_crypto_mac_update_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_mac_update_veneer
</UL>

<P><STRONG><a name="[1af]"></a>tfm_tfm_crypto_mac_verify_finish_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_mac_verify_finish_veneer &rArr; __acle_se_tfm_tfm_crypto_mac_verify_finish_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_mac_verify_finish_veneer
</UL>

<P><STRONG><a name="[1b0]"></a>tfm_tfm_crypto_mac_verify_setup_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_mac_verify_setup_veneer &rArr; __acle_se_tfm_tfm_crypto_mac_verify_setup_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_mac_verify_setup_veneer
</UL>

<P><STRONG><a name="[1b1]"></a>tfm_tfm_crypto_set_key_policy_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_crypto_set_key_policy_veneer &rArr; __acle_se_tfm_tfm_crypto_set_key_policy_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_crypto_set_key_policy_veneer
</UL>

<P><STRONG><a name="[1b2]"></a>tfm_tfm_its_get_info_req_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_its_get_info_req_veneer &rArr; __acle_se_tfm_tfm_its_get_info_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_its_get_info_req_veneer
</UL>

<P><STRONG><a name="[1b3]"></a>tfm_tfm_its_get_req_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_its_get_req_veneer &rArr; __acle_se_tfm_tfm_its_get_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_its_get_req_veneer
</UL>

<P><STRONG><a name="[1b4]"></a>tfm_tfm_its_remove_req_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_its_remove_req_veneer &rArr; __acle_se_tfm_tfm_its_remove_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_its_remove_req_veneer
</UL>

<P><STRONG><a name="[1b5]"></a>tfm_tfm_its_set_req_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_its_set_req_veneer &rArr; __acle_se_tfm_tfm_its_set_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_its_set_req_veneer
</UL>

<P><STRONG><a name="[1b6]"></a>tfm_tfm_sst_get_info_req_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_sst_get_info_req_veneer &rArr; __acle_se_tfm_tfm_sst_get_info_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_sst_get_info_req_veneer
</UL>

<P><STRONG><a name="[1b7]"></a>tfm_tfm_sst_get_req_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_sst_get_req_veneer &rArr; __acle_se_tfm_tfm_sst_get_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_sst_get_req_veneer
</UL>

<P><STRONG><a name="[1b8]"></a>tfm_tfm_sst_get_support_req_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_sst_get_support_req_veneer &rArr; __acle_se_tfm_tfm_sst_get_support_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_sst_get_support_req_veneer
</UL>

<P><STRONG><a name="[1b9]"></a>tfm_tfm_sst_remove_req_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_sst_remove_req_veneer &rArr; __acle_se_tfm_tfm_sst_remove_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_sst_remove_req_veneer
</UL>

<P><STRONG><a name="[1ba]"></a>tfm_tfm_sst_set_req_veneer</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tfm_tfm_sst_set_req_veneer &rArr; __acle_se_tfm_tfm_sst_set_req_veneer &rArr; tfm_secure_api_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_tfm_sst_set_req_veneer
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[246]"></a>aes_set_key</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, aes_alt.o(.text.aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_set_key &rArr; HAL_CRYP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>

<P><STRONG><a name="[298]"></a>ecp_modp</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ecp_alt.o(.text.ecp_modp))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[28c]"></a>ecp_group_load</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, ecp_curves_alt.o(.text.ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ecp_group_load &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[290]"></a>ecp_mod_koblitz</STRONG> (Thumb, 224 bytes, Stack size 104 bytes, ecp_curves_alt.o(.text.ecp_mod_koblitz))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256k1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p224k1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p192k1
</UL>

<P><STRONG><a name="[93]"></a>ecp_mod_p192k1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp_curves_alt.o(.text.ecp_mod_p192k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_p192k1 &rArr; ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves_alt.o(.text.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[92]"></a>ecp_mod_p224k1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp_curves_alt.o(.text.ecp_mod_p224k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_p224k1 &rArr; ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves_alt.o(.text.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[90]"></a>ecp_mod_p255</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, ecp_curves_alt.o(.text.ecp_mod_p255))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ecp_mod_p255 &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves_alt.o(.text.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[91]"></a>ecp_mod_p256k1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp_curves_alt.o(.text.ecp_mod_p256k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_p256k1 &rArr; ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves_alt.o(.text.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[8f]"></a>ecp_mod_p448</STRONG> (Thumb, 200 bytes, Stack size 176 bytes, ecp_curves_alt.o(.text.ecp_mod_p448))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ecp_mod_p448 &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves_alt.o(.text.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[3fe]"></a>mbedtls_safer_memcmp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rsa_alt.o(.text.mbedtls_safer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[3fc]"></a>mgf_mask</STRONG> (Thumb, 152 bytes, Stack size 112 bytes, rsa_alt.o(.text.mgf_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mgf_mask &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[3ec]"></a>rsa_check_context</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, rsa_alt.o(.text.rsa_check_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rsa_check_context &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[3fd]"></a>rsa_rsassa_pkcs1_v15_encode</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, rsa_alt.o(.text.rsa_rsassa_pkcs1_v15_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = rsa_rsassa_pkcs1_v15_encode &rArr; mbedtls_oid_get_oid_by_md
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_md
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[26c]"></a>ccm_auth_crypt</STRONG> (Thumb, 464 bytes, Stack size 104 bytes, ccm_alt.o(.text.ccm_auth_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ccm_auth_crypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Encrypt
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Decrypt
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_DeInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYPEx_AESCCM_GenerateAuthTAG
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_star_encrypt_and_tag
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_star_auth_decrypt
</UL>

<P><STRONG><a name="[ad]"></a>ARM_USART0_Control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_com.o(.text.ARM_USART0_Control))
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[b0]"></a>ARM_USART0_GetModemStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, low_level_com.o(.text.ARM_USART0_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARM_USART0_GetModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[ac]"></a>ARM_USART0_GetRxCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, low_level_com.o(.text.ARM_USART0_GetRxCount))
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[ae]"></a>ARM_USART0_GetStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, low_level_com.o(.text.ARM_USART0_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARM_USART0_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[ab]"></a>ARM_USART0_GetTxCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, low_level_com.o(.text.ARM_USART0_GetTxCount))
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[a5]"></a>ARM_USART0_Initialize</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, low_level_com.o(.text.ARM_USART0_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ARM_USART0_Initialize &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[a7]"></a>ARM_USART0_PowerControl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, low_level_com.o(.text.ARM_USART0_PowerControl))
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[a9]"></a>ARM_USART0_Receive</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, low_level_com.o(.text.ARM_USART0_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ARM_USART0_Receive &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[a8]"></a>ARM_USART0_Send</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, low_level_com.o(.text.ARM_USART0_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ARM_USART0_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[af]"></a>ARM_USART0_SetModemControl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, low_level_com.o(.text.ARM_USART0_SetModemControl))
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[aa]"></a>ARM_USART0_Transfer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, low_level_com.o(.text.ARM_USART0_Transfer))
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[a6]"></a>ARM_USART0_Uninitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_com.o(.text.ARM_USART0_Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[a4]"></a>ARM_USART_GetCapabilities</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_com.o(.text.ARM_USART_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[a3]"></a>ARM_USART_GetVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, low_level_com.o(.text.ARM_USART_GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[b9]"></a>ARM_Flash_EraseChip</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, low_level_flash.o(.text.ARM_Flash_EraseChip))
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[b8]"></a>ARM_Flash_EraseSector</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, low_level_flash.o(.text.ARM_Flash_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ARM_Flash_EraseSector &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[b2]"></a>ARM_Flash_GetCapabilities</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_flash.o(.text.ARM_Flash_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[bb]"></a>ARM_Flash_GetInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, low_level_flash.o(.text.ARM_Flash_GetInfo))
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[ba]"></a>ARM_Flash_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, low_level_flash.o(.text.ARM_Flash_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ARM_Flash_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[b1]"></a>ARM_Flash_GetVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, low_level_flash.o(.text.ARM_Flash_GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[b3]"></a>ARM_Flash_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, low_level_flash.o(.text.ARM_Flash_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ARM_Flash_Initialize &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[b5]"></a>ARM_Flash_PowerControl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, low_level_flash.o(.text.ARM_Flash_PowerControl))
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[b7]"></a>ARM_Flash_ProgramData</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, low_level_flash.o(.text.ARM_Flash_ProgramData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ARM_Flash_ProgramData &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[b6]"></a>ARM_Flash_ReadData</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, low_level_flash.o(.text.ARM_Flash_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARM_Flash_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[b4]"></a>ARM_Flash_Uninitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_flash.o(.text.ARM_Flash_Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[400]"></a>mbedtls_zeroize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sha1_alt.o(.text.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>

<P><STRONG><a name="[401]"></a>mbedtls_zeroize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sha256_alt.o(.text.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>

<P><STRONG><a name="[1d1]"></a>__NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tfm_platform_system.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[1c8]"></a>CRYP_AESCCM_Process</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, stm32l5xx_hal_cryp.o(.text.CRYP_AESCCM_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CRYP_AESCCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_WaitOnCCFlag
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_SetKey
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GCMCCM_SetHeaderPhase
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ProcessData
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Encrypt
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Decrypt
</UL>

<P><STRONG><a name="[1ce]"></a>CRYP_AESGCM_Process</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, stm32l5xx_hal_cryp.o(.text.CRYP_AESGCM_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_ErrorCallback
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_WaitOnCCFlag
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_SetKey
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GCMCCM_SetHeaderPhase
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ProcessData
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Encrypt
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Decrypt
</UL>

<P><STRONG><a name="[1cd]"></a>CRYP_AES_ProcessData</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, stm32l5xx_hal_cryp.o(.text.CRYP_AES_ProcessData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_ErrorCallback
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_WaitOnCCFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Encrypt
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Decrypt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESGCM_Process
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESCCM_Process
</UL>

<P><STRONG><a name="[1cb]"></a>CRYP_GCMCCM_SetHeaderPhase</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, stm32l5xx_hal_cryp.o(.text.CRYP_GCMCCM_SetHeaderPhase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CRYP_GCMCCM_SetHeaderPhase &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_WaitOnCCFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESGCM_Process
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESCCM_Process
</UL>

<P><STRONG><a name="[1c9]"></a>CRYP_SetKey</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32l5xx_hal_cryp.o(.text.CRYP_SetKey))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Encrypt
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Decrypt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESGCM_Process
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESCCM_Process
</UL>

<P><STRONG><a name="[1ca]"></a>CRYP_WaitOnCCFlag</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32l5xx_hal_cryp.o(.text.CRYP_WaitOnCCFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Decrypt
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GCMCCM_SetHeaderPhase
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ProcessData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESGCM_Process
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AESCCM_Process
</UL>

<P><STRONG><a name="[1dc]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l5xx_hal_flash.o(.text.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[1da]"></a>FLASH_MassErase</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32l5xx_hal_flash_ex.o(.text.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[210]"></a>HASH_GetDigest</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, stm32l5xx_hal_hash.o(.text.HASH_GetDigest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HASH_GetDigest
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Start
</UL>

<P><STRONG><a name="[20f]"></a>HASH_WaitOnFlagUntilTimeout</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, stm32l5xx_hal_hash.o(.text.HASH_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HASH_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Start
</UL>

<P><STRONG><a name="[20e]"></a>HASH_WriteData</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32l5xx_hal_hash.o(.text.HASH_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HASH_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Start
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Accumulate
</UL>

<P><STRONG><a name="[7a]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxISR_16BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
</UL>
<P><STRONG><a name="[7b]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_RxISR_16BIT_FIFOEN
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[7d]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxISR_8BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[7c]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_RxISR_8BIT_FIFOEN
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[3b1]"></a>mbedtls_mpi_zeroize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bignum.o(.text.mbedtls_mpi_zeroize))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>

<P><STRONG><a name="[3b0]"></a>mpi_bigendian_to_host</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bignum.o(.text.mpi_bigendian_to_host))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
</UL>

<P><STRONG><a name="[3b7]"></a>mpi_check_small_factors</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bignum.o(.text.mpi_check_small_factors))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mpi_check_small_factors &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime_ext
</UL>

<P><STRONG><a name="[3bb]"></a>mpi_get_digit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bignum.o(.text.mpi_get_digit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpi_get_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[3b8]"></a>mpi_miller_rabin</STRONG> (Thumb, 424 bytes, Stack size 120 bytes, bignum.o(.text.mpi_miller_rabin))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime_ext
</UL>

<P><STRONG><a name="[3ae]"></a>mpi_montmul</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, bignum.o(.text.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[3af]"></a>mpi_montred</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, bignum.o(.text.mpi_montred))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[3b9]"></a>mpi_mul_hlp</STRONG> (Thumb, 686 bytes, Stack size 44 bytes, bignum.o(.text.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[3bc]"></a>mpi_sub_hlp</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bignum.o(.text.mpi_sub_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[8a]"></a>add_one_and_zeros_padding</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cipher.o(.text.add_one_and_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_one_and_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[8c]"></a>add_pkcs_padding</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cipher.o(.text.add_pkcs_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add_pkcs_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text.mbedtls_cipher_setup)
</UL>
<P><STRONG><a name="[88]"></a>add_zeros_and_len_padding</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cipher.o(.text.add_zeros_and_len_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_zeros_and_len_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[86]"></a>add_zeros_padding</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cipher.o(.text.add_zeros_padding))
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[84]"></a>get_no_padding</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cipher.o(.text.get_no_padding))
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[89]"></a>get_one_and_zeros_padding</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, cipher.o(.text.get_one_and_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_one_and_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[8b]"></a>get_pkcs_padding</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, cipher.o(.text.get_pkcs_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_pkcs_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text.mbedtls_cipher_setup)
</UL>
<P><STRONG><a name="[87]"></a>get_zeros_and_len_padding</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cipher.o(.text.get_zeros_and_len_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_zeros_and_len_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[85]"></a>get_zeros_padding</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cipher.o(.text.get_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[bd]"></a>aes_crypt_cbc_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(.text.aes_crypt_cbc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = aes_crypt_cbc_wrap &rArr; mbedtls_aes_crypt_cbc &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.aes_info)
</UL>
<P><STRONG><a name="[be]"></a>aes_crypt_cfb128_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(.text.aes_crypt_cfb128_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = aes_crypt_cfb128_wrap &rArr; mbedtls_aes_crypt_cfb128 &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb128
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.aes_info)
</UL>
<P><STRONG><a name="[c0]"></a>aes_crypt_ctr_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(.text.aes_crypt_ctr_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = aes_crypt_ctr_wrap &rArr; mbedtls_aes_crypt_ctr &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.aes_info)
</UL>
<P><STRONG><a name="[bc]"></a>aes_crypt_ecb_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(.text.aes_crypt_ecb_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.aes_info)
</UL>
<P><STRONG><a name="[bf]"></a>aes_crypt_ofb_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(.text.aes_crypt_ofb_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = aes_crypt_ofb_wrap &rArr; mbedtls_aes_crypt_ofb &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ofb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.aes_info)
</UL>
<P><STRONG><a name="[c3]"></a>aes_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cipher_wrap.o(.text.aes_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aes_ctx_alloc &rArr; mbedtls_aes_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.aes_info)
</UL>
<P><STRONG><a name="[c4]"></a>aes_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(.text.aes_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.aes_info)
</UL>
<P><STRONG><a name="[c2]"></a>aes_setkey_dec_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(.text.aes_setkey_dec_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec &rArr; aes_set_key &rArr; HAL_CRYP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.aes_info)
</UL>
<P><STRONG><a name="[c1]"></a>aes_setkey_enc_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(.text.aes_setkey_enc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc &rArr; aes_set_key &rArr; HAL_CRYP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.aes_info)
</UL>
<P><STRONG><a name="[c5]"></a>ccm_aes_setkey_wrap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cipher_wrap.o(.text.ccm_aes_setkey_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ccm_aes_setkey_wrap &rArr; mbedtls_ccm_setkey &rArr; HAL_CRYP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.ccm_aes_info)
</UL>
<P><STRONG><a name="[c6]"></a>ccm_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cipher_wrap.o(.text.ccm_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ccm_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.ccm_aes_info)
</UL>
<P><STRONG><a name="[c7]"></a>ccm_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(.text.ccm_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ccm_ctx_free &rArr; mbedtls_ccm_free &rArr; HAL_CRYP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.ccm_aes_info)
</UL>
<P><STRONG><a name="[c8]"></a>gcm_aes_setkey_wrap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cipher_wrap.o(.text.gcm_aes_setkey_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gcm_aes_setkey_wrap &rArr; mbedtls_gcm_setkey &rArr; HAL_CRYP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.gcm_aes_info)
</UL>
<P><STRONG><a name="[c9]"></a>gcm_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cipher_wrap.o(.text.gcm_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gcm_ctx_alloc &rArr; mbedtls_gcm_init &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.gcm_aes_info)
</UL>
<P><STRONG><a name="[ca]"></a>gcm_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(.text.gcm_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gcm_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.gcm_aes_info)
</UL>
<P><STRONG><a name="[364]"></a>cmac_multiply_by_u</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cmac.o(.text.cmac_multiply_by_u))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmac_multiply_by_u
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
</UL>

<P><STRONG><a name="[365]"></a>cmac_xor_block</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmac.o(.text.cmac_xor_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmac_xor_block
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_update
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
</UL>

<P><STRONG><a name="[266]"></a>block_cipher_df</STRONG> (Thumb, 396 bytes, Stack size 856 bytes, ctr_drbg.o(.text.block_cipher_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[278]"></a>ctr_drbg_update_internal</STRONG> (Thumb, 140 bytes, Stack size 80 bytes, ctr_drbg.o(.text.ctr_drbg_update_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ctr_drbg_update_internal &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt &rArr; HAL_CRYP_Decrypt &rArr; CRYP_AESGCM_Process &rArr; CRYP_AES_ProcessData &rArr; CRYP_WaitOnCCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[27b]"></a>ecdsa_sign_det_restartable</STRONG> (Thumb, 240 bytes, Stack size 296 bytes, ecdsa.o(.text.ecdsa_sign_det_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = ecdsa_sign_det_restartable &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_privkey &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_restartable
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[29b]"></a>entropy_gather_internal</STRONG> (Thumb, 136 bytes, Stack size 168 bytes, entropy.o(.text.entropy_gather_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha512_ret &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
</UL>

<P><STRONG><a name="[29c]"></a>entropy_update</STRONG> (Thumb, 124 bytes, Stack size 96 bytes, entropy.o(.text.entropy_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = entropy_update &rArr; mbedtls_sha512_ret &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update_ret
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts_ret
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
</UL>

<P><STRONG><a name="[e9]"></a>sha1_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha1_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha1_clone_wrap &rArr; mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha1_info)
</UL>
<P><STRONG><a name="[e7]"></a>sha1_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(.text.sha1_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha1_ctx_alloc &rArr; mbedtls_sha1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha1_info)
</UL>
<P><STRONG><a name="[e8]"></a>sha1_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(.text.sha1_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha1_info)
</UL>
<P><STRONG><a name="[e5]"></a>sha1_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha1_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sha1_finish_wrap &rArr; mbedtls_sha1_finish_ret &rArr; HAL_HASH_SHA1_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha1_info)
</UL>
<P><STRONG><a name="[ea]"></a>sha1_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha1_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sha1_process_wrap &rArr; mbedtls_internal_sha1_process &rArr; HAL_HASH_SHA1_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha1_info)
</UL>
<P><STRONG><a name="[e3]"></a>sha1_starts_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha1_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha1_starts_wrap &rArr; mbedtls_sha1_starts_ret &rArr; HAL_HASH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha1_info)
</UL>
<P><STRONG><a name="[e4]"></a>sha1_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha1_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sha1_update_wrap &rArr; mbedtls_sha1_update_ret &rArr; HAL_HASH_SHA1_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha1_info)
</UL>
<P><STRONG><a name="[f1]"></a>sha224_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha224_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
<LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[ef]"></a>sha224_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(.text.sha224_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha224_ctx_alloc &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
<LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[f0]"></a>sha224_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(.text.sha224_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
<LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[ed]"></a>sha224_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha224_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish_ret &rArr; HAL_HASHEx_SHA256_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
<LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[f2]"></a>sha224_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha224_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_internal_sha256_process &rArr; HAL_HASHEx_SHA256_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
<LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[eb]"></a>sha224_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(.text.sha224_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sha224_starts_wrap &rArr; mbedtls_sha256_starts_ret &rArr; HAL_HASH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
</UL>
<P><STRONG><a name="[ec]"></a>sha224_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha224_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update_ret &rArr; HAL_HASHEx_SHA256_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
<LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[ee]"></a>sha224_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(.text.sha224_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_finish_ret &rArr; HAL_HASHEx_SHA256_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
</UL>
<P><STRONG><a name="[f3]"></a>sha256_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(.text.sha256_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sha256_starts_wrap &rArr; mbedtls_sha256_starts_ret &rArr; HAL_HASH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[f4]"></a>sha256_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(.text.sha256_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_finish_ret &rArr; HAL_HASHEx_SHA256_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[fb]"></a>sha384_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha384_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha384_clone_wrap &rArr; mbedtls_sha512_clone &rArr; __aeabi_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha384_info)
<LI> md_wrap.o(.rodata.mbedtls_sha512_info)
</UL>
<P><STRONG><a name="[f9]"></a>sha384_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(.text.sha384_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sha384_ctx_alloc &rArr; mbedtls_sha512_init &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha384_info)
<LI> md_wrap.o(.rodata.mbedtls_sha512_info)
</UL>
<P><STRONG><a name="[fa]"></a>sha384_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(.text.sha384_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha384_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha384_info)
<LI> md_wrap.o(.rodata.mbedtls_sha512_info)
</UL>
<P><STRONG><a name="[f7]"></a>sha384_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha384_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = sha384_finish_wrap &rArr; mbedtls_sha512_finish_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish_ret
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha384_info)
<LI> md_wrap.o(.rodata.mbedtls_sha512_info)
</UL>
<P><STRONG><a name="[fc]"></a>sha384_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha384_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = sha384_process_wrap &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha512_process
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha384_info)
<LI> md_wrap.o(.rodata.mbedtls_sha512_info)
</UL>
<P><STRONG><a name="[f5]"></a>sha384_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(.text.sha384_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sha384_starts_wrap &rArr; mbedtls_sha512_starts_ret
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha384_info)
</UL>
<P><STRONG><a name="[f6]"></a>sha384_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha384_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = sha384_update_wrap &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update_ret
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha384_info)
<LI> md_wrap.o(.rodata.mbedtls_sha512_info)
</UL>
<P><STRONG><a name="[f8]"></a>sha384_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(.text.sha384_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = sha384_wrap &rArr; mbedtls_sha512_ret &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha384_info)
</UL>
<P><STRONG><a name="[fd]"></a>sha512_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(.text.sha512_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sha512_starts_wrap &rArr; mbedtls_sha512_starts_ret
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha512_info)
</UL>
<P><STRONG><a name="[fe]"></a>sha512_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(.text.sha512_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = sha512_wrap &rArr; mbedtls_sha512_ret &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha512_info)
</UL>
<P><STRONG><a name="[95]"></a>buffer_alloc_calloc</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, memory_buffer_alloc.o(.text.buffer_alloc_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = buffer_alloc_calloc &rArr; verify_chain
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_chain
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memory_buffer_alloc.o(.text.mbedtls_memory_buffer_alloc_init)
</UL>
<P><STRONG><a name="[96]"></a>buffer_alloc_free</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, memory_buffer_alloc.o(.text.buffer_alloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = buffer_alloc_free &rArr; verify_chain
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_header
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_chain
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memory_buffer_alloc.o(.text.mbedtls_memory_buffer_alloc_init)
</UL>
<P><STRONG><a name="[267]"></a>verify_chain</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, memory_buffer_alloc.o(.text.verify_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = verify_chain
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_header
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_free
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_calloc
</UL>

<P><STRONG><a name="[26a]"></a>verify_header</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, memory_buffer_alloc.o(.text.verify_header))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_chain
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_free
</UL>

<P><STRONG><a name="[d0]"></a>ecdsa_alloc_wrap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk_wrap.o(.text.ecdsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ecdsa_alloc_wrap &rArr; mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_ecdsa_info)
</UL>
<P><STRONG><a name="[cc]"></a>ecdsa_can_do</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pk_wrap.o(.text.ecdsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_ecdsa_info)
</UL>
<P><STRONG><a name="[d1]"></a>ecdsa_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(.text.ecdsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ecdsa_free_wrap &rArr; mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_ecdsa_info)
</UL>
<P><STRONG><a name="[ce]"></a>ecdsa_sign_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(.text.ecdsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_write_signature_restartable &rArr; ecdsa_sign_det_restartable &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_privkey &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_ecdsa_info)
</UL>
<P><STRONG><a name="[cd]"></a>ecdsa_verify_wrap</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pk_wrap.o(.text.ecdsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_read_signature_restartable &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_ecdsa_info)
</UL>
<P><STRONG><a name="[d6]"></a>eckey_alloc_wrap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk_wrap.o(.text.eckey_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eckey_alloc_wrap &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pk_wrap.o(.rodata.mbedtls_eckey_info)
<LI> pk_wrap.o(.rodata.mbedtls_eckeydh_info)
</UL>
<P><STRONG><a name="[d3]"></a>eckey_can_do</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pk_wrap.o(.text.eckey_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_eckey_info)
</UL>
<P><STRONG><a name="[cf]"></a>eckey_check_pair</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(.text.eckey_check_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = eckey_check_pair &rArr; mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>
<BR>[Address Reference Count : 3]<UL><LI> pk_wrap.o(.rodata.mbedtls_eckey_info)
<LI> pk_wrap.o(.rodata.mbedtls_eckeydh_info)
<LI> pk_wrap.o(.rodata.mbedtls_ecdsa_info)
</UL>
<P><STRONG><a name="[d2]"></a>eckey_debug</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pk_wrap.o(.text.eckey_debug))
<BR>[Address Reference Count : 3]<UL><LI> pk_wrap.o(.rodata.mbedtls_eckey_info)
<LI> pk_wrap.o(.rodata.mbedtls_eckeydh_info)
<LI> pk_wrap.o(.rodata.mbedtls_ecdsa_info)
</UL>
<P><STRONG><a name="[d7]"></a>eckey_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(.text.eckey_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eckey_free_wrap &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pk_wrap.o(.rodata.mbedtls_eckey_info)
<LI> pk_wrap.o(.rodata.mbedtls_eckeydh_info)
</UL>
<P><STRONG><a name="[cb]"></a>eckey_get_bitlen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(.text.eckey_get_bitlen))
<BR>[Address Reference Count : 3]<UL><LI> pk_wrap.o(.rodata.mbedtls_eckey_info)
<LI> pk_wrap.o(.rodata.mbedtls_eckeydh_info)
<LI> pk_wrap.o(.rodata.mbedtls_ecdsa_info)
</UL>
<P><STRONG><a name="[d5]"></a>eckey_sign_wrap</STRONG> (Thumb, 78 bytes, Stack size 248 bytes, pk_wrap.o(.text.eckey_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = eckey_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_write_signature_restartable &rArr; ecdsa_sign_det_restartable &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_privkey &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_eckey_info)
</UL>
<P><STRONG><a name="[d4]"></a>eckey_verify_wrap</STRONG> (Thumb, 70 bytes, Stack size 240 bytes, pk_wrap.o(.text.eckey_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = eckey_verify_wrap &rArr; ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_read_signature_restartable &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_eckey_info)
</UL>
<P><STRONG><a name="[d8]"></a>eckeydh_can_do</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk_wrap.o(.text.eckeydh_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_eckeydh_info)
</UL>
<P><STRONG><a name="[e0]"></a>rsa_alloc_wrap</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pk_wrap.o(.text.rsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rsa_alloc_wrap &rArr; mbedtls_rsa_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[da]"></a>rsa_can_do</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pk_wrap.o(.text.rsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[df]"></a>rsa_check_pair_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(.text.rsa_check_pair_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = rsa_check_pair_wrap &rArr; mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime_ext &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[e2]"></a>rsa_debug</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pk_wrap.o(.text.rsa_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsa_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[dd]"></a>rsa_decrypt_wrap</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, pk_wrap.o(.text.rsa_decrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = rsa_decrypt_wrap &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[de]"></a>rsa_encrypt_wrap</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, pk_wrap.o(.text.rsa_encrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rsa_encrypt_wrap &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[e1]"></a>rsa_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(.text.rsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_free_wrap &rArr; mbedtls_rsa_free
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[d9]"></a>rsa_get_bitlen</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pk_wrap.o(.text.rsa_get_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsa_get_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[dc]"></a>rsa_sign_wrap</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, pk_wrap.o(.text.rsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = rsa_sign_wrap &rArr; mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[db]"></a>rsa_verify_wrap</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, pk_wrap.o(.text.rsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552 + Unknown Stack Size
<LI>Call Chain = rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[3df]"></a>pkcs12_fill_buffer</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pkcs12.o(.text.pkcs12_fill_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pkcs12_fill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
</UL>

<P><STRONG><a name="[3d5]"></a>pk_get_ecpubkey</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, pkparse.o(.text.pk_get_ecpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[3d3]"></a>pk_get_pk_alg</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, pkparse.o(.text.pk_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = pk_get_pk_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[3d1]"></a>pk_get_rsapubkey</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, pkparse.o(.text.pk_get_rsapubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
</UL>

<P><STRONG><a name="[3ce]"></a>pk_parse_key_pkcs1_der</STRONG> (Thumb, 488 bytes, Stack size 72 bytes, pkparse.o(.text.pk_parse_key_pkcs1_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112<LI>Call Chain = pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[3c9]"></a>pk_parse_key_pkcs8_encrypted_der</STRONG> (Thumb, 296 bytes, Stack size 88 bytes, pkparse.o(.text.pk_parse_key_pkcs8_encrypted_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248 + Unknown Stack Size
<LI>Call Chain = pk_parse_key_pkcs8_encrypted_der &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pkcs12_pbe_alg
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe_sha1_rc4_128
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[3cb]"></a>pk_parse_key_pkcs8_unencrypted_der</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, pkparse.o(.text.pk_parse_key_pkcs8_unencrypted_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[3cf]"></a>pk_parse_key_sec1_der</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, pkparse.o(.text.pk_parse_key_sec1_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[3d4]"></a>pk_use_ecparams</STRONG> (Thumb, 828 bytes, Stack size 408 bytes, pkparse.o(.text.pk_use_ecparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = pk_use_ecparams &rArr; mbedtls_ecp_group_load &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[3da]"></a>pk_write_ec_param</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, pkwrite.o(.text.pk_write_ec_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pk_write_ec_param &rArr; mbedtls_asn1_write_oid &rArr; mbedtls_asn1_write_len
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_ec_grp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
</UL>

<P><STRONG><a name="[3d9]"></a>pk_write_ec_pubkey</STRONG> (Thumb, 72 bytes, Stack size 168 bytes, pkwrite.o(.text.pk_write_ec_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pk_write_ec_pubkey &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
</UL>

<P><STRONG><a name="[369]"></a>mbedtls_cipher_info_from_psa</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, psa_crypto.o(.text.mbedtls_cipher_info_from_psa))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_info_from_psa &rArr; mbedtls_cipher_info_from_values
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_setup
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_setup
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_setup
</UL>

<P><STRONG><a name="[31a]"></a>mbedtls_ecc_group_of_psa</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, psa_crypto.o(.text.mbedtls_ecc_group_of_psa))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_ec_public_key
</UL>

<P><STRONG><a name="[2f3]"></a>mbedtls_md_info_from_psa</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, psa_crypto.o(.text.mbedtls_md_info_from_psa))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_rsa_oaep_set_padding_mode
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_rsa_decode_md_type
</UL>

<P><STRONG><a name="[2de]"></a>mbedtls_to_psa_error</STRONG> (Thumb, 642 bytes, Stack size 0 bytes, psa_crypto.o(.text.mbedtls_to_psa_error))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_update
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_agreement
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_update
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_setup
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_finish
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_random
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_crypto_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_update
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_set_iv
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_generate_iv
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_finish
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_verify
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_encrypt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_decrypt
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_aead_encrypt
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_aead_decrypt
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_setup
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_finish_internal
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_internal_export_key
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_ec_public_key
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_setup
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_setup
</UL>

<P><STRONG><a name="[318]"></a>prepare_raw_data_slot</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, psa_crypto.o(.text.prepare_raw_data_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prepare_raw_data_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
</UL>

<P><STRONG><a name="[2df]"></a>psa_aead_abort</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, psa_crypto.o(.text.psa_aead_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = psa_aead_abort &rArr; mbedtls_ccm_free &rArr; HAL_CRYP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_aead_encrypt
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_aead_decrypt
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_setup
</UL>

<P><STRONG><a name="[2db]"></a>psa_aead_setup</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, psa_crypto.o(.text.psa_aead_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = psa_aead_setup &rArr; mbedtls_gcm_setkey &rArr; HAL_CRYP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_from_slot
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_bits
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_abort
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_psa
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_aead_encrypt
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_aead_decrypt
</UL>

<P><STRONG><a name="[2fe]"></a>psa_cipher_setup</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, psa_crypto.o(.text.psa_cipher_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = psa_cipher_setup &rArr; psa_get_key_from_slot &rArr; psa_key_algorithm_permits
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_abort
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_from_slot
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_bits
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_psa
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_encrypt_setup
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_cipher_decrypt_setup
</UL>

<P><STRONG><a name="[410]"></a>psa_generator_tls12_prf_setup</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, psa_crypto.o(.text.psa_generator_tls12_prf_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = psa_generator_tls12_prf_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_derivation_internal
</UL>

<P><STRONG><a name="[308]"></a>psa_get_empty_key_slot</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, psa_crypto.o(.text.psa_get_empty_key_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = psa_get_empty_key_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_set_key_policy
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_import_key
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generate_key
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_copy_key
</UL>

<P><STRONG><a name="[412]"></a>psa_get_hash_block_size</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, psa_crypto.o(.text.psa_get_hash_block_size))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_setup_internal
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_finish_internal
</UL>

<P><STRONG><a name="[30a]"></a>psa_get_key_bits</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, psa_crypto.o(.text.psa_get_key_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = psa_get_key_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_get_key_information
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_copy_key
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_setup
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_internal_export_key
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_setup
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_setup
</UL>

<P><STRONG><a name="[2e6]"></a>psa_get_key_from_slot</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, psa_crypto.o(.text.psa_get_key_from_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = psa_get_key_from_slot &rArr; psa_key_algorithm_permits
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_slot
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_algorithm_permits
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_derivation
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_agreement
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_export_public_key
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_export_key
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_copy_key
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_verify
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_encrypt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_decrypt
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_setup
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_cipher_setup
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_aead_setup
</UL>

<P><STRONG><a name="[321]"></a>psa_hmac_abort_internal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, psa_crypto.o(.text.psa_hmac_abort_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = psa_hmac_abort_internal &rArr; mbedcrypto__psa_hash_abort
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_abort
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_read
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_abort
</UL>

<P><STRONG><a name="[326]"></a>psa_hmac_finish_internal</STRONG> (Thumb, 128 bytes, Stack size 96 bytes, psa_crypto.o(.text.psa_hmac_finish_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = psa_hmac_finish_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_update
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_setup
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_finish
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_hash_block_size
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_read
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_finish_internal
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_derivation_internal
</UL>

<P><STRONG><a name="[324]"></a>psa_hmac_setup_internal</STRONG> (Thumb, 276 bytes, Stack size 168 bytes, psa_crypto.o(.text.psa_hmac_setup_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = psa_hmac_setup_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_update
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_setup
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_finish
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_hash_block_size
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_generator_read
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_mac_setup
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_derivation_internal
</UL>

<P><STRONG><a name="[343]"></a>psa_import_ec_public_key</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, psa_crypto.o(.text.psa_import_ec_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = psa_import_ec_public_key &rArr; mbedtls_ecp_group_load &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecc_group_of_psa
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_import_key_into_slot
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_agreement
</UL>

<P><STRONG><a name="[30b]"></a>psa_internal_export_key</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, psa_crypto.o(.text.psa_internal_export_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = psa_internal_export_key &rArr; mbedtls_pk_write_key_der &rArr; pk_write_ec_pubkey &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_bits
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_export_public_key
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_export_key
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_copy_key
</UL>

<P><STRONG><a name="[411]"></a>psa_key_algorithm_permits</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, psa_crypto.o(.text.psa_key_algorithm_permits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = psa_key_algorithm_permits
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_from_slot
</UL>

<P><STRONG><a name="[347]"></a>psa_key_derivation_internal</STRONG> (Thumb, 592 bytes, Stack size 320 bytes, psa_crypto.o(.text.psa_key_derivation_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = psa_key_derivation_internal &rArr; psa_hmac_setup_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_setup_internal
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_finish_internal
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_generator_tls12_prf_setup
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_derivation
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_key_agreement
</UL>

<P><STRONG><a name="[413]"></a>psa_key_policy_algorithm_intersection</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, psa_crypto.o(.text.psa_key_policy_algorithm_intersection))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = psa_key_policy_algorithm_intersection
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_restrict_key_policy
</UL>

<P><STRONG><a name="[34b]"></a>psa_mac_finish_internal</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, psa_crypto.o(.text.psa_mac_finish_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = psa_mac_finish_internal &rArr; psa_hmac_finish_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_finish_internal
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_verify_finish
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_sign_finish
</UL>

<P><STRONG><a name="[34d]"></a>psa_mac_setup</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, psa_crypto.o(.text.psa_mac_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = psa_mac_setup &rArr; psa_hmac_setup_internal &rArr; mbedcrypto__psa_hash_update &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_abort
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_hmac_setup_internal
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_from_slot
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get_key_bits
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_to_psa_error
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_psa
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_verify_setup
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_sign_setup
</UL>

<P><STRONG><a name="[309]"></a>psa_restrict_key_policy</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, psa_crypto.o(.text.psa_restrict_key_policy))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = psa_restrict_key_policy &rArr; psa_key_policy_algorithm_intersection
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_key_policy_algorithm_intersection
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_copy_key
</UL>

<P><STRONG><a name="[2ef]"></a>psa_rsa_decode_md_type</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, psa_crypto.o(.text.psa_rsa_decode_md_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = psa_rsa_decode_md_type
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_type
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_psa
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_verify
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_sign
</UL>

<P><STRONG><a name="[2e9]"></a>psa_rsa_oaep_set_padding_mode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, psa_crypto.o(.text.psa_rsa_oaep_set_padding_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = psa_rsa_oaep_set_padding_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_set_padding
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_type
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_psa
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_encrypt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_asymmetric_decrypt
</UL>

<P><STRONG><a name="[33f]"></a>safer_memcmp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, psa_crypto.o(.text.safer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_mac_verify_finish
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_hash_verify
</UL>

<P><STRONG><a name="[2e4]"></a>psa_internal_allocate_key_slot</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, psa_crypto_slot_management.o(.text.psa_internal_allocate_key_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = psa_internal_allocate_key_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedcrypto__psa_allocate_key
</UL>

<P><STRONG><a name="[249]"></a>attest_add_sw_component_claim</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, attestation_core.o(.text.attest_add_sw_component_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = attest_add_sw_component_claim &rArr; attest_token_add_tstr &rArr; QCBOREncode_AddBuffer &rArr; AppendEncodedTypeAndNumber &rArr; InsertEncodedTypeAndNumber &rArr; UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_add_tstr
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_add_bstr
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>

<P><STRONG><a name="[24c]"></a>attest_create_token</STRONG> (Thumb, 856 bytes, Stack size 328 bytes, attestation_core.o(.text.attest_create_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = attest_create_token &rArr; attest_token_finish &rArr; t_cose_sign1_finish &rArr; create_tbs_hash &rArr; t_cose_crypto_hash_finish &rArr; psa_hash_finish &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_get_instance_id
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_get_implementation_id
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_get_hw_version
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_get_boot_seed
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_attest_hal_get_security_lifecycle
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_get_caller_client_id
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_get_tlv_by_module
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_get_tlv_by_id
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_add_sw_component_claim
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_start
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_finish
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_borrow_cbor_cntxt
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_add_tstr
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_add_integer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_token_add_bstr
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_OpenMapOrArray
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_CloseMapOrArray
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_attest_get_token_size
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_attest_get_token
</UL>

<P><STRONG><a name="[24e]"></a>attest_get_tlv_by_id</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, attestation_core.o(.text.attest_get_tlv_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = attest_get_tlv_by_id &rArr; attest_get_tlv_by_module
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_get_tlv_by_module
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>

<P><STRONG><a name="[255]"></a>attest_get_tlv_by_module</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, attestation_core.o(.text.attest_get_tlv_by_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = attest_get_tlv_by_module
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_get_tlv_by_id
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_create_token
</UL>

<P><STRONG><a name="[481]"></a>tfm_crypto_alloc_scratch</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, crypto_init.o(.text.tfm_crypto_alloc_scratch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tfm_crypto_alloc_scratch
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_ipc_handler
</UL>

<P><STRONG><a name="[47f]"></a>tfm_crypto_ipc_handler</STRONG> (Thumb, 424 bytes, Stack size 184 bytes, crypto_init.o(.text.tfm_crypto_ipc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tfm_crypto_ipc_handler &rArr; tfm_crypto_alloc_scratch
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_write
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_wait
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_reply
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_read
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_alloc_scratch
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_crypto_init
</UL>

<P><STRONG><a name="[2b7]"></a>its_flash_fs_file_write_aligned_data</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, its_flash_fs.o(.text.its_flash_fs_file_write_aligned_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = its_flash_fs_file_write_aligned_data &rArr; its_flash_fs_dblock_write_file &rArr; its_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_write_file
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_file_create
</UL>

<P><STRONG><a name="[2a8]"></a>its_dblock_lo_to_phy</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, its_flash_fs_dblock.o(.text.its_dblock_lo_to_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = its_dblock_lo_to_phy &rArr; its_flash_fs_mblock_read_block_metadata &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_read_block_metadata
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_dblock_read_file
</UL>

<P><STRONG><a name="[2c5]"></a>its_init_get_active_metablock</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, its_flash_fs_mblock.o(.text.its_init_get_active_metablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = its_init_get_active_metablock &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_reset_metablock
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_init
</UL>

<P><STRONG><a name="[2c6]"></a>its_mblock_erase_scratch_blocks</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, its_flash_fs_mblock.o(.text.its_mblock_erase_scratch_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = its_mblock_erase_scratch_blocks &rArr; its_flash_erase_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_erase_block
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_meta_update_finalize
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_init
</UL>

<P><STRONG><a name="[2ca]"></a>its_mblock_update_scratch_block_meta</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, its_flash_fs_mblock.o(.text.its_mblock_update_scratch_block_meta))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = its_mblock_update_scratch_block_meta &rArr; its_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_update_scratch_block_meta
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_reset_metablock
</UL>

<P><STRONG><a name="[2c7]"></a>its_mblock_write_scratch_meta_header</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, its_flash_fs_mblock.o(.text.its_mblock_write_scratch_meta_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = its_mblock_write_scratch_meta_header &rArr; its_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_reset_metablock
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;its_flash_fs_mblock_meta_update_finalize
</UL>

<P><STRONG><a name="[1c6]"></a>AppendEncodedTypeAndNumber</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, qcbor_encode.o(.text.AppendEncodedTypeAndNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AppendEncodedTypeAndNumber &rArr; InsertEncodedTypeAndNumber &rArr; UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertEncodedTypeAndNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddInt64
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddBuffer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddTag
</UL>

<P><STRONG><a name="[1c7]"></a>InsertEncodedTypeAndNumber</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, qcbor_encode.o(.text.InsertEncodedTypeAndNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InsertEncodedTypeAndNumber &rArr; UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_CloseMapOrArray
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEncodedTypeAndNumber
</UL>

<P><STRONG><a name="[426]"></a>sst_object_set_encryption_key</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sst_encrypted_object.o(.text.sst_object_set_encryption_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = sst_object_set_encryption_key &rArr; sst_crypto_setkey &rArr; psa_import_key &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_setkey
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_getkey
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_write
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_encrypted_object_read
</UL>

<P><STRONG><a name="[436]"></a>sst_flash_fs_file_write_aligned_data</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sst_flash_fs.o(.text.sst_flash_fs_file_write_aligned_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sst_flash_fs_file_write_aligned_data &rArr; sst_flash_fs_dblock_write_file &rArr; sst_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_write_file
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_write
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_create
</UL>

<P><STRONG><a name="[421]"></a>sst_dblock_lo_to_phy</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, sst_flash_fs_dblock.o(.text.sst_dblock_lo_to_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sst_dblock_lo_to_phy &rArr; sst_flash_fs_mblock_read_block_metadata &rArr; sst_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_read_block_metadata
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_dblock_read_file
</UL>

<P><STRONG><a name="[442]"></a>sst_init_get_active_metablock</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, sst_flash_fs_mblock.o(.text.sst_init_get_active_metablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sst_init_get_active_metablock &rArr; sst_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_reset_metablock
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_init
</UL>

<P><STRONG><a name="[443]"></a>sst_mblock_erase_scratch_blocks</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sst_flash_fs_mblock.o(.text.sst_mblock_erase_scratch_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sst_mblock_erase_scratch_blocks &rArr; sst_flash_erase_block
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_erase_block
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_meta_update_finalize
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_init
</UL>

<P><STRONG><a name="[447]"></a>sst_mblock_update_scratch_block_meta</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sst_flash_fs_mblock.o(.text.sst_mblock_update_scratch_block_meta))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sst_mblock_update_scratch_block_meta &rArr; sst_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_update_scratch_block_meta
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_reset_metablock
</UL>

<P><STRONG><a name="[448]"></a>sst_mblock_update_scratch_file_meta</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sst_flash_fs_mblock.o(.text.sst_mblock_update_scratch_file_meta))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sst_mblock_update_scratch_file_meta &rArr; sst_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_update_scratch_file_meta
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_reset_metablock
</UL>

<P><STRONG><a name="[444]"></a>sst_mblock_write_scratch_meta_header</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sst_flash_fs_mblock.o(.text.sst_mblock_write_scratch_meta_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sst_mblock_write_scratch_meta_header &rArr; sst_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_reset_metablock
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_mblock_meta_update_finalize
</UL>

<P><STRONG><a name="[450]"></a>sst_remove_old_data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sst_object_system.o(.text.sst_remove_old_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = sst_remove_old_data &rArr; sst_object_table_delete_old_table &rArr; sst_flash_fs_file_delete &rArr; sst_flash_fs_dblock_compact_block &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_delete_old_table
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_delete
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_create
</UL>

<P><STRONG><a name="[459]"></a>sst_get_object_entry_idx</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, sst_object_table.o(.text.sst_get_object_entry_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sst_get_object_entry_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_set_obj_tbl_info
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_get_obj_tbl_info
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_delete_object
</UL>

<P><STRONG><a name="[458]"></a>sst_object_table_save_table</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sst_object_table.o(.text.sst_object_table_save_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = sst_object_table_save_table &rArr; sst_flash_fs_file_create &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_flash_fs_file_create
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_get_iv
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_generate_auth_tag
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_destroykey
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_set_crypto_key
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_set_obj_tbl_info
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_delete_object
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_create
</UL>

<P><STRONG><a name="[45b]"></a>sst_object_table_set_crypto_key</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sst_object_table.o(.text.sst_object_table_set_crypto_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = sst_object_table_set_crypto_key &rArr; sst_crypto_setkey &rArr; psa_import_key &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_setkey
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_crypto_getkey
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_save_table
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst_object_table_init
</UL>

<P><STRONG><a name="[216]"></a>QCBOREncode_AddBytes</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, t_cose_sign1_sign.o(.text.QCBOREncode_AddBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = QCBOREncode_AddBytes &rArr; QCBOREncode_AddBuffer &rArr; AppendEncodedTypeAndNumber &rArr; InsertEncodedTypeAndNumber &rArr; UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_finish
</UL>

<P><STRONG><a name="[467]"></a>QCBOREncode_CloseMap</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, t_cose_sign1_sign.o(.text.QCBOREncode_CloseMap))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_init
</UL>

<P><STRONG><a name="[466]"></a>QCBOREncode_OpenMap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, t_cose_sign1_sign.o(.text.QCBOREncode_OpenMap))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_cose_sign1_init
</UL>

<P><STRONG><a name="[217]"></a>QCBOREncode_AddBytes</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, t_cose_util.o(.text.QCBOREncode_AddBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = QCBOREncode_AddBytes &rArr; QCBOREncode_AddBuffer &rArr; AppendEncodedTypeAndNumber &rArr; InsertEncodedTypeAndNumber &rArr; UsefulOutBuf_InsertUsefulBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCBOREncode_AddBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tbs_hash
</UL>

<P><STRONG><a name="[4b2]"></a>attest_signal_handle</STRONG> (Thumb, 40 bytes, Stack size 56 bytes, tfm_attestation_req_mngr.o(.text.attest_signal_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = attest_signal_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_reply
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attest_partition_init
</UL>

<P><STRONG><a name="[136]"></a>psa_attest_get_token</STRONG> (Thumb, 96 bytes, Stack size 608 bytes, tfm_attestation_req_mngr.o(.text.psa_attest_get_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 1556<LI>Call Chain = psa_attest_get_token &rArr; initial_attest_get_token &rArr; attest_create_token &rArr; attest_token_finish &rArr; t_cose_sign1_finish &rArr; create_tbs_hash &rArr; t_cose_crypto_hash_finish &rArr; psa_hash_finish &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_attest_get_token
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_write
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_attestation_req_mngr.o(.text.attest_partition_init)
</UL>
<P><STRONG><a name="[137]"></a>psa_attest_get_token_size</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, tfm_attestation_req_mngr.o(.text.psa_attest_get_token_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 980<LI>Call Chain = psa_attest_get_token_size &rArr; initial_attest_get_token_size &rArr; attest_create_token &rArr; attest_token_finish &rArr; t_cose_sign1_finish &rArr; create_tbs_hash &rArr; t_cose_crypto_hash_finish &rArr; psa_hash_finish &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_attest_get_token_size
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_write
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_attestation_req_mngr.o(.text.attest_partition_init)
</UL>
<P><STRONG><a name="[468]"></a>tfm_core_check_boot_data_access_policy</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tfm_boot_data.o(.text.tfm_core_check_boot_data_access_policy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tfm_core_check_boot_data_access_policy &rArr; tfm_spm_partition_get_running_partition_id
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_spm_partition_get_running_partition_id
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_value_handler
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_get_boot_data_handler
</UL>

<P><STRONG><a name="[2a3]"></a>has_access_to_region</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, tfm_core_mem_check.o(.text.has_access_to_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = has_access_to_region &rArr; check_address_range
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_address_range
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_has_write_access_to_region
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_core_has_read_access_to_region
</UL>

<P><STRONG><a name="[2cd]"></a>its_signal_handle</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, tfm_its_req_mngr.o(.text.its_signal_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = its_signal_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_reply
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_req_mngr_init
</UL>

<P><STRONG><a name="[9a]"></a>tfm_its_get_info_ipc</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, tfm_its_req_mngr.o(.text.tfm_its_get_info_ipc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tfm_its_get_info_ipc &rArr; tfm_its_get_info &rArr; its_flash_fs_file_get_info &rArr; its_flash_fs_mblock_get_file_idx &rArr; its_flash_fs_mblock_read_file_meta &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_write
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_read
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_its_req_mngr.o(.text.tfm_its_req_mngr_init)
</UL>
<P><STRONG><a name="[99]"></a>tfm_its_get_ipc</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, tfm_its_req_mngr.o(.text.tfm_its_get_ipc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tfm_its_get_ipc &rArr; tfm_its_get &rArr; its_flash_fs_file_read &rArr; its_flash_fs_mblock_get_file_idx &rArr; its_flash_fs_mblock_read_file_meta &rArr; its_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_write
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_read
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_its_req_mngr.o(.text.tfm_its_req_mngr_init)
</UL>
<P><STRONG><a name="[9b]"></a>tfm_its_remove_ipc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tfm_its_req_mngr.o(.text.tfm_its_remove_ipc))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tfm_its_remove_ipc &rArr; tfm_its_remove &rArr; its_flash_fs_file_delete &rArr; its_flash_fs_dblock_compact_block &rArr; its_flash_fs_mblock_update_scratch_block_meta &rArr; its_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_read
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_its_req_mngr.o(.text.tfm_its_req_mngr_init)
</UL>
<P><STRONG><a name="[98]"></a>tfm_its_set_ipc</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, tfm_its_req_mngr.o(.text.tfm_its_set_ipc))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tfm_its_set_ipc &rArr; tfm_its_set &rArr; its_flash_fs_file_delete &rArr; its_flash_fs_dblock_compact_block &rArr; its_flash_fs_mblock_update_scratch_block_meta &rArr; its_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_read
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_its_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_its_req_mngr.o(.text.tfm_its_req_mngr_init)
</UL>
<P><STRONG><a name="[13f]"></a>tfm_core_ipc_request</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tfm_psa_api_veneers.o(SFN), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_psa_version_veneer
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_psa_framework_version_veneer
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_psa_connect_veneer
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_psa_close_veneer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_tfm_psa_call_veneer
</UL>

<P><STRONG><a name="[40e]"></a>ps_signal_handle</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tfm_sst_req_mngr.o(.text.ps_signal_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ps_signal_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_reply
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_req_mngr_init
</UL>

<P><STRONG><a name="[9f]"></a>tfm_sst_get_info_ipc</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, tfm_sst_req_mngr.o(.text.tfm_sst_get_info_ipc))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = tfm_sst_get_info_ipc &rArr; tfm_sst_get_info &rArr; sst_object_get_info &rArr; sst_encrypted_object_read &rArr; sst_crypto_auth_and_decrypt &rArr; psa_aead_decrypt &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_write
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_read
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_sst_req_mngr.o(.text.tfm_sst_req_mngr_init)
</UL>
<P><STRONG><a name="[9e]"></a>tfm_sst_get_ipc</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, tfm_sst_req_mngr.o(.text.tfm_sst_get_ipc))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tfm_sst_get_ipc &rArr; tfm_sst_get &rArr; sst_object_read &rArr; sst_encrypted_object_read &rArr; sst_crypto_auth_and_decrypt &rArr; psa_aead_decrypt &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_write
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_read
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_sst_req_mngr.o(.text.tfm_sst_req_mngr_init)
</UL>
<P><STRONG><a name="[a1]"></a>tfm_sst_get_support_ipc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tfm_sst_req_mngr.o(.text.tfm_sst_get_support_ipc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tfm_sst_get_support_ipc
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_write
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_get_support
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_sst_req_mngr.o(.text.tfm_sst_req_mngr_init)
</UL>
<P><STRONG><a name="[a0]"></a>tfm_sst_remove_ipc</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, tfm_sst_req_mngr.o(.text.tfm_sst_remove_ipc))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tfm_sst_remove_ipc &rArr; tfm_sst_remove &rArr; sst_object_delete &rArr; sst_object_table_delete_object &rArr; sst_object_table_save_table &rArr; sst_flash_fs_file_create &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_write
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_read
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_sst_req_mngr.o(.text.tfm_sst_req_mngr_init)
</UL>
<P><STRONG><a name="[9d]"></a>tfm_sst_set_ipc</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, tfm_sst_req_mngr.o(.text.tfm_sst_set_ipc))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = tfm_sst_set_ipc &rArr; tfm_sst_set &rArr; sst_object_create &rArr; sst_object_table_set_obj_tbl_info &rArr; sst_object_table_save_table &rArr; sst_flash_fs_file_create &rArr; sst_flash_fs_mblock_update_scratch_block_meta &rArr; sst_flash_block_to_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_write
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psa_read
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_sst_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_sst_req_mngr.o(.text.tfm_sst_req_mngr_init)
</UL>
<P><STRONG><a name="[a2]"></a>exit_zone</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tfm_thread.o(SFN))
<BR><BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_thrd_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfm_thread.o(.text.tfm_thrd_start)
</UL>
<P><STRONG><a name="[12f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
