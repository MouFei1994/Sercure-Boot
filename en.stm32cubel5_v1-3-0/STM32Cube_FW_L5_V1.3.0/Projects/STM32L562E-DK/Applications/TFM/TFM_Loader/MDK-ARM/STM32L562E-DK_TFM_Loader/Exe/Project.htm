<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM32L562E-DK_TFM_Loader\Exe\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM32L562E-DK_TFM_Loader\Exe\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Mon Sep 14 16:19:00 2020
<BR><P>
<H3>Maximum Stack Usage =        360 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Ospi_Flash_Initialize &rArr; BSP_OSPI_NOR_Init &rArr; BSP_OSPI_NOR_ConfigFlash &rArr; OSPI_NOR_EnterSOPIMode &rArr; MX25LM51245G_WriteEnable &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SecureFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[30]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">ADC1_2_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[66]">AES_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[53]">COMP_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[55]">CRS_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[31]">DAC_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[6f]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[70]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[71]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[72]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[28]">DMA1_Channel1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[29]">DMA1_Channel2_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel3_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel4_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel5_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel6_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel7_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel8_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[59]">DMA2_Channel1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Channel2_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Channel3_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Channel4_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel5_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Channel6_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Channel7_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[60]">DMA2_Channel8_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[26]">DMAMUX1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[27]">DMAMUX1_S_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[16]">EXTI0_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[20]">EXTI10_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[21]">EXTI11_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[22]">EXTI12_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[23]">EXTI13_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[24]">EXTI14_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[25]">EXTI15_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[17]">EXTI1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[18]">EXTI2_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[19]">EXTI3_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[1a]">EXTI4_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[1b]">EXTI5_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[1c]">EXTI6_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[1d]">EXTI7_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[1e]">EXTI8_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[1f]">EXTI9_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[32]">FDCAN1_IT0_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[33]">FDCAN1_IT1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[12]">FLASH_S_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[56]">FMC_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[68]">FPU_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[13]">GTZC_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[7a]">HAL_GPIO_DeInit</a> from stm32l5xx_hal_gpio.o(.text.HAL_GPIO_DeInit) referenced from stm32l562e_discovery_ospi.o(.text.BSP_OSPI_NOR_DeInit)
 <LI><a href="#[7b]">HAL_GPIO_Init</a> from stm32l5xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from stm32l562e_discovery_ospi.o(.text.BSP_OSPI_NOR_Init)
 <LI><a href="#[69]">HASH_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[43]">I2C1_ER_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[42]">I2C1_EV_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[45]">I2C2_ER_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[44]">I2C2_EV_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[62]">I2C3_ER_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[61]">I2C3_EV_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[6d]">I2C4_ER_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[6e]">I2C4_EV_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[74]">ICACHE_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[4e]">LPTIM1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[4f]">LPTIM2_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[6b]">LPTIM3_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[4d]">LPUART1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[57]">OCTOSPI1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[75]">OTFDEC1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[86]">Ospi_Flash_EraseChip</a> from low_level_ospi_flash.o(.text.Ospi_Flash_EraseChip) referenced from low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
 <LI><a href="#[85]">Ospi_Flash_EraseSector</a> from low_level_ospi_flash.o(.text.Ospi_Flash_EraseSector) referenced from low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
 <LI><a href="#[7f]">Ospi_Flash_GetCapabilities</a> from low_level_ospi_flash.o(.text.Ospi_Flash_GetCapabilities) referenced from low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
 <LI><a href="#[88]">Ospi_Flash_GetInfo</a> from low_level_ospi_flash.o(.text.Ospi_Flash_GetInfo) referenced from low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
 <LI><a href="#[87]">Ospi_Flash_GetStatus</a> from low_level_ospi_flash.o(.text.Ospi_Flash_GetStatus) referenced from low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
 <LI><a href="#[7e]">Ospi_Flash_GetVersion</a> from low_level_ospi_flash.o(.text.Ospi_Flash_GetVersion) referenced from low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
 <LI><a href="#[80]">Ospi_Flash_Initialize</a> from low_level_ospi_flash.o(.text.Ospi_Flash_Initialize) referenced from low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
 <LI><a href="#[82]">Ospi_Flash_PowerControl</a> from low_level_ospi_flash.o(.text.Ospi_Flash_PowerControl) referenced from low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
 <LI><a href="#[84]">Ospi_Flash_ProgramData</a> from low_level_ospi_flash.o(.text.Ospi_Flash_ProgramData) referenced from low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
 <LI><a href="#[83]">Ospi_Flash_ReadData</a> from low_level_ospi_flash.o(.text.Ospi_Flash_ReadData) referenced from low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
 <LI><a href="#[81]">Ospi_Flash_Uninitialize</a> from low_level_ospi_flash.o(.text.Ospi_Flash_Uninitialize) referenced from low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
 <LI><a href="#[6a]">PKA_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[c]">PVD_PVM_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[15]">RCC_S_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[67]">RNG_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[e]">RTC_S_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[63]">SAI1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[64]">SAI2_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[58]">SDMMC1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[46]">SPI1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[47]">SPI2_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[6c]">SPI3_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[76]">SystemInit</a> from system_stm32l5xx.o(.text.SystemInit) referenced from startup_stm32l562xx.o(.text)
 <LI><a href="#[f]">TAMP_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[10]">TAMP_S_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[50]">TIM15_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[51]">TIM16_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[52]">TIM17_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[34]">TIM1_BRK_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[37]">TIM1_CC_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[36]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[35]">TIM1_UP_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[38]">TIM2_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[39]">TIM3_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[3a]">TIM4_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[3c]">TIM6_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[3d]">TIM7_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[65]">TSC_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[4b]">UART4_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[4c]">UART5_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[73]">UCPD1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[48]">USART1_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[49]">USART2_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[4a]">USART3_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[54]">USB_FS_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32l562xx.o(.text) referenced from startup_stm32l562xx.o(RESET)
 <LI><a href="#[7d]">__2printf</a> from noretval__2printf.o(.text) referenced from main.o(.text.main)
 <LI><a href="#[77]">__main</a> from __main.o(!!!main) referenced from startup_stm32l562xx.o(.text)
 <LI><a href="#[79]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[78]">fputc</a> from main.o(.text.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[7c]">puts</a> from puts.o(.text) referenced from fw_update_app.o(.text.FW_UPDATE_DownloadNewFirmware)
 <LI><a href="#[7c]">puts</a> from puts.o(.text) referenced from fw_update_app.o(.text.FW_UPDATE_PrintWelcome)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[77]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f7]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[f9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9f]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[8e]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[90]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[fa]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[95]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[92]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[fb]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[100]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[101]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[102]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[103]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[104]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[105]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[106]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[107]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[108]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[109]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[9a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[10f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[110]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[111]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[112]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[113]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[114]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[115]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[8b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[116]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[117]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[94]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[118]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[96]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; FW_UPDATE_Run &rArr; FW_UPDATE_DownloadNewFirmware &rArr; Ymodem_Receive &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[119]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a7]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[99]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[11a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[9b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMAMUX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMAMUX1_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GTZC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>HASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>OTFDEC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USB_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>__user_initial_stackheap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_stm32l562xx.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[f3]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[11b]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_Run
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_DownloadNewFirmware
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[9e]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[8f]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[91]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[11c]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = puts &rArr; fputc &rArr; COM_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_Run
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_DownloadNewFirmware
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 2]<UL><LI> fw_update_app.o(.text.FW_UPDATE_PrintWelcome)
<LI> fw_update_app.o(.text.FW_UPDATE_DownloadNewFirmware)
</UL>
<P><STRONG><a name="[c6]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Init
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_DataPktRxCpltCallback
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteEnable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteCfg2Register
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ResetMemory
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ResetEnable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadStatusRegister
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadSecurityRegister
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadSTR
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadDTR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadCfg2Register
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_PageProgramDTR
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_PageProgram
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_BlockErase
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[11f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9d]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[a2]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a3]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[a4]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[98]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[123]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>BSP_OSPI_NOR_ConfigFlash</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, stm32l562e_discovery_ospi.o(.text.BSP_OSPI_NOR_ConfigFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = BSP_OSPI_NOR_ConfigFlash &rArr; OSPI_NOR_EnterSOPIMode &rArr; MX25LM51245G_WriteEnable &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteEnable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteCfg2Register
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadCfg2Register
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterSOPIMode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterDOPIMode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
</UL>

<P><STRONG><a name="[b1]"></a>BSP_OSPI_NOR_DeInit</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, stm32l562e_discovery_ospi.o(.text.BSP_OSPI_NOR_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_OSPI_NOR_DeInit &rArr; BSP_OSPI_NOR_DisableMemoryMappedMode &rArr; HAL_OSPI_Abort &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_DisableMemoryMappedMode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ospi_Flash_Uninitialize
</UL>

<P><STRONG><a name="[b2]"></a>BSP_OSPI_NOR_DisableMemoryMappedMode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l562e_discovery_ospi.o(.text.BSP_OSPI_NOR_DisableMemoryMappedMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_OSPI_NOR_DisableMemoryMappedMode &rArr; HAL_OSPI_Abort &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_DeInit
</UL>

<P><STRONG><a name="[b5]"></a>BSP_OSPI_NOR_Erase_Block</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stm32l562e_discovery_ospi.o(.text.BSP_OSPI_NOR_Erase_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSP_OSPI_NOR_Erase_Block &rArr; MX25LM51245G_WriteEnable &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteEnable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_BlockErase
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ospi_Flash_EraseSector
</UL>

<P><STRONG><a name="[b7]"></a>BSP_OSPI_NOR_GetStatus</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32l562e_discovery_ospi.o(.text.BSP_OSPI_NOR_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_OSPI_NOR_GetStatus &rArr; MX25LM51245G_ReadStatusRegister &rArr; HAL_OSPI_Receive &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadStatusRegister
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadSecurityRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ospi_Flash_ReadData
</UL>

<P><STRONG><a name="[ba]"></a>BSP_OSPI_NOR_Init</STRONG> (Thumb, 660 bytes, Stack size 88 bytes, stm32l562e_discovery_ospi.o(.text.BSP_OSPI_NOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = BSP_OSPI_NOR_Init &rArr; BSP_OSPI_NOR_ConfigFlash &rArr; OSPI_NOR_EnterSOPIMode &rArr; MX25LM51245G_WriteEnable &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OSPI_NOR_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ResetMemory
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ResetEnable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_GetFlashInfo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_ConfigFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ospi_Flash_Initialize
</UL>

<P><STRONG><a name="[bf]"></a>BSP_OSPI_NOR_Read</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l562e_discovery_ospi.o(.text.BSP_OSPI_NOR_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_OSPI_NOR_Read &rArr; MX25LM51245G_ReadSTR &rArr; HAL_OSPI_Receive &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadSTR
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadDTR
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ospi_Flash_ReadData
</UL>

<P><STRONG><a name="[c2]"></a>BSP_OSPI_NOR_Write</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, stm32l562e_discovery_ospi.o(.text.BSP_OSPI_NOR_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = BSP_OSPI_NOR_Write &rArr; MX25LM51245G_WriteEnable &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteEnable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_PageProgramDTR
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_PageProgram
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ospi_Flash_ProgramData
</UL>

<P><STRONG><a name="[cf]"></a>COM_Flush</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, com.o(.text.COM_Flush))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_Run
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_DownloadNewFirmware
</UL>

<P><STRONG><a name="[c5]"></a>COM_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, com.o(.text.COM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = COM_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>COM_Receive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, com.o(.text.COM_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = COM_Receive &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_Run
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
</UL>

<P><STRONG><a name="[ca]"></a>COM_Transmit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, com.o(.text.COM_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = COM_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutByte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
</UL>

<P><STRONG><a name="[d0]"></a>FW_UPDATE_Run</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, fw_update_app.o(.text.FW_UPDATE_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = FW_UPDATE_Run &rArr; FW_UPDATE_DownloadNewFirmware &rArr; Ymodem_Receive &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Receive
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Flush
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_PrintWelcome
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_DownloadNewFirmware
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32l5xx_hal_crc_ex.o(.text.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[d3]"></a>HAL_CRC_Calculate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32l5xx_hal_crc.o(.text.HAL_CRC_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_CRC_Calculate &rArr; CRC_Handle_8
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Handle_8
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Handle_16
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
</UL>

<P><STRONG><a name="[d6]"></a>HAL_CRC_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32l5xx_hal_crc.o(.text.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_crc.o(.text.HAL_CRC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[df]"></a>HAL_DMA_Abort</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32l5xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Abort
</UL>

<P><STRONG><a name="[ab]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l5xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_Run
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_ConfigFlash
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterSOPIMode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterDOPIMode
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_HeaderPktRxCpltCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_DownloadNewFirmware
</UL>

<P><STRONG><a name="[7a]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 228 bytes, Stack size 44 bytes, stm32l5xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l562e_discovery_ospi.o(.text.BSP_OSPI_NOR_DeInit)
</UL>
<P><STRONG><a name="[7b]"></a>HAL_GPIO_Init</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, stm32l5xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l562e_discovery_ospi.o(.text.BSP_OSPI_NOR_Init)
</UL>
<P><STRONG><a name="[d9]"></a>HAL_GetTick</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tick.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AutoPolling
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Abort
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[da]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l5xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>HAL_InitTick</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tick.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[db]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l5xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b4]"></a>HAL_OSPI_Abort</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32l5xx_hal_ospi.o(.text.HAL_OSPI_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_OSPI_Abort &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_DisableMemoryMappedMode
</UL>

<P><STRONG><a name="[e1]"></a>HAL_OSPI_AutoPolling</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, stm32l5xx_hal_ospi.o(.text.HAL_OSPI_AutoPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_OSPI_AutoPolling &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteEnable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
</UL>

<P><STRONG><a name="[e2]"></a>HAL_OSPI_Command</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32l5xx_hal_ospi.o(.text.HAL_OSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_ConfigCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteEnable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteCfg2Register
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ResetMemory
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ResetEnable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadStatusRegister
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadSecurityRegister
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadSTR
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadDTR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadCfg2Register
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_PageProgramDTR
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_PageProgram
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_BlockErase
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
</UL>

<P><STRONG><a name="[b3]"></a>HAL_OSPI_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l5xx_hal_ospi.o(.text.HAL_OSPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_OSPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_DeInit
</UL>

<P><STRONG><a name="[ac]"></a>HAL_OSPI_Init</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, stm32l5xx_hal_ospi.o(.text.HAL_OSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_OSPI_Init &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OSPI_NOR_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_ConfigFlash
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterDOPIMode
</UL>

<P><STRONG><a name="[e4]"></a>HAL_OSPI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_ospi.o(.text.HAL_OSPI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_DeInit
</UL>

<P><STRONG><a name="[e5]"></a>HAL_OSPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_ospi.o(.text.HAL_OSPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
</UL>

<P><STRONG><a name="[e6]"></a>HAL_OSPI_Receive</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32l5xx_hal_ospi.o(.text.HAL_OSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_OSPI_Receive &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadStatusRegister
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadSecurityRegister
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadSTR
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadDTR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadCfg2Register
</UL>

<P><STRONG><a name="[e7]"></a>HAL_OSPI_Transmit</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l5xx_hal_ospi.o(.text.HAL_OSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_OSPI_Transmit &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteCfg2Register
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_PageProgramDTR
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_PageProgram
</UL>

<P><STRONG><a name="[e8]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[ea]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[eb]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e9]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c7]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_UART_MspInit</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, com.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_UART_Receive</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Receive
</UL>

<P><STRONG><a name="[cb]"></a>HAL_UART_Transmit</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Transmit
</UL>

<P><STRONG><a name="[ae]"></a>MX25LM51245G_AutoPollingMemReady</STRONG> (Thumb, 218 bytes, Stack size 120 bytes, mx25lm51245g.o(.text.MX25LM51245G_AutoPollingMemReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX25LM51245G_AutoPollingMemReady &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AutoPolling
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Erase_Block
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_ConfigFlash
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterSOPIMode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterDOPIMode
</UL>

<P><STRONG><a name="[b6]"></a>MX25LM51245G_BlockErase</STRONG> (Thumb, 204 bytes, Stack size 104 bytes, mx25lm51245g.o(.text.MX25LM51245G_BlockErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX25LM51245G_BlockErase &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Erase_Block
</UL>

<P><STRONG><a name="[bb]"></a>MX25LM51245G_GetFlashInfo</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mx25lm51245g.o(.text.MX25LM51245G_GetFlashInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX25LM51245G_GetFlashInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
</UL>

<P><STRONG><a name="[c4]"></a>MX25LM51245G_PageProgram</STRONG> (Thumb, 184 bytes, Stack size 104 bytes, mx25lm51245g.o(.text.MX25LM51245G_PageProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX25LM51245G_PageProgram &rArr; HAL_OSPI_Transmit &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Write
</UL>

<P><STRONG><a name="[c3]"></a>MX25LM51245G_PageProgramDTR</STRONG> (Thumb, 132 bytes, Stack size 104 bytes, mx25lm51245g.o(.text.MX25LM51245G_PageProgramDTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX25LM51245G_PageProgramDTR &rArr; HAL_OSPI_Transmit &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Write
</UL>

<P><STRONG><a name="[af]"></a>MX25LM51245G_ReadCfg2Register</STRONG> (Thumb, 204 bytes, Stack size 104 bytes, mx25lm51245g.o(.text.MX25LM51245G_ReadCfg2Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX25LM51245G_ReadCfg2Register &rArr; HAL_OSPI_Receive &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_ConfigFlash
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterSOPIMode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterDOPIMode
</UL>

<P><STRONG><a name="[c0]"></a>MX25LM51245G_ReadDTR</STRONG> (Thumb, 138 bytes, Stack size 104 bytes, mx25lm51245g.o(.text.MX25LM51245G_ReadDTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX25LM51245G_ReadDTR &rArr; HAL_OSPI_Receive &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Read
</UL>

<P><STRONG><a name="[c1]"></a>MX25LM51245G_ReadSTR</STRONG> (Thumb, 194 bytes, Stack size 104 bytes, mx25lm51245g.o(.text.MX25LM51245G_ReadSTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX25LM51245G_ReadSTR &rArr; HAL_OSPI_Receive &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Read
</UL>

<P><STRONG><a name="[b8]"></a>MX25LM51245G_ReadSecurityRegister</STRONG> (Thumb, 196 bytes, Stack size 104 bytes, mx25lm51245g.o(.text.MX25LM51245G_ReadSecurityRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX25LM51245G_ReadSecurityRegister &rArr; HAL_OSPI_Receive &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_GetStatus
</UL>

<P><STRONG><a name="[b9]"></a>MX25LM51245G_ReadStatusRegister</STRONG> (Thumb, 196 bytes, Stack size 104 bytes, mx25lm51245g.o(.text.MX25LM51245G_ReadStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX25LM51245G_ReadStatusRegister &rArr; HAL_OSPI_Receive &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_GetStatus
</UL>

<P><STRONG><a name="[bd]"></a>MX25LM51245G_ResetEnable</STRONG> (Thumb, 116 bytes, Stack size 96 bytes, mx25lm51245g.o(.text.MX25LM51245G_ResetEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX25LM51245G_ResetEnable &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
</UL>

<P><STRONG><a name="[be]"></a>MX25LM51245G_ResetMemory</STRONG> (Thumb, 116 bytes, Stack size 96 bytes, mx25lm51245g.o(.text.MX25LM51245G_ResetMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX25LM51245G_ResetMemory &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
</UL>

<P><STRONG><a name="[aa]"></a>MX25LM51245G_WriteCfg2Register</STRONG> (Thumb, 200 bytes, Stack size 104 bytes, mx25lm51245g.o(.text.MX25LM51245G_WriteCfg2Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX25LM51245G_WriteCfg2Register &rArr; HAL_OSPI_Transmit &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_ConfigFlash
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterSOPIMode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterDOPIMode
</UL>

<P><STRONG><a name="[a9]"></a>MX25LM51245G_WriteEnable</STRONG> (Thumb, 268 bytes, Stack size 128 bytes, mx25lm51245g.o(.text.MX25LM51245G_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MX25LM51245G_WriteEnable &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AutoPolling
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Erase_Block
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_ConfigFlash
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterSOPIMode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_NOR_EnterDOPIMode
</UL>

<P><STRONG><a name="[bc]"></a>MX_OSPI_NOR_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32l562e_discovery_ospi.o(.text.MX_OSPI_NOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_OSPI_NOR_Init &rArr; HAL_OSPI_Init &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
</UL>

<P><STRONG><a name="[f2]"></a>Serial_PutByte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, common.o(.text.Serial_PutByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Serial_PutByte &rArr; COM_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
</UL>

<P><STRONG><a name="[f6]"></a>Str2Int</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, common.o(.text.Str2Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Str2Int
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
</UL>

<P><STRONG><a name="[dc]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, system_stm32l5xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[76]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_stm32l5xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l562xx.o(.text)
</UL>
<P><STRONG><a name="[ee]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ef]"></a>UART_CheckIdleState</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l5xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ed]"></a>UART_SetConfig</STRONG> (Thumb, 548 bytes, Stack size 16 bytes, stm32l5xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f0]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32l5xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[f4]"></a>Ymodem_DataPktRxCpltCallback</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fw_update_app.o(.text.Ymodem_DataPktRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Ymodem_DataPktRxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
</UL>

<P><STRONG><a name="[f5]"></a>Ymodem_HeaderPktRxCpltCallback</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, fw_update_app.o(.text.Ymodem_HeaderPktRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ymodem_HeaderPktRxCpltCallback &rArr; HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
</UL>

<P><STRONG><a name="[cd]"></a>Ymodem_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ymodem.o(.text.Ymodem_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ymodem_Init &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_DownloadNewFirmware
</UL>

<P><STRONG><a name="[ce]"></a>Ymodem_Receive</STRONG> (Thumb, 820 bytes, Stack size 80 bytes, ymodem.o(.text.Ymodem_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Ymodem_Receive &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Transmit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Receive
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Flush
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Calculate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Int
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutByte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_HeaderPktRxCpltCallback
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_DataPktRxCpltCallback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_DownloadNewFirmware
</UL>

<P><STRONG><a name="[78]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fputc &rArr; COM_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>main</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = main &rArr; FW_UPDATE_Run &rArr; FW_UPDATE_DownloadNewFirmware &rArr; Ymodem_Receive &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_Run
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[93]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[126]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[127]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d5]"></a>CRC_Handle_16</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l5xx_hal_crc.o(.text.CRC_Handle_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_Handle_16
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Calculate
</UL>

<P><STRONG><a name="[d4]"></a>CRC_Handle_8</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32l5xx_hal_crc.o(.text.CRC_Handle_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_Handle_8
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Calculate
</UL>

<P><STRONG><a name="[e3]"></a>OSPI_ConfigCmd</STRONG> (Thumb, 444 bytes, Stack size 20 bytes, stm32l5xx_hal_ospi.o(.text.OSPI_ConfigCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSPI_ConfigCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>

<P><STRONG><a name="[e0]"></a>OSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, stm32l5xx_hal_ospi.o(.text.OSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AutoPolling
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Abort
</UL>

<P><STRONG><a name="[ad]"></a>OSPI_NOR_EnterDOPIMode</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32l562e_discovery_ospi.o(.text.OSPI_NOR_EnterDOPIMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = OSPI_NOR_EnterDOPIMode &rArr; MX25LM51245G_WriteEnable &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteEnable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteCfg2Register
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadCfg2Register
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_ConfigFlash
</UL>

<P><STRONG><a name="[b0]"></a>OSPI_NOR_EnterSOPIMode</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32l562e_discovery_ospi.o(.text.OSPI_NOR_EnterSOPIMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = OSPI_NOR_EnterSOPIMode &rArr; MX25LM51245G_WriteEnable &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteEnable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_WriteCfg2Register
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_ReadCfg2Register
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25LM51245G_AutoPollingMemReady
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_ConfigFlash
</UL>

<P><STRONG><a name="[cc]"></a>FW_UPDATE_DownloadNewFirmware</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, fw_update_app.o(.text.FW_UPDATE_DownloadNewFirmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = FW_UPDATE_DownloadNewFirmware &rArr; Ymodem_Receive &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Flush
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_Run
</UL>

<P><STRONG><a name="[d1]"></a>FW_UPDATE_PrintWelcome</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, fw_update_app.o(.text.FW_UPDATE_PrintWelcome))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_UPDATE_PrintWelcome
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_Run
</UL>

<P><STRONG><a name="[d2]"></a>__NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fw_update_app.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UPDATE_Run
</UL>

<P><STRONG><a name="[86]"></a>Ospi_Flash_EraseChip</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, low_level_ospi_flash.o(.text.Ospi_Flash_EraseChip))
<BR>[Address Reference Count : 1]<UL><LI> low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
</UL>
<P><STRONG><a name="[85]"></a>Ospi_Flash_EraseSector</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, low_level_ospi_flash.o(.text.Ospi_Flash_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Ospi_Flash_EraseSector &rArr; BSP_OSPI_NOR_Erase_Block &rArr; MX25LM51245G_WriteEnable &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Erase_Block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
</UL>
<P><STRONG><a name="[7f]"></a>Ospi_Flash_GetCapabilities</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_ospi_flash.o(.text.Ospi_Flash_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
</UL>
<P><STRONG><a name="[88]"></a>Ospi_Flash_GetInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, low_level_ospi_flash.o(.text.Ospi_Flash_GetInfo))
<BR>[Address Reference Count : 1]<UL><LI> low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
</UL>
<P><STRONG><a name="[87]"></a>Ospi_Flash_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, low_level_ospi_flash.o(.text.Ospi_Flash_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Ospi_Flash_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
</UL>
<P><STRONG><a name="[7e]"></a>Ospi_Flash_GetVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, low_level_ospi_flash.o(.text.Ospi_Flash_GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
</UL>
<P><STRONG><a name="[80]"></a>Ospi_Flash_Initialize</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, low_level_ospi_flash.o(.text.Ospi_Flash_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Ospi_Flash_Initialize &rArr; BSP_OSPI_NOR_Init &rArr; BSP_OSPI_NOR_ConfigFlash &rArr; OSPI_NOR_EnterSOPIMode &rArr; MX25LM51245G_WriteEnable &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
</UL>
<P><STRONG><a name="[82]"></a>Ospi_Flash_PowerControl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, low_level_ospi_flash.o(.text.Ospi_Flash_PowerControl))
<BR>[Address Reference Count : 1]<UL><LI> low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
</UL>
<P><STRONG><a name="[84]"></a>Ospi_Flash_ProgramData</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, low_level_ospi_flash.o(.text.Ospi_Flash_ProgramData))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Ospi_Flash_ProgramData &rArr; BSP_OSPI_NOR_Write &rArr; MX25LM51245G_WriteEnable &rArr; HAL_OSPI_Command &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
</UL>
<P><STRONG><a name="[83]"></a>Ospi_Flash_ReadData</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, low_level_ospi_flash.o(.text.Ospi_Flash_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Ospi_Flash_ReadData &rArr; BSP_OSPI_NOR_Read &rArr; MX25LM51245G_ReadSTR &rArr; HAL_OSPI_Receive &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_Read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
</UL>
<P><STRONG><a name="[81]"></a>Ospi_Flash_Uninitialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, low_level_ospi_flash.o(.text.Ospi_Flash_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Ospi_Flash_Uninitialize &rArr; BSP_OSPI_NOR_DeInit &rArr; BSP_OSPI_NOR_DisableMemoryMappedMode &rArr; HAL_OSPI_Abort &rArr; OSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OSPI_NOR_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_ospi_flash.o(.rodata.TFM_Driver_OSPI_FLASH0)
</UL>
<P><STRONG><a name="[79]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
